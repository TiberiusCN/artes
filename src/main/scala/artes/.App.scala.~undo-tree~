(undo-tree-save-format-version . 1)
"f53f933180905dabf1c7f1b835b364239d638bfd"
[nil nil nil nil (25711 33051 27547 303000) 0 nil]
([nil nil ((2467 . 2468) (apply yas--snippet-revive 2445 2467 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (2445 . 2467) (#("getSystemClassLoader()" 0 22 (fontified nil)) . 2445) (2445 . 2467) (#("getSystemClassLoader(): ClassLoader" 0 35 (fontified nil)) . -2445) (2445 . 2480) (2433 . 2445) (2430 . 2433) 2414) nil (25711 46594 514391 923000) 0 nil] [nil nil ((nil rear-nonsticky nil 2417 . 2418) (#("
" 0 1 (fontified nil)) . -2532) (2413 . 2533) (t 25710 36002 2473 688000)) ((#("
    val rootLoader = this.getClass().getClassLoader()
    val dependencyLoader = new DependencyClassLoader(rootLoader)
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (rear-nonsticky nil fontified nil) 5 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 19 (face font-lock-variable-name-face fontified nil) 19 20 (fontified nil) 20 21 (face font-lock-keyword-face fontified nil) 21 22 (fontified nil) 22 26 (face font-lock-keyword-face fontified nil) 26 35 (fontified nil) 35 36 (face (rainbow-delimiters-depth-2-face) fontified nil) 36 37 (face (rainbow-delimiters-depth-2-face) fontified nil) 37 52 (fontified nil) 52 53 (face (rainbow-delimiters-depth-2-face) fontified nil) 53 54 (face (rainbow-delimiters-depth-2-face) fontified nil) 54 55 (fontified nil) 55 59 (fontified nil) 59 62 (face font-lock-keyword-face fontified nil) 62 63 (fontified nil) 63 79 (face font-lock-variable-name-face fontified nil) 79 80 (fontified nil) 80 81 (face font-lock-keyword-face fontified nil) 81 82 (fontified nil) 82 85 (face font-lock-keyword-face fontified nil) 85 86 (fontified nil) 86 107 (face font-lock-type-face fontified nil) 107 108 (face (rainbow-delimiters-depth-2-face) fontified nil) 108 118 (fontified nil) 118 119 (face (rainbow-delimiters-depth-2-face) fontified nil) 119 120 (fontified nil)) . 2413) (undo-tree-id20 . -55) (undo-tree-id21 . -55) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -59) (undo-tree-id25 . -1) (undo-tree-id26 . -5) (undo-tree-id27 . -59) (undo-tree-id28 . -5) (undo-tree-id29 . -5) (undo-tree-id30 . -5) (undo-tree-id31 . -5) (undo-tree-id32 . -5) (undo-tree-id33 . -5) (undo-tree-id34 . -5) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -59) (undo-tree-id40 . -7) (undo-tree-id41 . -7) (undo-tree-id42 . -59) (undo-tree-id43 . -7) (undo-tree-id44 . -7) (undo-tree-id45 . -7) (undo-tree-id46 . -7) (undo-tree-id47 . -7) (undo-tree-id48 . -7) (undo-tree-id49 . -7) (undo-tree-id50 . -7) (undo-tree-id51 . -61) (undo-tree-id52 . -61) (undo-tree-id53 . -61) (undo-tree-id54 . -61) (undo-tree-id55 . -61) (undo-tree-id56 . -55) (undo-tree-id57 . -59) (undo-tree-id58 . -59) (undo-tree-id59 . -59) (undo-tree-id60 . -59) (undo-tree-id61 . -59) (undo-tree-id62 . -59) (undo-tree-id63 . -59) (undo-tree-id64 . -59) (undo-tree-id65 . -59) (undo-tree-id66 . -59) (undo-tree-id67 . -59) (2532 . 2533) (nil rear-nonsticky t 2417 . 2418)) (25711 33050 453248 303000) 0 nil])
([nil nil ((#("  ClassLoader.getSystemClassLoader().
" 0 2 (fontified t) 2 13 (face font-lock-constant-face fontified t) 13 14 (fontified t) 14 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (fontified t) 37 38 (fontified t)) . 2431) (undo-tree-id68 . -38) (undo-tree-id69 . -38) (undo-tree-id70 . -37) (undo-tree-id71 . -36) (undo-tree-id72 . 1) (undo-tree-id73 . 1) 2467) nil (25711 46594 514383 472000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -2468) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (2466 . 2468) (#("    " 0 3 (fontified nil) 3 4 (rear-nonsticky t fontified nil)) . -2416) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (2414 . 2416) 2472) ((#("  " 0 2 (fontified nil)) . 2414) (2416 . 2420) (#("  " 0 2 (fontified nil)) . 2466) (2468 . 2472) (t 25711 32928 816782 350000)) (25711 32928 813096 102000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -5076) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (5078 . 5079) (5075 . 5078) (5056 . 5075) (#("R" 0 1 (face font-lock-constant-face fontified t)) . -5056) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -5057) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 5058 (#("n" 0 1 (face font-lock-constant-face fontified t)) . -5058) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 5059 (5049 . 5059) (5048 . 5049) (t 25711 46594 514034 403000) 5048) nil (25711 46664 627094 217000) 0 nil])
nil
([nil nil ((5077 . 5078)) nil (25711 46664 627064 883000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -5065) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (5067 . 5068) (5064 . 5067) (5049 . 5064) (5048 . 5049) (5047 . 5048) (t 25711 46664 627569 980000) 5046) nil (25711 46940 891593 957000) 0 nil])
([nil nil ((5116 . 5117) (#("  " 0 2 (fontified nil)) . -5115) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (5117 . 5118) (5112 . 5117) (5109 . 5112) (#(" " 0 1 (fontified t)) . -5109) (undo-tree-id87 . -1) 5110 (5109 . 5110) (5097 . 5109) (#("." 0 1 (fontified t)) . -5097) (undo-tree-id88 . -1) (#("w" 0 1 (fontified t)) . -5098) (undo-tree-id89 . -1) 5099 (5097 . 5099) (#("." 0 1 (fontified t)) . -5097) (undo-tree-id90 . -1) (#("w" 0 1 (fontified t)) . -5098) (undo-tree-id91 . -1) (#("i" 0 1 (fontified t)) . -5099) (undo-tree-id92 . -1) 5100 (5098 . 5100) (#("s" 0 1 (fontified t)) . -5098) (undo-tree-id93 . -1) 5099 (5087 . 5099) (#(" " 0 1 (fontified t)) . -5087) (undo-tree-id94 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -5088) (undo-tree-id95 . -1) (#(" " 0 1 (fontified t)) . -5089) (undo-tree-id96 . -1) (#("c" 0 1 (fontified t)) . -5090) (undo-tree-id97 . -1) (#("t" 0 1 (fontified t)) . -5091) (undo-tree-id98 . -1) 5092 (5090 . 5092) (5073 . 5090) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -5073) (undo-tree-id99 . -1) 5074 (5067 . 5074) (5064 . 5067) 5049) nil (25711 46940 891583 551000) 0 nil])
([nil nil ((5116 . 5123)) nil (25711 46940 891548 141000) 0 nil])
([nil nil ((apply yas--snippet-revive 5127 5132 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (5127 . 5132) (#("empty" 0 5 (fontified nil)) . 5127) (5127 . 5132) (#("empty[T]: Behavior[T]" 0 21 (fontified nil)) . -5127) (5127 . 5148) (#("emp" 0 3 (fontified t)) . -5127) (undo-tree-id102 . -3) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) 5130 (5117 . 5130) (5113 . 5117) (nil face font-lock-keyword-face 5112 . 5113) (nil fontified t 5112 . 5113) (5112 . 5113) (t 25711 46940 891651 716000) 5074) nil (25711 46948 358650 651000) 0 nil])
([nil nil ((5132 . 5141) (t 25711 46948 358337 760000)) nil (25711 46953 680377 96000) 0 nil])
([nil nil ((5103 . 5111) (t 25711 46953 681684 885000)) nil (25711 46962 283176 879000) 0 nil])
([nil nil ((5111 . 5112)) nil (25711 46962 283170 733000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -5141) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("N" 0 1 (face font-lock-constant-face fontified t)) . -5142) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -5143) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -5144) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("h" 0 1 (face font-lock-constant-face fontified t)) . -5145) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -5146) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -5147) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("g" 0 1 (face font-lock-constant-face fontified t)) . -5148) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -5149) (undo-tree-id124 . -1) (undo-tree-id125 . 1) (undo-tree-id126 . -1) 5150 (t 25711 46962 285040 469000)) nil (25711 46967 494906 555000) 0 nil])
([nil nil ((#("tem " 0 3 (face font-lock-constant-face fontified t) 3 4 (fontified t)) . 5059) (undo-tree-id127 . -3) (undo-tree-id128 . -4) (t 25711 46967 498387 263000)) nil (25711 46986 836023 383000) 0 nil])
([nil nil ((5059 . 5060) (t 25711 46986 838437 48000)) nil (25711 46988 663727 980000) 0 nil])
([nil nil ((5123 . 5137) (5119 . 5123) (nil face font-lock-keyword-face 5118 . 5119) (nil fontified t 5118 . 5119) (5118 . 5119) (t 25711 46988 665108 405000) 5072) nil (25711 47006 73033 166000) 0 nil])
([nil nil ((5202 . 5205) (5199 . 5202) (t 25711 47006 75153 6000) 5190) nil (25711 48113 547342 519000) 0 nil])
([nil nil ((#("  Sys
" 0 2 (fontified t) 2 5 (face font-lock-constant-face fontified t) 5 6 (fontified t)) . 5200) (undo-tree-id160 . -5) (undo-tree-id161 . 1) (undo-tree-id162 . -4) 5204 (t 25711 48113 547773 527000)) nil (25711 51330 559458 963000) 0 nil])
([nil nil ((5246 . 5247) (apply yas--snippet-revive 5233 5246 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (529 . 560) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (5202 . 5215) (#("ServiceLoader" 0 13 (fontified nil)) . 5202) (5202 . 5215) (#("ServiceL" 0 8 (fontified nil)) . 5202) (5202 . 5210) (#("ServiceLoader - java.util" 0 25 (fontified nil)) . -5202) (5202 . 5227) (#("ServiceL" 0 8 (face font-lock-constant-face fontified t)) . -5202) (undo-tree-id158 . -8) 5210 (5209 . 5210) (#("O" 0 1 (face font-lock-constant-face fontified t)) . -5209) (undo-tree-id159 . -1) 5210 (5202 . 5210) (5199 . 5202) 5173) nil (25711 51330 559427 534000) 0 nil])
([nil nil ((5265 . 5270) (apply yas--snippet-revive 5256 5265 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (5256 . 5265) (#("fasterxml" 0 9 (fontified nil)) . 5256) (5256 . 5265) (#("fasterxml" 0 9 (fontified nil)) . -5256) (5256 . 5265) (#("faster" 0 6 (fontified t)) . -5256) (undo-tree-id155 . -6) 5262 (5256 . 5262) (#("a" 0 1 (fontified t)) . -5256) (undo-tree-id156 . -1) 5257 (5252 . 5257) (5246 . 5252) (#("." 0 1 (fontified t)) . -5246) (undo-tree-id157 . -1) 5247) nil (25711 51330 559418 804000) 0 nil])
([nil nil ((#("  ServiceLoader.load(com.fasterxml.jack
" 0 2 (fontified t) 2 15 (face font-lock-constant-face fontified t) 15 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 25 (fontified t) 25 39 (fontified t) 39 40 (fontified t)) . 5231) (undo-tree-id129 . -39) (undo-tree-id130 . 1) (undo-tree-id131 . -40) (undo-tree-id132 . -40) (undo-tree-id133 . -38) (undo-tree-id134 . 1) (undo-tree-id135 . -35) (undo-tree-id136 . -35) (undo-tree-id137 . -36) (undo-tree-id138 . -36) (undo-tree-id139 . -39) (undo-tree-id140 . -39) (undo-tree-id141 . -38) (undo-tree-id142 . -38) (undo-tree-id143 . -38) (undo-tree-id144 . -38) (undo-tree-id145 . -38) (undo-tree-id146 . -38) (undo-tree-id147 . -38) (undo-tree-id148 . -40) (undo-tree-id149 . -38) (undo-tree-id150 . -38) (undo-tree-id151 . -38) (undo-tree-id152 . -38) (undo-tree-id153 . -38) (undo-tree-id154 . -40) 5269) nil (25711 51330 559406 512000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -5218) (undo-tree-id163 . -2) (5220 . 5221) (5217 . 5220) (5210 . 5217) (5204 . 5210) (#("c" 0 1 (fontified t)) . -5204) (undo-tree-id164 . -1) (#("a" 0 1 (fontified t)) . -5205) (undo-tree-id165 . -1) (#("s" 0 1 (fontified t)) . -5206) (undo-tree-id166 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -5207) (undo-tree-id167 . -1) 5208 (5204 . 5208) (5203 . 5204) (5202 . 5203) (t 25711 51330 559431 446000) 5201) nil (25711 51930 221892 752000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5228) (undo-tree-id168 . -1) (#("=" 0 1 (face font-lock-keyword-face fontified t)) . -5229) (undo-tree-id169 . -1) (#(" " 0 1 (fontified t)) . -5230) (undo-tree-id170 . -1) 5231 (5229 . 5231) (5224 . 5229) (#("v" 0 1 (face font-lock-function-name-face fontified t)) . -5224) (undo-tree-id171 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -5225) (undo-tree-id172 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -5226) (undo-tree-id173 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -5227) (undo-tree-id174 . -1) 5228 (5220 . 5228) (5217 . 5220) (t 25711 51930 224895 817000) 5204) nil (25711 52232 131556 696000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -5261) (undo-tree-id178 . -2) (5263 . 5264) (5260 . 5263) (5259 . 5260) (5238 . 5259) (5231 . 5238) (5230 . 5231) (t 25711 52232 132469 713000) 5229) nil (25711 52285 134777 252000) 0 nil])
([nil nil ((5291 . 5292) (5284 . 5291) (5263 . 5284) (5260 . 5263) 5231) nil (25711 52285 134772 14000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5294 . 5295) (#("
" 0 1 (fontified nil)) . -5358) (5294 . 5359) 5293) nil (25711 52285 134768 173000) 0 nil])
([nil nil ((5301 . 5310) (#("Primary" 0 7 (face font-lock-type-face fontified t)) . 5301) (undo-tree-id175 . -6) (undo-tree-id176 . -7) (undo-tree-id177 . -7)) nil (25711 52285 134762 97000) 0 nil])
([nil nil ((5349 . 5358) (#("primary" 0 7 (face font-lock-string-face fontified t)) . 5349) (undo-tree-id190 . -6) (t 25711 52285 137859 155000)) nil (25711 52321 906969 488000) 0 nil])
([nil nil ((5421 . 5427) (5408 . 5421) (5406 . 5408) (#("." 0 1 (fontified t)) . -5406) (undo-tree-id179 . -1) (#("." 0 1 (fontified t)) . -5407) (undo-tree-id180 . -1) 5408 (5406 . 5408) (apply yas--snippet-revive 5393 5406 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (5393 . 5406) (#("ServiceLoader" 0 13 (fontified nil)) . 5393) (5393 . 5406) (#("Ser" 0 3 (fontified nil)) . 5393) (5393 . 5396) (#("ServiceLoader" 0 13 (fontified nil)) . -5393) (5393 . 5406) (#("Ser" 0 3 (face font-lock-constant-face fontified t)) . -5393) (undo-tree-id181 . -3) 5396 (5393 . 5396) (#("L" 0 1 (face font-lock-constant-face fontified t)) . -5393) (undo-tree-id182 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -5394) (undo-tree-id183 . -1) (#("a" 0 1 (face font-lock-constant-face fontified t)) . -5395) (undo-tree-id184 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -5396) (undo-tree-id185 . -1) (#("S" 0 1 (face font-lock-constant-face fontified t)) . -5397) (undo-tree-id186 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -5398) (undo-tree-id187 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -5399) (undo-tree-id188 . -1) 5400 (5398 . 5400) (5397 . 5398) (#("C" 0 1 (face font-lock-constant-face fontified t)) . -5397) (undo-tree-id189 . -1) 5398 (5393 . 5398) (5390 . 5393) 5389) nil (25711 52478 146443 157000) 0 nil])
([nil nil ((#("  ServiceLoader.load(Actor.getClass)
" 0 2 (fontified t) 2 15 (face font-lock-constant-face fontified t) 15 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 26 (face font-lock-constant-face fontified t) 26 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (fontified t)) . 5391) (undo-tree-id363 . -36) (undo-tree-id364 . -34) (undo-tree-id365 . -21) (undo-tree-id366 . 2) (undo-tree-id367 . -21) (undo-tree-id368 . -34) (undo-tree-id369 . 2) (undo-tree-id370 . -35) (undo-tree-id371 . -34) 5425 (t 25711 52321 907046 661000)) nil (25711 52555 122136 798000) 0 nil] [nil nil ((#("." 0 1 (fontified t)) . -5416) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("c" 0 1 (fontified t)) . -5417) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("l" 0 1 (fontified t)) . -5418) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("a" 0 1 (fontified t)) . -5419) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("s" 0 1 (fontified t)) . -5420) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -5421) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("L" 0 1 (fontified t)) . -5422) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("o" 0 1 (fontified t)) . -5423) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("a" 0 1 (fontified t)) . -5424) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("d" 0 1 (fontified t)) . -5425) (undo-tree-id281 . -1) (undo-tree-id282 . -1) 5426 (5412 . 5426) (#("Actor.getClass" 0 5 (face font-lock-constant-face fontified t) 5 14 (fontified t)) . 5412) (undo-tree-id283 . -13) (undo-tree-id284 . -13) (undo-tree-id285 . -13) (undo-tree-id286 . -14) (undo-tree-id287 . -14) (undo-tree-id288 . -13) (undo-tree-id289 . -14) (undo-tree-id290 . -14) (undo-tree-id291 . -14) (undo-tree-id292 . -5) (undo-tree-id293 . -14) (undo-tree-id294 . -14) (undo-tree-id295 . -14) (undo-tree-id296 . -14) (undo-tree-id297 . -14) (undo-tree-id298 . -14) (undo-tree-id299 . -14) (undo-tree-id300 . -14) (undo-tree-id301 . -13) (undo-tree-id302 . -13) (undo-tree-id303 . -13) (undo-tree-id304 . -13) (undo-tree-id305 . -14) (undo-tree-id306 . -13) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -13) (undo-tree-id312 . -14) (undo-tree-id313 . -14) 5425 (t 25711 52321 907046 661000)) ((5412 . 5426) (#("this.classLoad" 0 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-keyword-face fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil)) . 5412) (undo-tree-id314 . -3) (undo-tree-id315 . -13) (undo-tree-id316 . -13) (undo-tree-id317 . -13) (undo-tree-id318 . -13) (undo-tree-id319 . -13) (undo-tree-id320 . -13) (undo-tree-id321 . -13) (undo-tree-id322 . -13) (undo-tree-id323 . -3) (undo-tree-id324 . -4) (undo-tree-id325 . -3) (5416 . 5426)) (25711 52478 145444 297000) 0 nil])
([nil nil ((5425 . 5426) (#("." 0 1 (fontified t)) . -5425) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("." 0 1 (fontified t)) . -5426) (undo-tree-id347 . -1) 5427 (5426 . 5427) (#("f" 0 1 (fontified t)) . -5426) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("i" 0 1 (fontified t)) . -5427) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("l" 0 1 (fontified t)) . -5428) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("e" 0 1 (fontified t)) . -5429) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 5430 (nil fontified t 5426 . 5430) (#("files" 0 5 (fontified t)) . -5426) (5431 . 5435) 5431 (nil fontified t 5426 . 5431) (#("fichier" 0 7 (fontified t)) . -5426) (5433 . 5438) 5433 (nil fontified t 5429 . 5433) (#("find" 0 4 (fontified t)) . -5426) (5430 . 5437) 5430 (nil fontified t 5426 . 5430) (#("file" 0 4 (fontified t)) . -5426) (5430 . 5434) 5430 (#("fi" 0 2 (fontified t)) . -5426) (5428 . 5432) 5428 (5425 . 5428) (#("." 0 1 (fontified t)) . -5425) (undo-tree-id356 . -1) (#("l" 0 1 (fontified t)) . -5426) (undo-tree-id357 . -1) 5427 (5425 . 5427) (apply yas--snippet-revive 5409 5425 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (5409 . 5425) (#("getClassLoader()" 0 16 (fontified nil)) . 5409) (5409 . 5425) (#("getClassLoader(): ClassLoader" 0 29 (fontified nil)) . -5409) (5409 . 5438) (#("getCl" 0 5 (fontified t)) . -5409) (undo-tree-id358 . -5) 5414 (5413 . 5414) (5408 . 5413) (apply yas--snippet-revive 5398 5408 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (5398 . 5408) (#("getClass()" 0 10 (fontified nil)) . 5398) (5398 . 5408) (#("getClass(): Class[_ <: Object]" 0 30 (fontified nil)) . -5398) (5398 . 5428) (#("get" 0 3 (fontified t)) . -5398) (undo-tree-id359 . -3) 5401 (5398 . 5401) (#("c" 0 1 (fontified t)) . -5398) (undo-tree-id360 . -1) (#("l" 0 1 (fontified t)) . -5399) (undo-tree-id361 . -1) (#("a" 0 1 (fontified t)) . -5400) (undo-tree-id362 . -1) 5401 (5393 . 5401) (5390 . 5393) 5364) nil (25711 52555 122119 966000) 0 nil])
nil
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 5406) (undo-tree-id342 . -1) (undo-tree-id343 . 1) (undo-tree-id344 . -1)) nil (25711 52555 122096 220000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 5406) (undo-tree-id339 . -1) (undo-tree-id340 . 1) (undo-tree-id341 . -1)) nil (25711 52555 122091 401000) 0 nil])
([nil nil ((5432 . 5445) (apply yas--snippet-revive 5422 5433 #s(yas--snippet nil nil #s(yas--exit 5432 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5432 nil) 7 nil nil nil nil)) (5422 . 5433) (#("loadClass($0)" 0 13 (fontified nil)) . 5422) (5422 . 5435) (#("loadClass(x$1: String): Class[_ <: Object]" 0 42 (fontified nil)) . -5422) (5422 . 5464) (#("load" 0 4 (fontified t)) . -5422) (undo-tree-id326 . -4) 5426 (5422 . 5426) (#("f" 0 1 (fontified t)) . -5422) (undo-tree-id327 . -1) 5423 (#("i" 0 1 (fontified t)) . -5423) (undo-tree-id328 . -1) (#("n" 0 1 (fontified t)) . -5424) (undo-tree-id329 . -1) (#("d" 0 1 (fontified t)) . -5425) (undo-tree-id330 . -1) 5426 (5422 . 5426) (#("g" 0 1 (fontified t)) . -5422) (undo-tree-id331 . -1) 5423 (5421 . 5423) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -5421) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -5422) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . 1) (undo-tree-id337 . -1) (#("." 0 1 (fontified t)) . -5423) (undo-tree-id338 . -1) 5424) nil (25711 52555 122081 484000) 0 nil])
([nil nil (5445) nil (25711 52757 523401 812000) 0 nil])
([nil nil ((5393 . 5404) (t 25711 52555 123035 997000)) nil (25711 52757 523399 438000) 0 nil])
([nil nil ((5404 . 5405)) nil (25711 52757 523397 63000) 0 nil])
([nil nil ((5393 . 5396) (#("let" 0 3 (fontified t)) . 5393) (undo-tree-id397 . -2)) nil (25711 52757 523394 688000) 0 nil])
([nil nil ((5400 . 5401) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . 5400)) nil (25711 52757 523391 755000) 0 nil])
([nil nil ((5401 . 5402) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . 5401)) nil (25711 52757 523389 311000) 0 nil])
([nil nil ((5487 . 5489) (5482 . 5487) (#("z" 0 1 (fontified t)) . -5482) (undo-tree-id395 . -1) 5483 (5475 . 5483) (5474 . 5475) (apply yas--snippet-revive 5461 5474 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (5461 . 5474) (#("ServiceLoader" 0 13 (fontified nil)) . 5461) (5461 . 5474) (#("ServiceL" 0 8 (fontified nil)) . 5461) (5461 . 5469) (#("ServiceLoader" 0 13 (fontified nil)) . -5461) (5461 . 5474) (#("ServiceL" 0 8 (face font-lock-constant-face fontified t)) . -5461) (undo-tree-id396 . -8) 5469 (5461 . 5469) (5458 . 5461) 5401) nil (25711 52757 523385 958000) 0 nil])
([nil nil ((5498 . 5500) (apply yas--snippet-revive 5478 5498 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (5478 . 5498) (#("CollectionConverters" 0 20 (fontified nil)) . 5478) (5478 . 5498) (#("CollectionConverters scala.jdk" 0 30 (fontified nil)) . -5478) (5478 . 5508) (#("Con" 0 3 (face font-lock-constant-face fontified t)) . -5478) (undo-tree-id385 . -3) 5481 (5477 . 5481) (#("." 0 1 (fontified t)) . -5477) (undo-tree-id386 . -1) (#("j" 0 1 (fontified t)) . -5478) (undo-tree-id387 . -1) 5479 (5477 . 5479) (apply yas--snippet-revive 5474 5477 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (5474 . 5477) (#("jdk" 0 3 (fontified nil)) . 5474) (5474 . 5477) (#("jdk" 0 3 (fontified nil)) . -5474) (5474 . 5477) (5473 . 5474) (#("." 0 1 (fontified t)) . -5473) (undo-tree-id388 . -1) (#("c" 0 1 (fontified t)) . -5474) (undo-tree-id389 . -1) (#("." 0 1 (fontified t)) . -5475) (undo-tree-id390 . -1) 5476 (5473 . 5476) (#("." 0 1 (fontified t)) . -5473) (undo-tree-id391 . -1) (#("j" 0 1 (fontified t)) . -5474) (undo-tree-id392 . -1) 5475 (5474 . 5475) (#("o" 0 1 (fontified t)) . -5474) (undo-tree-id393 . -1) (#("p" 0 1 (fontified t)) . -5475) (undo-tree-id394 . -1) 5476 (5461 . 5476) (5458 . 5461) 5420) nil (25711 52757 523376 460000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -5554) (undo-tree-id378 . -2) (5556 . 5557) (5551 . 5556) (5536 . 5551) (apply yas--snippet-revive 5529 5536 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (5529 . 5536) (#("asScala" 0 7 (fontified nil)) . 5529) (5529 . 5536) (#("asScala: Iterable[?0]" 0 21 (fontified nil)) . -5529) (5529 . 5550) (#("asSc" 0 4 (fontified t)) . -5529) (undo-tree-id379 . -4) 5533 (5531 . 5533) (5529 . 5531) (#("t" 0 1 (fontified t)) . -5529) (undo-tree-id380 . -1) (#("o" 0 1 (fontified t)) . -5530) (undo-tree-id381 . -1) 5531 (5528 . 5531) (#("." 0 1 (fontified t)) . -5528) (undo-tree-id382 . -1) (#("t" 0 1 (fontified t)) . -5529) (undo-tree-id383 . -1) (#("o" 0 1 (fontified t)) . -5530) (undo-tree-id384 . -1) 5531) nil (25711 52757 523357 882000) 0 nil])
([nil nil ((5563 . 5570) (#("$" 0 1 (syntax-table (1) fontified t)) . -5563) (undo-tree-id372 . -1) 5564 (5556 . 5564) (#("j" 0 1 (fontified t)) . -5556) (undo-tree-id373 . -1) (#("." 0 1 (fontified t)) . -5557) (undo-tree-id374 . -1) (#("p" 0 1 (fontified t)) . -5558) (undo-tree-id375 . -1) (#("r" 0 1 (fontified t)) . -5559) (undo-tree-id376 . -1) (#("o" 0 1 (fontified t)) . -5560) (undo-tree-id377 . -1) 5561 (5558 . 5561) (5557 . 5558) (5556 . 5557) (5552 . 5556) (nil face font-lock-keyword-face 5551 . 5552) (nil fontified t 5551 . 5552) (5551 . 5552) 5503) nil (25711 52757 523342 657000) 0 nil])
([nil nil ((#("    println(s\"$j\")
" 0 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-3-face) fontified t) 12 13 (fontified t) 13 14 (face font-lock-string-face syntax-table (7) fontified t) 14 15 (face font-lock-variable-name-face syntax-table (1) fontified t) 15 16 (face font-lock-variable-name-face fontified t) 16 17 (face font-lock-string-face syntax-table (7) fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (fontified t)) . 5552) (undo-tree-id443 . -19) (undo-tree-id444 . -19) (undo-tree-id445 . -18) (undo-tree-id446 . 1) (undo-tree-id447 . 1) (undo-tree-id448 . -17) (undo-tree-id449 . -17) (undo-tree-id450 . -17) (undo-tree-id451 . -17) (undo-tree-id452 . -17) (undo-tree-id453 . -17) (undo-tree-id454 . -17) (undo-tree-id455 . -17) (undo-tree-id456 . -17) (undo-tree-id457 . -17) (undo-tree-id458 . -17) (undo-tree-id459 . -17) (undo-tree-id460 . -17) (undo-tree-id461 . -17) (undo-tree-id462 . -17) (undo-tree-id463 . -17) (undo-tree-id464 . -17) (undo-tree-id465 . -17) (undo-tree-id466 . -17) (undo-tree-id467 . -17) (undo-tree-id468 . -17) (undo-tree-id469 . -17) (undo-tree-id470 . -17) (undo-tree-id471 . -17) (undo-tree-id472 . -17) (undo-tree-id473 . -17) (undo-tree-id474 . 2) (undo-tree-id475 . -18) (undo-tree-id476 . 8) (undo-tree-id477 . -12) (undo-tree-id478 . -17) (undo-tree-id479 . -17) (undo-tree-id480 . -17) (undo-tree-id481 . -17) (undo-tree-id482 . -17) (undo-tree-id483 . -17) (undo-tree-id484 . -17) (undo-tree-id485 . -19) 5569 (t 25711 52757 524074 800000)) nil (25711 53114 576006 313000) 0 nil])
([nil nil ((5556 . 5558) (5552 . 5556) (nil face font-lock-keyword-face 5551 . 5552) (nil fontified t 5551 . 5552) (5551 . 5552) 5503) nil (25711 53114 575978 97000) 0 nil])
([nil nil ((#("    j.
" 0 6 (fontified t) 6 7 (fontified t)) . 5552) (undo-tree-id398 . -6) (undo-tree-id399 . 1) (undo-tree-id400 . -7) (undo-tree-id401 . -7) (undo-tree-id402 . -7) (undo-tree-id403 . -7) (undo-tree-id404 . -7) (undo-tree-id405 . -7) (undo-tree-id406 . -7) (undo-tree-id407 . -7) (undo-tree-id408 . -7) (undo-tree-id409 . -7) (undo-tree-id410 . -7) (undo-tree-id411 . -7) (undo-tree-id412 . -7) (undo-tree-id413 . -7) (undo-tree-id414 . -7) (undo-tree-id415 . -7) (undo-tree-id416 . -7) (undo-tree-id417 . -7) (undo-tree-id418 . -7) (undo-tree-id419 . -7) (undo-tree-id420 . -7) (undo-tree-id421 . -7) (undo-tree-id422 . -7) (undo-tree-id423 . -7) (undo-tree-id424 . -7) (undo-tree-id425 . -5) (undo-tree-id426 . -7) (undo-tree-id427 . -7) (undo-tree-id428 . -7) (undo-tree-id429 . -7) (undo-tree-id430 . -7) (undo-tree-id431 . -7) (undo-tree-id432 . -7) (undo-tree-id433 . -7) (undo-tree-id434 . 1) (undo-tree-id435 . -5) (undo-tree-id436 . -5) (undo-tree-id437 . -5) (undo-tree-id438 . -5) (undo-tree-id439 . -5) (undo-tree-id440 . -5) (undo-tree-id441 . -5) (undo-tree-id442 . -7) 5557) nil (25711 53114 575969 646000) 0 nil])
([nil nil ((5295 . 5308) (5292 . 5295) (t 25711 53114 578312 753000) 5264) nil (25711 53221 435237 922000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5378 . 5379) (#("
" 0 1 (fontified nil)) . -5392) (5376 . 5393) 5357) nil (25711 53221 435229 890000) 0 nil])
([nil nil ((5588 . 5594) (5584 . 5588) (nil face font-lock-keyword-face 5583 . 5584) (nil fontified t 5583 . 5584) (5583 . 5584) (t 25711 53221 437844 682000) 5535) nil (25711 53234 887444 385000) 0 nil])
([nil nil ((5610 . 5612) (5603 . 5610) (#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -5603) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) 5604 (5590 . 5604) (t 25711 53234 891125 167000)) nil (25711 53250 472648 404000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-keyword-face fontified t)) . 5610) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1)) nil (25711 53250 472643 166000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . 5610) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1)) nil (25711 53250 472631 223000) 0 nil])
([nil nil ((5541 . 5551) (5535 . 5541) (5533 . 5535) (nil face font-lock-keyword-face 5532 . 5533) (nil fontified t 5532 . 5533) (5532 . 5533) (t 25711 53250 477732 160000) 5493) nil (25711 53349 18739 391000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -5640) (undo-tree-id511 . -2) (5642 . 5643) (5637 . 5642) 5636) nil (25711 53349 18732 197000) 0 nil])
([nil nil ((5607 . 5623) (#("T" 0 1 (face font-lock-constant-face fontified t)) . -5607) (undo-tree-id527 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -5608) (undo-tree-id528 . -1) (#("y" 0 1 (face font-lock-constant-face fontified t)) . -5609) (undo-tree-id529 . -1) (#(" " 0 1 (fontified t)) . -5610) (undo-tree-id530 . -1) 5611 (5607 . 5611) (5603 . 5607) (nil face font-lock-keyword-face 5602 . 5603) (nil fontified t 5602 . 5603) (5602 . 5603) (t 25711 53349 20723 796000) 5554) nil (25711 53385 313711 495000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -5630) (5624 . 5630) 5643) nil (25711 53385 313704 860000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -5657) (undo-tree-id523 . -6) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) 5663 (5656 . 5663) 5643) nil (25711 53385 313701 996000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5657) (undo-tree-id516 . 1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1)) nil (25711 53385 313695 850000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -5661) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -2) (5663 . 5664) (5656 . 5663) 5624) nil (25711 53385 313684 745000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5394 . 5395) (#("
" 0 1 (fontified nil)) . -5478) (5394 . 5479) 5393 (t 25711 53385 313945 324000)) nil (25711 53427 535280 479000) 0 nil])
([nil nil ((5401 . 5406) (#("Secondary" 0 9 (face font-lock-type-face fontified t)) . 5401) (undo-tree-id534 . -8)) nil (25711 53427 535278 523000) 0 nil])
([nil nil ((5446 . 5450) (5445 . 5446) (#("secondary" 0 9 (face font-lock-string-face fontified t)) . 5445) (undo-tree-id531 . -8) (undo-tree-id532 . -9) (undo-tree-id533 . -9)) nil (25711 53427 535271 399000) 0 nil])
([nil nil ((#("  scala.util.Try {
" 0 13 (fontified t) 13 16 (face font-lock-constant-face fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 19 (fontified t)) . 5609) (undo-tree-id574 . -18) (undo-tree-id575 . -17) (undo-tree-id576 . -17) (undo-tree-id577 . 2) (undo-tree-id578 . -18) 5626 (t 25711 53427 537157 49000)) nil (25711 53482 843548 616000) 0 nil])
([nil nil ((#("  }
" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t) 3 4 (fontified t)) . 5724) (undo-tree-id569 . -3) (undo-tree-id570 . -4) (undo-tree-id571 . -2) (undo-tree-id572 . 2) (undo-tree-id573 . -3) 5726) nil (25711 53482 843542 819000) 0 nil])
([nil nil ((5644 . 5650)) nil (25711 53482 843537 581000) 0 nil])
([nil nil ((#(".foreach { j =>
    scala.util.Try {
      j.asInstanceOf[Actor].show
    }
  }" 0 1 (fontified t) 1 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 13 (fontified t) 13 15 (face font-lock-keyword-face syntax-table (3) fontified t) 15 16 (fontified t) 16 31 (fontified t) 31 34 (face font-lock-constant-face fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 37 (fontified t) 37 43 (fontified t) 43 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-4-face) fontified t) 58 63 (face font-lock-constant-face fontified t) 63 64 (face (rainbow-delimiters-depth-4-face) fontified t) 64 65 (fontified t) 65 69 (fontified t) 69 70 (fontified t) 70 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-3-face) fontified t) 75 76 (fontified t) 76 78 (fontified t) 78 79 (face (rainbow-delimiters-depth-2-face) fontified t)) . 5650) (undo-tree-id535 . -78) (undo-tree-id536 . -78) (undo-tree-id537 . -78) (undo-tree-id538 . 79) (undo-tree-id539 . -76) (undo-tree-id540 . -76) (undo-tree-id541 . -16) (undo-tree-id542 . -16) (undo-tree-id543 . -37) (undo-tree-id544 . -37) (undo-tree-id545 . -70) (undo-tree-id546 . -70) (undo-tree-id547 . -76) (undo-tree-id548 . -76) (undo-tree-id549 . -58) (undo-tree-id550 . -75) (undo-tree-id551 . -78) (undo-tree-id552 . 79) (undo-tree-id553 . -79) (undo-tree-id554 . -78) (undo-tree-id555 . -75) (undo-tree-id556 . -75) (undo-tree-id557 . -75) (undo-tree-id558 . -75) (undo-tree-id559 . -75) (undo-tree-id560 . -75) (undo-tree-id561 . -75) (undo-tree-id562 . -76) (undo-tree-id563 . 1) (undo-tree-id564 . -79) (undo-tree-id565 . 70) (undo-tree-id566 . -10) (undo-tree-id567 . -78) (undo-tree-id568 . -79) 5728) nil (25711 53482 843530 457000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5644) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("t" 0 1 (fontified t)) . -5645) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (#("o" 0 1 (fontified t)) . -5646) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#("S" 0 1 (fontified t)) . -5647) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (#("e" 0 1 (fontified t)) . -5648) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("q" 0 1 (fontified t)) . -5649) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) 5650 (t 25711 53482 847010 379000)) nil (25711 53670 305564 435000) 0 nil])
([nil nil (5643) nil (25711 53670 305523 857000) 0 nil])
([nil nil ((5611 . 5619)) nil (25711 53670 305521 901000) 0 nil])
([nil nil ((5662 . 5664) (#("i" 0 1 (fontified t)) . -5662) (undo-tree-id715 . -1) (#("." 0 1 (fontified t)) . -5663) (undo-tree-id716 . -1) (#("n" 0 1 (fontified t)) . -5664) (undo-tree-id717 . -1) 5665 (5664 . 5665) (#("h" 0 1 (fontified t)) . -5664) (undo-tree-id718 . -1) 5665 (5661 . 5665) (5655 . 5661) (5652 . 5655) 5618) nil (25711 53670 305519 38000) 0 nil])
([nil nil ((apply yas--snippet-revive 5653 5661 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (5653 . 5661) (#("iterator" 0 8 (fontified nil)) . 5653) (5653 . 5661) (#("iterator: Iterator[?0]" 0 22 (fontified nil)) . -5653) (5653 . 5675) (#("ite" 0 3 (fontified t)) . -5653) (undo-tree-id709 . -3) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -3) (undo-tree-id713 . -3) (undo-tree-id714 . -3) 5656 (5652 . 5656)) nil (25711 53670 305510 447000) 0 nil])
([nil nil ((apply yas--snippet-revive 5673 5685 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (5673 . 5685) (#("nextOption()" 0 12 (fontified nil)) . 5673) (5673 . 5685) (#("nextOption(): Option[Object]" 0 28 (fontified nil)) . -5673) (5673 . 5701) (5672 . 5673) (#("." 0 1 (fontified t)) . -5672) (undo-tree-id707 . -1) (undo-tree-id708 . -1) 5673) nil (25711 53670 305499 622000) 0 nil])
([nil nil ((5666 . 5676) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -5666) (undo-tree-id706 . -1) 5667 (5664 . 5667) (5661 . 5664) 5631) nil (25711 53670 305494 803000) 0 nil])
([nil nil ((5690 . 5695) (5686 . 5690)) nil (25711 53670 305489 984000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -5712) (undo-tree-id691 . -2) (undo-tree-id692 . -2) (undo-tree-id693 . -2) (undo-tree-id694 . -2) (undo-tree-id695 . -2) (undo-tree-id696 . -2) (undo-tree-id697 . -2) (undo-tree-id698 . -2) (undo-tree-id699 . -2) (undo-tree-id700 . -2) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2) (undo-tree-id704 . -2) (undo-tree-id705 . -2) (5714 . 5715) (5709 . 5714) 5694) nil (25711 53670 305487 50000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -5695) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#("f" 0 1 (fontified t)) . -5696) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -5697) (undo-tree-id685 . -1) (undo-tree-id686 . -1) 5698 (5695 . 5698) (#("b" 0 1 (fontified t)) . -5695) (undo-tree-id687 . -1) (#(" " 0 1 (fontified t)) . -5696) (undo-tree-id688 . -1) (#("=" 0 1 (face font-lock-keyword-face fontified t)) . -5697) (undo-tree-id689 . -1) (#(" " 0 1 (fontified t)) . -5698) (undo-tree-id690 . -1) 5699 (5695 . 5699)) nil (25711 53670 305468 263000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5741) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (#("e" 0 1 (fontified t)) . -5742) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("x" 0 1 (fontified t)) . -5743) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("i" 0 1 (fontified t)) . -5744) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) 5745 (5740 . 5745) (apply yas--snippet-revive 5736 5740 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (5736 . 5740) (#("show" 0 4 (fontified nil)) . 5736) (5736 . 5740) (#("show: Unit" 0 10 (fontified nil)) . -5736) (5736 . 5746) (5729 . 5736) (5728 . 5729) (apply yas--snippet-revive 5716 5728 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (5716 . 5728) (#("asInstanceOf" 0 12 (fontified nil)) . 5716) (5716 . 5728) (#("asInstanceOf[T0]: T0" 0 20 (fontified nil)) . -5716) (5716 . 5736) (#("asIn" 0 4 (fontified t)) . -5716) (undo-tree-id680 . -4) 5720 (5709 . 5720)) nil (25711 53670 305448 288000) 0 nil])
([nil nil (5740) nil (25711 53670 305267 678000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -5695) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("f" 0 1 (fontified t)) . -5696) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) 5697 (5695 . 5697)) nil (25711 53670 305264 256000) 0 nil])
([nil nil ((5797 . 5800) (#("s" 0 1 (fontified t)) . -5797) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) 5798 (5783 . 5798) (#("  " 0 2 (fontified nil)) . -5778) (5780 . 5785) (5771 . 5780) (#(" " 0 1 (fontified t)) . -5771) (undo-tree-id591 . -1) 5772 (5756 . 5772) (5749 . 5756) (5745 . 5749) (5741 . 5745)) nil (25711 53670 305254 757000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -5805) (undo-tree-id581 . -4) (5809 . 5810) (5800 . 5809) 5799) nil (25711 53670 305239 113000) 0 nil])
([nil nil ((5695 . 5711) (5690 . 5695) 5681) nil (25711 53670 305234 224000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -5834) (5828 . 5834) (#("      " 0 6 (fontified nil)) . -5805) (5797 . 5805) (#("      " 0 6 (fontified nil)) . -5781) (5773 . 5781) (#("    " 0 4 (fontified nil)) . -5718) (undo-tree-id580 . -4) (5712 . 5718) 5827) nil (25711 53670 305230 383000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -5840) (undo-tree-id579 . -2) (5842 . 5843) (5835 . 5842) 5833) nil (25711 53670 305219 68000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 560) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (16 . 560) (#("import akka.actor.Address
import akka.actor.typed._
import akka.actor.typed.receptionist.Receptionist
import akka.actor.typed.receptionist.ServiceKey
import akka.actor.typed.scaladsl._
import akka.cluster.typed.Cluster
import akka.cluster.typed.Join
import cats.implicits._
import com.typesafe.config.ConfigFactory
import java.io.File
import java.net.URLClassLoader
import java.nio.file.Path
import scala.concurrent.duration._
import scala.jdk.CollectionConverters._
import scala.util.Try
import scala.util.Using
import java.util.ServiceLoader" 0 6 (fontified t face font-lock-keyword-face) 6 18 (fontified t) 18 25 (fontified t face font-lock-constant-face) 25 26 (fontified t) 26 32 (fontified t face font-lock-keyword-face) 32 50 (fontified t) 50 51 (fontified t syntax-table (3) face font-lock-keyword-face) 51 52 (fontified t) 52 58 (fontified t face font-lock-keyword-face) 58 89 (fontified t) 89 101 (fontified t face font-lock-constant-face) 101 102 (fontified t) 102 108 (fontified t face font-lock-keyword-face) 108 139 (fontified t) 139 149 (fontified t face font-lock-constant-face) 149 150 (fontified t) 150 156 (fontified t face font-lock-keyword-face) 156 183 (fontified t) 183 184 (fontified t syntax-table (3) face font-lock-keyword-face) 184 185 (fontified t) 185 191 (fontified t face font-lock-keyword-face) 191 211 (fontified t) 211 218 (fontified t face font-lock-constant-face) 218 219 (fontified t) 219 225 (fontified t face font-lock-keyword-face) 225 245 (fontified t) 245 249 (fontified t face font-lock-constant-face) 249 250 (fontified t) 250 256 (fontified t face font-lock-keyword-face) 256 272 (fontified t) 272 273 (fontified t syntax-table (3) face font-lock-keyword-face) 273 274 (fontified t) 274 280 (fontified t face font-lock-keyword-face) 280 301 (fontified t) 301 314 (fontified t face font-lock-constant-face) 314 315 (fontified t) 315 321 (fontified t face font-lock-keyword-face) 321 330 (fontified t) 330 334 (fontified t face font-lock-constant-face) 334 335 (fontified t) 335 341 (fontified t face font-lock-keyword-face) 341 351 (fontified t) 351 365 (fontified t face font-lock-constant-face) 365 366 (fontified t) 366 372 (fontified t face font-lock-keyword-face) 372 387 (fontified t) 387 391 (fontified t face font-lock-constant-face) 391 392 (fontified t) 392 398 (fontified t face font-lock-keyword-face) 398 425 (fontified t) 425 426 (fontified t syntax-table (3) face font-lock-keyword-face) 426 427 (fontified t) 427 433 (fontified t face font-lock-keyword-face) 433 444 (fontified t) 444 464 (fontified t face font-lock-constant-face) 464 465 (fontified t) 465 466 (fontified t syntax-table (3) face font-lock-keyword-face) 466 467 (fontified t) 467 473 (fontified t face font-lock-keyword-face) 473 485 (fontified t) 485 488 (fontified t face font-lock-constant-face) 488 489 (fontified t) 489 495 (fontified t face font-lock-keyword-face) 495 507 (fontified t) 507 512 (fontified t face font-lock-constant-face) 512 513 (fontified t) 513 519 (fontified t face font-lock-keyword-face) 519 530 (fontified t) 530 543 (fontified t face font-lock-constant-face)) . 16) (undo-tree-id48 . -26) (undo-tree-id49 . -26) (undo-tree-id50 . -52) (undo-tree-id51 . -52) (undo-tree-id52 . -102) (undo-tree-id53 . -102) (undo-tree-id54 . -150) (undo-tree-id55 . -150) (undo-tree-id56 . -185) (undo-tree-id57 . -185) (undo-tree-id58 . -219) (undo-tree-id59 . -219) (undo-tree-id60 . -250) (undo-tree-id61 . -250) (undo-tree-id62 . -274) (undo-tree-id63 . -274) (undo-tree-id64 . -315) (undo-tree-id65 . -315) (undo-tree-id66 . -335) (undo-tree-id67 . -335) (undo-tree-id68 . -366) (undo-tree-id69 . -366) (undo-tree-id70 . -392) (undo-tree-id71 . -392) (undo-tree-id72 . -427) (undo-tree-id73 . -427) (undo-tree-id74 . -467) (undo-tree-id75 . -467) (undo-tree-id76 . -489) (undo-tree-id77 . -489) (undo-tree-id78 . -513) (undo-tree-id79 . -513) (undo-tree-id80 . -250) (undo-tree-id81 . -250) (undo-tree-id82 . -513) (undo-tree-id83 . -513) (undo-tree-id84 . -543) (t 25711 53670 306602 140000)) nil (25712 57945 920195 805000) 0 nil])
([nil nil ((105 . 106) (#("Receptionist" 0 12 (fontified t face font-lock-constant-face)) . 105) (undo-tree-id43 . -11) (undo-tree-id44 . -11) 116) nil (25712 57945 920165 494000) 0 nil])
([nil nil ((#("import akka.actor.typed.receptionist.ServiceKey
" 0 6 (fontified t face font-lock-keyword-face) 6 37 (fontified t) 37 47 (fontified t face font-lock-constant-face) 47 48 (fontified t)) . 107) (undo-tree-id39 . -48) (undo-tree-id40 . -48) (undo-tree-id41 . -47) (undo-tree-id42 . -37) 144) nil (25712 57945 920161 722000) 0 nil])
([nil nil ((168 . 169) (#("Cluster" 0 7 (fontified t face font-lock-constant-face)) . 168) (undo-tree-id38 . -6)) nil (25712 57945 920158 300000) 0 nil])
([nil nil ((#("import akka.cluster.typed.Join
" 0 6 (fontified t face font-lock-keyword-face) 6 26 (fontified t) 26 30 (fontified t face font-lock-constant-face) 30 31 (fontified t)) . 170) (undo-tree-id34 . -31) (undo-tree-id35 . -31) (undo-tree-id36 . -30) (undo-tree-id37 . -26) 196) nil (25712 57945 920155 17000) 0 nil])
([nil nil ((#("import java.io.File
import java.net.URLClassLoader
import java.nio.file.Path
" 0 6 (fontified t face font-lock-keyword-face) 6 15 (fontified t) 15 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 26 (fontified t face font-lock-keyword-face) 26 36 (fontified t) 36 50 (fontified t face font-lock-constant-face) 50 51 (fontified t) 51 57 (fontified t face font-lock-keyword-face) 57 72 (fontified t) 72 76 (fontified t face font-lock-constant-face) 76 77 (fontified t)) . 235) (undo-tree-id13 . -20) (undo-tree-id14 . -20) (undo-tree-id15 . -51) (undo-tree-id16 . -51) (undo-tree-id17 . -77) (undo-tree-id18 . -77) (undo-tree-id19 . -76) (undo-tree-id20 . -69) (undo-tree-id21 . -18) (undo-tree-id22 . -69) (undo-tree-id23 . -69) (undo-tree-id24 . -77) (undo-tree-id25 . -18) (undo-tree-id26 . -69) (undo-tree-id27 . -69) (undo-tree-id28 . -69) (undo-tree-id29 . -51) (undo-tree-id30 . -69) (undo-tree-id31 . -69) (undo-tree-id32 . -69) (undo-tree-id33 . -77) 304) nil (25712 57945 920149 290000) 0 nil])
([nil nil ((359 . 360) (#("Try" 0 3 (fontified t face font-lock-constant-face)) . 359) (undo-tree-id10 . -2) (undo-tree-id11 . -3) (undo-tree-id12 . -3)) nil (25712 57945 920131 411000) 0 nil])
([nil nil ((#("import scala.util.Using
" 0 6 (fontified t face font-lock-keyword-face) 6 18 (fontified t) 18 23 (fontified t face font-lock-constant-face) 23 24 (fontified t)) . 361) (undo-tree-id0 . -24) (undo-tree-id1 . -24) (undo-tree-id2 . -23) (undo-tree-id3 . -18) (undo-tree-id4 . -18) (undo-tree-id5 . -18) (undo-tree-id6 . -18) (undo-tree-id7 . -18) (undo-tree-id8 . -18) (undo-tree-id9 . -24) 379) nil (25712 57945 920121 284000) 0 nil])
([nil nil ((#("import akka.actor.Address
" 0 6 (fontified t face font-lock-keyword-face) 6 18 (fontified t) 18 25 (fontified t face font-lock-constant-face) 25 26 (fontified t)) . 16) (undo-tree-id85 . -26) (undo-tree-id86 . -26) (undo-tree-id87 . -25) (undo-tree-id88 . -26) (t 25712 57945 920845 48000)) nil (25712 57955 379822 718000) 0 nil])
([nil nil ((929 . 936) (#("DynamicActor" 0 12 (fontified t face font-lock-type-face)) . 929) (undo-tree-id153 . -11) (undo-tree-id154 . -12) (undo-tree-id155 . -12) (t 25712 57955 384104 189000)) nil (25712 58098 616008 984000) 0 nil])
([nil nil ((#("  def kind: String
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 10 (fontified t face font-lock-function-name-face) 10 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 18 (fontified t face font-lock-type-face) 18 19 (fontified t)) . 988) (undo-tree-id131 . -19) (undo-tree-id132 . -19) (undo-tree-id133 . -18) (undo-tree-id134 . -12) (undo-tree-id135 . -12) (undo-tree-id136 . -12) (undo-tree-id137 . -12) (undo-tree-id138 . -12) (undo-tree-id139 . -12) (undo-tree-id140 . -12) (undo-tree-id141 . -12) (undo-tree-id142 . -12) (undo-tree-id143 . -12) (undo-tree-id144 . -12) (undo-tree-id145 . -12) (undo-tree-id146 . -12) (undo-tree-id147 . -12) (undo-tree-id148 . -12) (undo-tree-id149 . -12) (undo-tree-id150 . -12) (undo-tree-id151 . -12) (undo-tree-id152 . -19) 1000) nil (25712 58098 616003 746000) 0 nil])
([nil nil ((#("  def name: String
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 10 (fontified t face font-lock-function-name-face) 10 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 18 (fontified t face font-lock-type-face) 18 19 (fontified t)) . 988) (undo-tree-id118 . -19) (undo-tree-id119 . -19) (undo-tree-id120 . -18) (undo-tree-id121 . -12) (undo-tree-id122 . -12) (undo-tree-id123 . -12) (undo-tree-id124 . -12) (undo-tree-id125 . -12) (undo-tree-id126 . -12) (undo-tree-id127 . -12) (undo-tree-id128 . -12) (undo-tree-id129 . -12) (undo-tree-id130 . -19) 1000) nil (25712 58098 615985 727000) 0 nil])
([nil nil ((#("  def config(name: String): Option[Any]
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 17 (fontified t) 17 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 25 (fontified t face font-lock-type-face) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 34 (fontified t face font-lock-type-face) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 38 (fontified t face font-lock-constant-face) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 40 (fontified t)) . 988) (undo-tree-id89 . -40) (undo-tree-id90 . -40) (undo-tree-id91 . -39) (undo-tree-id92 . -15) (undo-tree-id93 . -6) (undo-tree-id94 . -6) (undo-tree-id95 . -39) (undo-tree-id96 . -12) (undo-tree-id97 . -12) (undo-tree-id98 . -12) (undo-tree-id99 . -12) (undo-tree-id100 . -12) (undo-tree-id101 . -12) (undo-tree-id102 . -12) (undo-tree-id103 . -12) (undo-tree-id104 . -12) (undo-tree-id105 . -12) (undo-tree-id106 . -13) (undo-tree-id107 . -13) (undo-tree-id108 . -13) (undo-tree-id109 . -13) (undo-tree-id110 . -13) (undo-tree-id111 . -13) (undo-tree-id112 . -15) (undo-tree-id113 . -15) (undo-tree-id114 . -15) (undo-tree-id115 . -15) (undo-tree-id116 . -15) (undo-tree-id117 . -40) 1003) nil (25712 58098 615973 156000) 0 nil])
([nil nil ((994 . 1008) (990 . 994) (987 . 990) 939) nil (25712 58098 615864 552000) 0 nil])
([nil nil ((987 . 993)) nil (25712 58098 615855 962000) 0 nil])
([nil nil ((#("sealed trait Message {
  // message id, for reliable delivering
  def id: Int
  // source reference
  def ref: (ActorRef[Message], String)
  def copy(id: Int): Message
  def partial: Boolean = false
}
object Message {
  case class Receive(
    ref: (ActorRef[Message], String),
    id: Int,
    data: Array[Byte],
    override val partial: Boolean,
  ) extends Message {
    def copy(id: Int) = copy(id = id)
  }
  case class Verify(
    ref: (ActorRef[Message], String),
    id: Int,
    verify: Int,
  ) extends Message {
    def copy(id: Int) = copy(id = id)
  }
}
" 0 6 (fontified t face scala-font-lock:sealed-face) 6 7 (fontified t) 7 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 20 (fontified t face font-lock-type-face) 20 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 25 (fontified t) 25 28 (fontified t face font-lock-comment-delimiter-face) 28 64 (fontified t face font-lock-comment-face) 64 66 (fontified t) 66 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 72 (fontified t face font-lock-function-name-face) 72 73 (fontified t face font-lock-keyword-face) 73 74 (fontified t) 74 77 (fontified t face font-lock-type-face) 77 80 (fontified t) 80 83 (fontified t face font-lock-comment-delimiter-face) 83 100 (fontified t face font-lock-comment-face) 100 102 (fontified t) 102 105 (fontified t face font-lock-keyword-face) 105 106 (fontified t) 106 109 (fontified t face font-lock-function-name-face) 109 110 (fontified t face font-lock-keyword-face) 110 111 (fontified t) 111 112 (fontified t face (rainbow-delimiters-depth-2-face)) 112 120 (fontified t face font-lock-constant-face) 120 121 (fontified t face (rainbow-delimiters-depth-3-face)) 121 128 (fontified t face font-lock-constant-face) 128 129 (fontified t face (rainbow-delimiters-depth-3-face)) 129 131 (fontified t) 131 137 (fontified t face font-lock-constant-face) 137 138 (fontified t face (rainbow-delimiters-depth-2-face)) 138 141 (fontified t) 141 144 (fontified t face font-lock-keyword-face) 144 145 (fontified t) 145 149 (fontified t face font-lock-function-name-face) 149 150 (fontified t face (rainbow-delimiters-depth-2-face)) 150 152 (fontified t) 152 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 157 (fontified t face font-lock-type-face) 157 158 (fontified t face (rainbow-delimiters-depth-2-face)) 158 159 (fontified t face font-lock-keyword-face) 159 160 (fontified t) 160 167 (fontified t face font-lock-type-face) 167 170 (fontified t) 170 173 (fontified t face font-lock-keyword-face) 173 174 (fontified t) 174 181 (fontified t face font-lock-function-name-face) 181 182 (fontified t face font-lock-keyword-face) 182 183 (fontified t) 183 190 (fontified t face font-lock-type-face) 190 191 (fontified t) 191 192 (fontified t face font-lock-keyword-face) 192 193 (fontified t) 193 198 (fontified t face font-lock-constant-face) 198 199 (fontified t) 199 200 (fontified t face (rainbow-delimiters-depth-1-face)) 200 201 (fontified t) 201 207 (fontified t face font-lock-keyword-face) 207 208 (fontified t) 208 215 (fontified t face font-lock-constant-face) 215 216 (fontified t) 216 217 (fontified t face (rainbow-delimiters-depth-1-face)) 217 220 (fontified t) 220 224 (fontified t face font-lock-keyword-face) 224 225 (fontified t) 225 230 (fontified t face font-lock-keyword-face) 230 231 (fontified t) 231 238 (fontified t face font-lock-type-face) 238 239 (fontified t face (rainbow-delimiters-depth-2-face)) 239 247 (fontified t) 247 248 (fontified t face font-lock-keyword-face) 248 249 (fontified t) 249 250 (fontified t face (rainbow-delimiters-depth-3-face)) 250 258 (fontified t face font-lock-constant-face) 258 259 (fontified t face (rainbow-delimiters-depth-4-face)) 259 266 (fontified t face font-lock-constant-face) 266 267 (fontified t face (rainbow-delimiters-depth-4-face)) 267 269 (fontified t) 269 275 (fontified t face font-lock-constant-face) 275 276 (fontified t face (rainbow-delimiters-depth-3-face)) 276 284 (fontified t) 284 285 (fontified t face font-lock-keyword-face) 285 286 (fontified t) 286 289 (fontified t face font-lock-type-face) 289 299 (fontified t) 299 300 (fontified t face font-lock-keyword-face) 300 301 (fontified t) 301 306 (fontified t face font-lock-type-face) 306 307 (fontified t face (rainbow-delimiters-depth-3-face)) 307 311 (fontified t face font-lock-constant-face) 311 312 (fontified t face (rainbow-delimiters-depth-3-face)) 312 318 (fontified t) 318 326 (fontified t face scala-font-lock:override-face) 326 327 (fontified t) 327 330 (fontified t face font-lock-keyword-face) 330 331 (fontified t) 331 338 (fontified t face font-lock-variable-name-face) 338 339 (fontified t face font-lock-keyword-face) 339 340 (fontified t) 340 347 (fontified t face font-lock-type-face) 347 351 (fontified t) 351 352 (fontified t face (rainbow-delimiters-depth-2-face)) 352 353 (fontified t) 353 360 (fontified t face font-lock-keyword-face) 360 361 (fontified t) 361 368 (fontified t face font-lock-type-face) 368 369 (fontified t) 369 370 (fontified t face (rainbow-delimiters-depth-2-face)) 370 375 (fontified t) 375 378 (fontified t face font-lock-keyword-face) 378 379 (fontified t) 379 383 (fontified t face font-lock-function-name-face) 383 384 (fontified t face (rainbow-delimiters-depth-3-face)) 384 386 (fontified t) 386 387 (fontified t face font-lock-keyword-face) 387 388 (fontified t) 388 391 (fontified t face font-lock-type-face) 391 392 (fontified t face (rainbow-delimiters-depth-3-face)) 392 393 (fontified t) 393 394 (fontified t face font-lock-keyword-face) 394 399 (fontified t) 399 400 (fontified t face (rainbow-delimiters-depth-3-face)) 400 403 (fontified t) 403 404 (fontified t face font-lock-keyword-face) 404 407 (fontified t) 407 408 (fontified t face (rainbow-delimiters-depth-3-face)) 408 411 (fontified t) 411 412 (fontified t face (rainbow-delimiters-depth-2-face)) 412 415 (fontified t) 415 419 (fontified t face font-lock-keyword-face) 419 420 (fontified t) 420 425 (fontified t face font-lock-keyword-face) 425 426 (fontified t) 426 432 (fontified t face font-lock-type-face) 432 433 (fontified t face (rainbow-delimiters-depth-2-face)) 433 441 (fontified t) 441 442 (fontified t face font-lock-keyword-face) 442 443 (fontified t) 443 444 (fontified t face (rainbow-delimiters-depth-3-face)) 444 452 (fontified t face font-lock-constant-face) 452 453 (fontified t face (rainbow-delimiters-depth-4-face)) 453 460 (fontified t face font-lock-constant-face) 460 461 (fontified t face (rainbow-delimiters-depth-4-face)) 461 463 (fontified t) 463 469 (fontified t face font-lock-constant-face) 469 470 (fontified t face (rainbow-delimiters-depth-3-face)) 470 478 (fontified t) 478 479 (fontified t face font-lock-keyword-face) 479 480 (fontified t) 480 483 (fontified t face font-lock-type-face) 483 495 (fontified t) 495 496 (fontified t face font-lock-keyword-face) 496 497 (fontified t) 497 500 (fontified t face font-lock-type-face) 500 504 (fontified t) 504 505 (fontified t face (rainbow-delimiters-depth-2-face)) 505 506 (fontified t) 506 513 (fontified t face font-lock-keyword-face) 513 514 (fontified t) 514 521 (fontified t face font-lock-type-face) 521 522 (fontified t) 522 523 (fontified t face (rainbow-delimiters-depth-2-face)) 523 528 (fontified t) 528 531 (fontified t face font-lock-keyword-face) 531 532 (fontified t) 532 536 (fontified t face font-lock-function-name-face) 536 537 (fontified t face (rainbow-delimiters-depth-3-face)) 537 539 (fontified t) 539 540 (fontified t face font-lock-keyword-face) 540 541 (fontified t) 541 544 (fontified t face font-lock-type-face) 544 545 (fontified t face (rainbow-delimiters-depth-3-face)) 545 546 (fontified t) 546 547 (fontified t face font-lock-keyword-face) 547 552 (fontified t) 552 553 (fontified t face (rainbow-delimiters-depth-3-face)) 553 556 (fontified t) 556 557 (fontified t face font-lock-keyword-face) 557 560 (fontified t) 560 561 (fontified t face (rainbow-delimiters-depth-3-face)) 561 564 (fontified t) 564 565 (fontified t face (rainbow-delimiters-depth-2-face)) 565 566 (fontified t) 566 567 (fontified t face (rainbow-delimiters-depth-1-face)) 567 568 (fontified t)) . 354) (undo-tree-id165 . -100) (undo-tree-id166 . -100) (undo-tree-id167 . -568) (undo-tree-id168 . -568) (undo-tree-id169 . -566) (undo-tree-id170 . -566) (undo-tree-id171 . -562) (undo-tree-id172 . -562) (undo-tree-id173 . -524) (undo-tree-id174 . -524) (undo-tree-id175 . -502) (undo-tree-id176 . -502) (undo-tree-id177 . -485) (undo-tree-id178 . -485) (undo-tree-id179 . -472) (undo-tree-id180 . -472) (undo-tree-id181 . -434) (undo-tree-id182 . -434) (undo-tree-id183 . -413) (undo-tree-id184 . -413) (undo-tree-id185 . -371) (undo-tree-id186 . -371) (undo-tree-id187 . -349) (undo-tree-id188 . -349) (undo-tree-id189 . -314) (undo-tree-id190 . -314) (undo-tree-id191 . -291) (undo-tree-id192 . -291) (undo-tree-id193 . -278) (undo-tree-id194 . -278) (undo-tree-id195 . -240) (undo-tree-id196 . -240) (undo-tree-id197 . -409) (undo-tree-id198 . -409) (undo-tree-id199 . -218) (undo-tree-id200 . -218) (undo-tree-id201 . -201) (undo-tree-id202 . -201) (undo-tree-id203 . -199) (undo-tree-id204 . -199) (undo-tree-id205 . -168) (undo-tree-id206 . -168) (undo-tree-id207 . -139) (undo-tree-id208 . -139) (undo-tree-id209 . -78) (undo-tree-id210 . -78) (undo-tree-id211 . -64) (undo-tree-id212 . -64) (undo-tree-id213 . -23) (undo-tree-id214 . -23) (undo-tree-id215 . -567) (undo-tree-id216 . -567) (undo-tree-id217 . -21) (undo-tree-id218 . -567) (undo-tree-id219 . -567) (undo-tree-id220 . -21) (undo-tree-id221 . -567) (undo-tree-id222 . -567) 921 (t 25712 58098 619889 369000)) nil (25712 58104 830046 29000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 353) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1)) nil (25712 58104 829931 978000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face font-lock-type-face)) . 342) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (t 25712 58104 833193 709000)) nil (25712 58122 826226 402000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-type-face)) . 342) (undo-tree-id250 . -1) (undo-tree-id251 . -1)) nil (25712 58122 826223 49000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-type-face)) . 342) (undo-tree-id248 . -1) (undo-tree-id249 . -1)) nil (25712 58122 826218 719000) 0 nil])
([nil nil ((343 . 349) (#("L" 0 1 (fontified t face font-lock-type-face)) . -343) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -344) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -345) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -346) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -347) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -348) (undo-tree-id233 . -1) (undo-tree-id234 . -1) 349 (342 . 349) (#("C" 0 1 (fontified t face font-lock-type-face)) . -342) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -343) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) 344 (342 . 344) (#("A" 0 1 (fontified t face font-lock-type-face)) . -342) (undo-tree-id243 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -343) (undo-tree-id244 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -344) (undo-tree-id245 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -345) (undo-tree-id246 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -346) (undo-tree-id247 . -1) 347 (342 . 347)) nil (25712 58122 826207 56000) 0 nil])
([nil nil ((#("case class SpawnActor(actor: String) extends SystemCommand
" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 21 (fontified t face font-lock-type-face) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 27 (fontified t) 27 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 35 (fontified t face font-lock-type-face) 35 36 (fontified t face (rainbow-delimiters-depth-1-face)) 36 37 (fontified t) 37 44 (fontified t face font-lock-keyword-face) 44 45 (fontified t) 45 58 (fontified t face font-lock-type-face) 58 59 (fontified t)) . 546) (undo-tree-id266 . -59) (undo-tree-id267 . -59) (undo-tree-id268 . -58) (undo-tree-id269 . -12) (undo-tree-id270 . -12) 558 (t 25712 58122 829780 280000)) nil (25712 58175 625894 854000) 0 nil])
([nil nil ((582 . 589) (#("c" 0 1 (fontified t face font-lock-type-face)) . -582) (undo-tree-id264 . -1) 583 (569 . 583) (#("d" 0 1 (fontified t)) . -569) (undo-tree-id265 . -1) 570 (566 . 570) (546 . 566) (545 . 546) 485) nil (25712 58175 625887 730000) 0 nil])
([nil nil ((#("private case class SystemDown() extends SystemCommand
" 0 7 (fontified t face scala-font-lock:private-face) 7 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 29 (fontified t face font-lock-type-face) 29 30 (fontified t face (rainbow-delimiters-depth-1-face)) 30 31 (fontified t face (rainbow-delimiters-depth-1-face)) 31 32 (fontified t) 32 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 53 (fontified t face font-lock-type-face) 53 54 (fontified t)) . 669) (undo-tree-id254 . -54) (undo-tree-id255 . -54) (undo-tree-id256 . -53) (undo-tree-id257 . -17) (undo-tree-id258 . -17) (undo-tree-id259 . -17) (undo-tree-id260 . -17) (undo-tree-id261 . -17) (undo-tree-id262 . -17) (undo-tree-id263 . -54) 686) nil (25712 58175 625878 721000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 669) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . 1) (undo-tree-id275 . 1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (473 . 669) (#("case class JoinCluster(host: String, port: String) extends SystemCommand
case class Shutdown() extends SystemCommand
case class AddDependency(name: String, jar: Array[Byte]) extends SystemCommand" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 22 (fontified t face font-lock-type-face) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 27 (fontified t) 27 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 35 (fontified t face font-lock-type-face) 35 41 (fontified t) 41 42 (fontified t face font-lock-keyword-face) 42 43 (fontified t) 43 49 (fontified t face font-lock-type-face) 49 50 (fontified t face (rainbow-delimiters-depth-1-face)) 50 51 (fontified t) 51 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 72 (fontified t face font-lock-type-face) 72 73 (fontified t) 73 77 (fontified t face font-lock-keyword-face) 77 78 (fontified t) 78 83 (fontified t face font-lock-keyword-face) 83 84 (fontified t) 84 92 (fontified t face font-lock-type-face) 92 93 (fontified t face (rainbow-delimiters-depth-1-face)) 93 94 (fontified t face (rainbow-delimiters-depth-1-face)) 94 95 (fontified t) 95 102 (fontified t face font-lock-keyword-face) 102 103 (fontified t) 103 116 (fontified t face font-lock-type-face) 116 117 (fontified t) 117 121 (fontified t face font-lock-keyword-face) 121 122 (fontified t) 122 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 141 (fontified t face font-lock-type-face) 141 142 (fontified t face (rainbow-delimiters-depth-1-face)) 142 146 (fontified t) 146 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 154 (fontified t face font-lock-type-face) 154 159 (fontified t) 159 160 (fontified t face font-lock-keyword-face) 160 161 (fontified t) 161 166 (fontified t face font-lock-type-face) 166 167 (fontified t face (rainbow-delimiters-depth-2-face)) 167 171 (fontified t face font-lock-constant-face) 171 172 (fontified t face (rainbow-delimiters-depth-2-face)) 172 173 (fontified t face (rainbow-delimiters-depth-1-face)) 173 174 (fontified t) 174 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 195 (fontified t face font-lock-type-face)) . 473) (undo-tree-id282 . -117) (undo-tree-id283 . -117) (undo-tree-id284 . -73) (undo-tree-id285 . -73) (undo-tree-id286 . -117) (undo-tree-id287 . 79) (undo-tree-id288 . 79) (undo-tree-id289 . -73) (undo-tree-id290 . -73) (undo-tree-id291 . -73) (undo-tree-id292 . -117) (undo-tree-id293 . -117) (undo-tree-id294 . -117) (undo-tree-id295 . -117) (undo-tree-id296 . -117) (undo-tree-id297 . -117) (undo-tree-id298 . -117) (undo-tree-id299 . -195) (undo-tree-id300 . -117) (undo-tree-id301 . -117) (undo-tree-id302 . -195) (undo-tree-id303 . -117) (undo-tree-id304 . -117) (undo-tree-id305 . -195) (undo-tree-id306 . -117) (undo-tree-id307 . -117) (undo-tree-id308 . -195) (undo-tree-id309 . -117) (undo-tree-id310 . -117) (undo-tree-id311 . -195) (undo-tree-id312 . -117) (undo-tree-id313 . -117) (undo-tree-id314 . -195) (undo-tree-id315 . -195) (undo-tree-id316 . -117) (undo-tree-id317 . -117) (t 25712 58175 629576 964000)) nil (25712 58179 94979 249000) 0 nil])
([nil nil ((#("class DependencyClassLoader(cl: ClassLoader) extends URLClassLoader(Array(), cl) {
  Main.jars.toFile().listFiles().map(_.toURI.toURL).foreach(addURL)
  def add(url: java.net.URL) = addURL(url)
  def addLibrary(name: String, data: Array[Byte]) = {
    Using.Manager { use =>
      val url = Main.jars.resolve(name).toFile()
      val out = use(new java.io.FileOutputStream(url))
      out.write(data)
      url.toURI().toURL()
    }.map(addURL)
  }
}

class DynamicClassLoader(file: String, parent: ClassLoader) extends ClassLoader {
  import java.util.jar.JarFile
  private val jar = new JarFile(Main.bin.resolve(s\"$file.jar\").toFile)

  override def loadClass(name: String) = {
    if (name.startsWith(s\"artes.actors.$file\")) {
      val file = name.replace(\".\", \"/\") + \".class\"
      val data = scala.util.Using(jar.getInputStream(jar.getEntry(file)))(_.readAllBytes()).get
      defineClass(name, data, 0, data.length)
    } else parent.loadClass(name)
  }
}

" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 27 (fontified t face font-lock-type-face) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 30 (fontified t) 30 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t) 32 43 (fontified t face font-lock-type-face) 43 44 (fontified t face (rainbow-delimiters-depth-1-face)) 44 45 (fontified t) 45 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 67 (fontified t face font-lock-type-face) 67 68 (fontified t face (rainbow-delimiters-depth-1-face)) 68 73 (fontified t face font-lock-constant-face) 73 74 (fontified t face (rainbow-delimiters-depth-2-face)) 74 75 (fontified t face (rainbow-delimiters-depth-2-face)) 75 79 (fontified t) 79 80 (fontified t face (rainbow-delimiters-depth-1-face)) 80 81 (fontified t) 81 82 (fontified t face (rainbow-delimiters-depth-1-face)) 82 85 (fontified t) 85 89 (fontified t face font-lock-constant-face) 89 101 (fontified t) 101 102 (fontified t face (rainbow-delimiters-depth-2-face)) 102 103 (fontified t face (rainbow-delimiters-depth-2-face)) 103 113 (fontified t) 113 114 (fontified t face (rainbow-delimiters-depth-2-face)) 114 115 (fontified t face (rainbow-delimiters-depth-2-face)) 115 119 (fontified t) 119 120 (fontified t face (rainbow-delimiters-depth-2-face)) 120 121 (syntax-table (3) fontified t face font-lock-keyword-face) 121 133 (fontified t) 133 134 (fontified t face (rainbow-delimiters-depth-2-face)) 134 142 (fontified t) 142 143 (fontified t face (rainbow-delimiters-depth-2-face)) 143 149 (fontified t) 149 150 (fontified t face (rainbow-delimiters-depth-2-face)) 150 153 (fontified t) 153 156 (fontified t face font-lock-keyword-face) 156 157 (fontified t) 157 160 (fontified t face font-lock-function-name-face) 160 161 (fontified t face (rainbow-delimiters-depth-2-face)) 161 164 (fontified t) 164 165 (fontified t face font-lock-keyword-face) 165 166 (fontified t) 166 170 (fontified t face font-lock-type-face) 170 175 (fontified t) 175 178 (fontified t face font-lock-constant-face) 178 179 (fontified t face (rainbow-delimiters-depth-2-face)) 179 180 (fontified t) 180 181 (fontified t face font-lock-keyword-face) 181 188 (fontified t) 188 189 (fontified t face (rainbow-delimiters-depth-2-face)) 189 192 (fontified t) 192 193 (fontified t face (rainbow-delimiters-depth-2-face)) 193 196 (fontified t) 196 199 (fontified t face font-lock-keyword-face) 199 200 (fontified t) 200 210 (fontified t face font-lock-function-name-face) 210 211 (fontified t face (rainbow-delimiters-depth-2-face)) 211 215 (fontified t) 215 216 (fontified t face font-lock-keyword-face) 216 217 (fontified t) 217 223 (fontified t face font-lock-type-face) 223 229 (fontified t) 229 230 (fontified t face font-lock-keyword-face) 230 231 (fontified t) 231 236 (fontified t face font-lock-type-face) 236 237 (fontified t face (rainbow-delimiters-depth-3-face)) 237 241 (fontified t face font-lock-constant-face) 241 242 (fontified t face (rainbow-delimiters-depth-3-face)) 242 243 (fontified t face (rainbow-delimiters-depth-2-face)) 243 244 (fontified t) 244 245 (fontified t face font-lock-keyword-face) 245 246 (fontified t) 246 247 (fontified t face (rainbow-delimiters-depth-2-face)) 247 252 (fontified t) 252 257 (fontified t face font-lock-constant-face) 257 258 (fontified t) 258 265 (fontified t face font-lock-constant-face) 265 266 (fontified t) 266 267 (fontified t face (rainbow-delimiters-depth-3-face)) 267 272 (fontified t) 272 274 (syntax-table (3) fontified t face font-lock-keyword-face) 274 281 (fontified t) 281 284 (fontified t face font-lock-keyword-face) 284 285 (fontified t) 285 288 (fontified t face font-lock-variable-name-face) 288 289 (fontified t) 289 290 (fontified t face font-lock-keyword-face) 290 291 (fontified t) 291 295 (fontified t face font-lock-constant-face) 295 308 (fontified t) 308 309 (fontified t face (rainbow-delimiters-depth-4-face)) 309 313 (fontified t) 313 314 (fontified t face (rainbow-delimiters-depth-4-face)) 314 321 (fontified t) 321 322 (fontified t face (rainbow-delimiters-depth-4-face)) 322 323 (fontified t face (rainbow-delimiters-depth-4-face)) 323 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 337 (fontified t face font-lock-variable-name-face) 337 338 (fontified t) 338 339 (fontified t face font-lock-keyword-face) 339 343 (fontified t) 343 344 (fontified t face (rainbow-delimiters-depth-4-face)) 344 347 (fontified t face font-lock-keyword-face) 347 348 (fontified t) 348 352 (fontified t face font-lock-type-face) 352 356 (fontified t) 356 372 (fontified t face font-lock-constant-face) 372 373 (fontified t face (rainbow-delimiters-depth-5-face)) 373 376 (fontified t) 376 377 (fontified t face (rainbow-delimiters-depth-5-face)) 377 378 (fontified t face (rainbow-delimiters-depth-4-face)) 378 394 (fontified t) 394 395 (fontified t face (rainbow-delimiters-depth-4-face)) 395 399 (fontified t) 399 400 (fontified t face (rainbow-delimiters-depth-4-face)) 400 416 (fontified t) 416 417 (fontified t face (rainbow-delimiters-depth-4-face)) 417 418 (fontified t face (rainbow-delimiters-depth-4-face)) 418 424 (fontified t) 424 425 (fontified t face (rainbow-delimiters-depth-4-face)) 425 426 (fontified t face (rainbow-delimiters-depth-4-face)) 426 431 (fontified t) 431 432 (fontified t face (rainbow-delimiters-depth-3-face)) 432 436 (fontified t) 436 437 (fontified t face (rainbow-delimiters-depth-3-face)) 437 443 (fontified t) 443 444 (fontified t face (rainbow-delimiters-depth-3-face)) 444 447 (fontified t) 447 448 (fontified t face (rainbow-delimiters-depth-2-face)) 448 449 (fontified t) 449 450 (fontified t face (rainbow-delimiters-depth-1-face)) 450 452 (fontified t) 452 457 (fontified t face font-lock-keyword-face) 457 458 (fontified t) 458 476 (fontified t face font-lock-type-face) 476 477 (fontified t face (rainbow-delimiters-depth-1-face)) 477 481 (fontified t) 481 482 (fontified t face font-lock-keyword-face) 482 483 (fontified t) 483 489 (fontified t face font-lock-type-face) 489 497 (fontified t) 497 498 (fontified t face font-lock-keyword-face) 498 499 (fontified t) 499 510 (fontified t face font-lock-type-face) 510 511 (fontified t face (rainbow-delimiters-depth-1-face)) 511 512 (fontified t) 512 519 (fontified t face font-lock-keyword-face) 519 520 (fontified t) 520 531 (fontified t face font-lock-type-face) 531 532 (fontified t) 532 533 (fontified t face (rainbow-delimiters-depth-1-face)) 533 536 (fontified t) 536 542 (fontified t face font-lock-keyword-face) 542 557 (fontified t) 557 562 (fontified t face font-lock-constant-face) 562 564 (face font-lock-constant-face fontified t) 564 565 (fontified t) 565 567 (fontified t) 567 574 (fontified t face scala-font-lock:private-face) 574 575 (fontified t) 575 578 (fontified t face font-lock-keyword-face) 578 579 (fontified t) 579 582 (fontified t face font-lock-variable-name-face) 582 583 (fontified t) 583 584 (fontified t face font-lock-keyword-face) 584 585 (fontified t) 585 588 (fontified t face font-lock-keyword-face) 588 589 (fontified t) 589 596 (fontified t face font-lock-type-face) 596 597 (fontified t face (rainbow-delimiters-depth-2-face)) 597 601 (fontified t face font-lock-constant-face) 601 613 (fontified t) 613 614 (fontified t face (rainbow-delimiters-depth-3-face)) 614 615 (fontified t) 615 616 (syntax-table (7) fontified t face font-lock-string-face) 616 617 (syntax-table (1) fontified t face font-lock-variable-name-face) 617 621 (fontified t face font-lock-variable-name-face) 621 625 (fontified t face font-lock-string-face) 625 626 (syntax-table (7) fontified t face font-lock-string-face) 626 627 (fontified t face (rainbow-delimiters-depth-3-face)) 627 634 (fontified t) 634 635 (fontified t face (rainbow-delimiters-depth-2-face)) 635 639 (fontified t) 639 647 (fontified t face scala-font-lock:override-face) 647 648 (fontified t) 648 651 (fontified t face font-lock-keyword-face) 651 652 (fontified t) 652 661 (fontified t face font-lock-function-name-face) 661 662 (fontified t face (rainbow-delimiters-depth-2-face)) 662 666 (fontified t) 666 667 (fontified t face font-lock-keyword-face) 667 668 (fontified t) 668 674 (fontified t face font-lock-type-face) 674 675 (fontified t face (rainbow-delimiters-depth-2-face)) 675 676 (fontified t) 676 677 (fontified t face font-lock-keyword-face) 677 678 (fontified t) 678 679 (fontified t face (rainbow-delimiters-depth-2-face)) 679 684 (fontified t) 684 686 (fontified t face font-lock-keyword-face) 686 687 (fontified t) 687 688 (fontified t face (rainbow-delimiters-depth-3-face)) 688 703 (fontified t) 703 704 (fontified t face (rainbow-delimiters-depth-4-face)) 704 705 (fontified t) 705 706 (syntax-table (7) fontified t face font-lock-string-face) 706 719 (fontified t face font-lock-string-face) 719 720 (syntax-table (1) fontified t face font-lock-variable-name-face) 720 724 (fontified t face font-lock-variable-name-face) 724 725 (syntax-table (7) fontified t face font-lock-string-face) 725 726 (fontified t face (rainbow-delimiters-depth-4-face)) 726 727 (fontified t face (rainbow-delimiters-depth-3-face)) 727 728 (fontified t) 728 729 (fontified t face (rainbow-delimiters-depth-3-face)) 729 736 (fontified t) 736 739 (fontified t face font-lock-keyword-face) 739 740 (fontified t) 740 744 (fontified t face font-lock-variable-name-face) 744 745 (fontified t) 745 746 (fontified t face font-lock-keyword-face) 746 759 (fontified t) 759 760 (fontified t face (rainbow-delimiters-depth-4-face)) 760 761 (syntax-table (7) fontified t face font-lock-string-face) 761 762 (fontified t face font-lock-string-face) 762 763 (syntax-table (7) fontified t face font-lock-string-face) 763 765 (fontified t) 765 766 (syntax-table (7) fontified t face font-lock-string-face) 766 767 (fontified t face font-lock-string-face) 767 768 (syntax-table (7) fontified t face font-lock-string-face) 768 769 (fontified t face (rainbow-delimiters-depth-4-face)) 769 772 (fontified t) 772 773 (syntax-table (7) fontified t face font-lock-string-face) 773 779 (fontified t face font-lock-string-face) 779 780 (syntax-table (7) fontified t face font-lock-string-face) 780 787 (fontified t) 787 790 (fontified t face font-lock-keyword-face) 790 791 (fontified t) 791 795 (fontified t face font-lock-variable-name-face) 795 796 (fontified t) 796 797 (fontified t face font-lock-keyword-face) 797 809 (fontified t) 809 814 (fontified t face font-lock-constant-face) 814 815 (fontified t face (rainbow-delimiters-depth-4-face)) 815 833 (fontified t) 833 834 (fontified t face (rainbow-delimiters-depth-5-face)) 834 846 (fontified t) 846 847 (fontified t face (rainbow-delimiters-depth-6-face)) 847 851 (fontified t) 851 852 (fontified t face (rainbow-delimiters-depth-6-face)) 852 853 (fontified t face (rainbow-delimiters-depth-5-face)) 853 854 (fontified t face (rainbow-delimiters-depth-4-face)) 854 855 (fontified t face (rainbow-delimiters-depth-4-face)) 855 856 (syntax-table (3) fontified t face font-lock-keyword-face) 856 869 (fontified t) 869 870 (fontified t face (rainbow-delimiters-depth-5-face)) 870 871 (fontified t face (rainbow-delimiters-depth-5-face)) 871 872 (fontified t face (rainbow-delimiters-depth-4-face)) 872 894 (fontified t) 894 895 (fontified t face (rainbow-delimiters-depth-4-face)) 895 907 (fontified t) 907 908 (fontified t face font-lock-constant-face) 908 921 (fontified t) 921 922 (fontified t face (rainbow-delimiters-depth-4-face)) 922 927 (fontified t) 927 928 (fontified t face (rainbow-delimiters-depth-3-face)) 928 929 (fontified t) 929 933 (fontified t face font-lock-keyword-face) 933 950 (fontified t) 950 951 (fontified t face (rainbow-delimiters-depth-3-face)) 951 955 (fontified t) 955 956 (fontified t face (rainbow-delimiters-depth-3-face)) 956 959 (fontified t) 959 960 (fontified t face (rainbow-delimiters-depth-2-face)) 960 961 (fontified t) 961 962 (fontified t face (rainbow-delimiters-depth-1-face)) 962 964 (fontified t)) . 3201) (undo-tree-id318 . -637) (undo-tree-id319 . -637) (undo-tree-id320 . -449) (undo-tree-id321 . -449) (undo-tree-id322 . -451) (undo-tree-id323 . -451) (undo-tree-id324 . -275) (undo-tree-id325 . -275) (undo-tree-id326 . -452) (undo-tree-id327 . -452) (undo-tree-id328 . -534) (undo-tree-id329 . -534) (undo-tree-id330 . -565) (undo-tree-id331 . -565) (undo-tree-id332 . -877) (undo-tree-id333 . -877) (undo-tree-id334 . -781) (undo-tree-id335 . -781) (undo-tree-id336 . -730) (undo-tree-id337 . -730) (undo-tree-id338 . -680) (undo-tree-id339 . -680) (undo-tree-id340 . -83) (undo-tree-id341 . -83) (undo-tree-id342 . -427) (undo-tree-id343 . -427) (undo-tree-id344 . -401) (undo-tree-id345 . -401) (undo-tree-id346 . -379) (undo-tree-id347 . -379) (undo-tree-id348 . -324) (undo-tree-id349 . -324) (undo-tree-id350 . -248) (undo-tree-id351 . -248) (undo-tree-id352 . -194) (undo-tree-id353 . -194) (undo-tree-id354 . -151) (undo-tree-id355 . -151) (undo-tree-id356 . -445) (undo-tree-id357 . -445) (undo-tree-id358 . -923) (undo-tree-id359 . -923) (undo-tree-id360 . -957) (undo-tree-id361 . -957) (undo-tree-id362 . -961) (undo-tree-id363 . -961) (undo-tree-id364 . -963) (undo-tree-id365 . -963) (undo-tree-id366 . -964) (undo-tree-id367 . -964) (undo-tree-id368 . -963) (undo-tree-id369 . -636) (undo-tree-id370 . -636) (undo-tree-id371 . -963) (undo-tree-id372 . -963) (undo-tree-id373 . -963) (undo-tree-id374 . -963) 4164 (t 25712 58179 99565 178000)) nil (25712 58279 674234 849000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -688) (undo-tree-id417 . -2) (690 . 691) (687 . 690) (677 . 687) (#("s" 0 1 (fontified t face font-lock-constant-face)) . -677) (undo-tree-id418 . -1) 678 (670 . 678) (669 . 670) (668 . 669) (t 25712 58279 675966 570000) 625) nil (25712 58356 681879 848000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -688) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) 690 (687 . 690) 670) nil (25712 58356 681874 121000) 0 nil])
([nil nil (670) nil (25712 58356 681860 292000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -670) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("r" 0 1 (fontified t)) . -671) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("i" 0 1 (fontified t)) . -672) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("v" 0 1 (fontified t)) . -673) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) 674 (670 . 674)) nil (25712 58356 681851 841000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 688) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (t 25712 58356 685852 228000)) nil (25712 58381 759798 917000) 0 nil])
([nil nil ((695 . 697) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -695) (undo-tree-id493 . -1) 696 (690 . 696) (687 . 690) 670) nil (25712 58381 759794 656000) 0 nil])
([nil nil ((#("  System.
" 0 2 (fontified t) 2 8 (fontified t face font-lock-constant-face) 8 9 (fontified t) 9 10 (fontified t)) . 688) (undo-tree-id487 . -10) (undo-tree-id488 . -10) (undo-tree-id489 . -9) (undo-tree-id490 . 1) (undo-tree-id491 . -8) (undo-tree-id492 . 1) 696) nil (25712 58384 27244 410000) 0 nil])
([nil nil ((690 . 693) (#("d" 0 1 (fontified t)) . -690) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("e" 0 1 (fontified t)) . -691) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) 692 (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -692) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#(" " 0 1 (fontified t)) . -693) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -694) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -695) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -696) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -697) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) 698 (690 . 698) (687 . 690) 671) nil (25712 58437 948463 590000) 0 nil] [nil nil ((#("object Settings {
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-constant-face) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 18 (fontified t)) . 670) (undo-tree-id484 . -18) (undo-tree-id485 . -18) (undo-tree-id486 . -17)) ((670 . 688)) (25712 58383 601187 153000) 0 nil])
([nil nil ((#("object Settings {
  arg
}
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-constant-face) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 18 (fontified t) 18 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 26 (fontified t)) . 670) (undo-tree-id699 . -24) (undo-tree-id700 . -24) (undo-tree-id701 . -18) (undo-tree-id702 . -18) (undo-tree-id703 . -26) (undo-tree-id704 . -26) (undo-tree-id705 . -25) (undo-tree-id706 . -25) (undo-tree-id707 . -4) (undo-tree-id708 . -25) (undo-tree-id709 . 3) (undo-tree-id710 . -25) (undo-tree-id711 . -20) (undo-tree-id712 . -20) (undo-tree-id713 . 3) (undo-tree-id714 . -23) (undo-tree-id715 . -23) (undo-tree-id716 . -23) (undo-tree-id717 . -23) (undo-tree-id718 . -23) (undo-tree-id719 . -23) (undo-tree-id720 . -22) (undo-tree-id721 . -22) (undo-tree-id722 . -22) (undo-tree-id723 . -22) (undo-tree-id724 . -22) (undo-tree-id725 . -22) (undo-tree-id726 . -22) (undo-tree-id727 . -22) (undo-tree-id728 . -26) (undo-tree-id729 . -4) (undo-tree-id730 . -25) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -24) (undo-tree-id734 . -25) (undo-tree-id735 . -26) 695) nil (25712 58437 948438 796000) 0 nil])
([nil nil ((#("}
" 0 1 (fontified t face (rainbow-delimiters-unmatched-face)) 1 2 (fontified t)) . 670) (undo-tree-id475 . -1) (undo-tree-id476 . 2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . 2) (undo-tree-id480 . 2) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -2)) ((670 . 672)) (25712 58383 115082 30000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 670) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . 1) (undo-tree-id696 . 1) (undo-tree-id697 . 1) (undo-tree-id698 . -1)) nil (25712 58437 948411 628000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 670) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . 1) (undo-tree-id473 . 1) (undo-tree-id474 . -1)) ((670 . 671)) (25712 58382 703882 324000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -743) (undo-tree-id633 . -2) (undo-tree-id634 . -2) (undo-tree-id635 . -2) (undo-tree-id636 . -2) (745 . 746) (740 . 745) (738 . 740) (apply yas--snippet-revive 731 738 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (335 . 367) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (699 . 706) (#("tailrec" 0 7 (fontified nil)) . 699) (699 . 706) (#("tail" 0 4 (fontified nil)) . 699) (699 . 703) (#("tailrec - scala.annotation" 0 26 (fontified nil)) . -699) (699 . 725) (#("tailre" 0 6 (fontified t face font-lock-preprocessor-face)) . -699) (undo-tree-id637 . -6) (undo-tree-id638 . -1) (undo-tree-id639 . -2) (undo-tree-id640 . -3) (undo-tree-id641 . -4) (undo-tree-id642 . -5) (undo-tree-id643 . -6) (undo-tree-id644 . -6) (undo-tree-id645 . -6) (undo-tree-id646 . -6) 705 (698 . 705) (#("d" 0 1 (fontified t)) . -698) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("e" 0 1 (fontified t)) . -699) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -700) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#(" " 0 1 (fontified t)) . -701) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) 702 (698 . 702) (695 . 698) 670) nil (25712 58437 948401 570000) 0 nil])
([nil nil ((702 . 703) (apply yas--snippet-revive 698 702 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (698 . 702) (#("args" 0 4 (fontified nil)) . 698) (698 . 702) (#("arg" 0 3 (fontified nil)) . 698) (698 . 701) (#("args: Array[String]" 0 19 (fontified nil)) . -698) (698 . 717) (#("arg" 0 3 (fontified t)) . -698) (undo-tree-id469 . -3) 701 (698 . 701) (695 . 698) 670) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 695) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . 3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -1) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (undo-tree-id563 . -3) (#("arg" 0 3 (fontified nil)) . 698) (undo-tree-id564 . -3) (698 . 701) (#("args: Array[String]" 0 19 (fontified nil)) . 698) (698 . 717) (#("arg" 0 3 (fontified nil)) . 698) (698 . 701) (#("args" 0 4 (fontified nil)) . 698) (698 . 702) (#("args" 0 4 (fontified nil)) . 698) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (#("." 0 1 (fontified t)) . 702) (undo-tree-id577 . -1) (undo-tree-id578 . -1)) (25712 58382 288701 577000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 367) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (209 . 367) (#("import java.util.ServiceLoader
import scala.concurrent.duration._
import scala.jdk.CollectionConverters._
import scala.util._
import scala.annotation.tailrec" 0 6 (fontified t face font-lock-keyword-face) 6 17 (fontified t) 17 30 (fontified t face font-lock-constant-face) 30 31 (fontified t) 31 37 (fontified t face font-lock-keyword-face) 37 64 (fontified t) 64 65 (syntax-table (3) fontified t face font-lock-keyword-face) 65 66 (fontified t) 66 72 (fontified t face font-lock-keyword-face) 72 83 (fontified t) 83 103 (fontified t face font-lock-constant-face) 103 104 (fontified t) 104 105 (syntax-table (3) fontified t face font-lock-keyword-face) 105 106 (fontified t) 106 112 (fontified t face font-lock-keyword-face) 112 124 (fontified t) 124 125 (syntax-table (3) fontified t face font-lock-keyword-face) 125 126 (fontified t) 126 132 (fontified t face font-lock-keyword-face) 132 157 (fontified t)) . 209) (undo-tree-id591 . -66) (undo-tree-id592 . -66) (undo-tree-id593 . -31) (undo-tree-id594 . -31) (undo-tree-id595 . -126) (undo-tree-id596 . -126) (undo-tree-id597 . -106) (undo-tree-id598 . -106) (undo-tree-id599 . -128) (undo-tree-id600 . -2) (undo-tree-id601 . -128) (undo-tree-id602 . -128) (undo-tree-id603 . -128) (undo-tree-id604 . -128) (undo-tree-id605 . -2) (undo-tree-id606 . -128) (undo-tree-id607 . -128) (undo-tree-id608 . -128) (undo-tree-id609 . -2) (undo-tree-id610 . -2) (undo-tree-id611 . -2) (undo-tree-id612 . -2) (undo-tree-id613 . -2) (undo-tree-id614 . -157) (undo-tree-id615 . -2) (undo-tree-id616 . -2) (undo-tree-id617 . -157) (undo-tree-id618 . -2) (undo-tree-id619 . -2) (undo-tree-id620 . -157) (undo-tree-id621 . -2) (undo-tree-id622 . -2) (undo-tree-id623 . -157) (undo-tree-id624 . -2) (undo-tree-id625 . -2) (undo-tree-id626 . -157) (undo-tree-id627 . -2) (undo-tree-id628 . -2) (undo-tree-id629 . -157) (undo-tree-id630 . -157) (undo-tree-id631 . -2) (undo-tree-id632 . -2)) nil (25712 58437 948353 380000) 0 nil])
([nil nil ((#("  args.
" 0 2 (fontified t) 2 7 (fontified t) 7 8 (fontified t)) . 696) (undo-tree-id453 . -7) (undo-tree-id454 . 1) (undo-tree-id455 . -8) (undo-tree-id456 . -8) (undo-tree-id457 . -6) (undo-tree-id458 . 1) (undo-tree-id459 . -7) (undo-tree-id460 . -7) (undo-tree-id461 . -6) (undo-tree-id462 . -6) (undo-tree-id463 . -6) (undo-tree-id464 . -6) (undo-tree-id465 . -6) (undo-tree-id466 . -6) (undo-tree-id467 . -6) (undo-tree-id468 . -8) 702) ((696 . 704)) (25712 58382 28924 291000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-function-name-face)) . -758) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) 759 (738 . 759)) nil (25712 58437 948215 233000) 0 nil])
([nil nil ((698 . 702) (695 . 698) 676) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 695) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -1) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (#("def " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 698) (undo-tree-id524 . -4) (undo-tree-id525 . -3) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3)) (25712 58381 760200 157000) 0 nil])
([nil nil ((758 . 760)) nil (25712 58437 948197 982000) 0 nil])
([nil nil ((#("  def 
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 7 (fontified t)) . 696) (undo-tree-id419 . -6) (undo-tree-id420 . 1) (undo-tree-id421 . -7) (undo-tree-id422 . -7) (undo-tree-id423 . -5) (undo-tree-id424 . -7) (undo-tree-id425 . -7) (undo-tree-id426 . -7) (undo-tree-id427 . -7) (undo-tree-id428 . -7) (undo-tree-id429 . -7) (undo-tree-id430 . -7) (undo-tree-id431 . -7) (undo-tree-id432 . -6) (undo-tree-id433 . -6) (undo-tree-id434 . -6) (undo-tree-id435 . -6) (undo-tree-id436 . -6) (undo-tree-id437 . -6) (undo-tree-id438 . -6) (undo-tree-id439 . -6) (undo-tree-id440 . -6) (undo-tree-id441 . -6) (undo-tree-id442 . -6) (undo-tree-id443 . -6) (undo-tree-id444 . -6) (undo-tree-id445 . -5) (undo-tree-id446 . -5) (undo-tree-id447 . -5) (undo-tree-id448 . -5) (undo-tree-id449 . -5) (undo-tree-id450 . -5) (undo-tree-id451 . -5) (undo-tree-id452 . -7) 701) ((696 . 703)) (25712 58381 759731 729000) 0 nil])
([nil nil ((759 . 778)) nil (25712 58437 948190 439000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -782) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) 786 (781 . 786) (t 25712 58437 952468 729000) 779) nil (25712 58442 975212 400000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 782) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . 1) (undo-tree-id771 . -1)) nil (25712 58442 975199 479000) 0 nil])
([nil nil ((780 . 782)) nil (25712 58442 975176 291000) 0 nil])
([nil nil ((788 . 792) (783 . 788) (t 25712 58442 979134 428000) 730) nil (25712 58482 649021 538000) 0 nil])
([nil nil ((#("    case
" 0 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t)) . 784) (undo-tree-id783 . -9) (undo-tree-id784 . -9) (undo-tree-id785 . -8) (undo-tree-id786 . 1) (undo-tree-id787 . -7) 791) nil (25712 58482 649018 675000) 0 nil])
([nil nil ((765 . 769) (#("Array" 0 5 (fontified t face font-lock-type-face)) . 765) (undo-tree-id782 . -4)) nil (25712 58482 649011 202000) 0 nil])
([nil nil ((781 . 792)) nil (25712 58482 648992 65000) 0 nil])
([nil nil ((809 . 818) (#(":" 0 1 (fontified t syntax-table (3) face font-lock-type-face)) . -809) (undo-tree-id788 . -1) (#(" " 0 1 (fontified t)) . -810) (undo-tree-id789 . -1) 811 (798 . 811) (793 . 798) (t 25712 58482 652468 156000) 791) nil (25712 58495 180503 206000) 0 nil])
([nil nil ((#("    case head :+ tail =>
" 0 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t) 14 15 (fontified t syntax-table (3) face font-lock-type-face) 15 16 (fontified t syntax-table (3) face font-lock-type-face) 16 17 (fontified t) 17 21 (fontified t face font-lock-variable-name-face) 21 22 (fontified t) 22 24 (fontified t syntax-table (3) face font-lock-keyword-face) 24 25 (fontified t)) . 794) (undo-tree-id809 . -24) (undo-tree-id810 . 1) (undo-tree-id811 . -25) (undo-tree-id812 . -25) (undo-tree-id813 . -15) (undo-tree-id814 . -15) 809 (t 25712 58496 59138 59000)) nil (25712 58695 584629 399000) 0 nil] [nil nil ((nil face font-lock-type-face 809 . 810) (nil fontified nil 809 . 810) (809 . 810) (#("+" 0 1 (fontified t syntax-table (3) face font-lock-type-face)) . 809)) ((809 . 810) (#(":" 0 1 (fontified nil syntax-table (3) face font-lock-type-face)) . 809) (nil fontified t 809 . 810)) (25712 58495 179816 173000) 0 nil])
([nil nil ((813 . 816) (804 . 813) (798 . 804) (793 . 798) 730) nil (25712 58695 584622 694000) 0 nil])
nil
([nil nil ((816 . 828)) nil (25712 58695 584620 319000) 0 nil])
([nil nil ((828 . 831)) nil (25712 58695 584618 504000) 0 nil])
([nil nil ((804 . 806)) nil (25712 58695 584616 129000) 0 nil])
([nil nil ((806 . 810) (#("plugins" 0 7 (fontified t face font-lock-string-face)) . 806) (undo-tree-id805 . -6) (undo-tree-id806 . 7) (undo-tree-id807 . -7) (undo-tree-id808 . -7)) nil (25712 58695 584613 265000) 0 nil])
([nil nil ((806 . 813) (#("root" 0 4 (fontified t face font-lock-string-face)) . 806) (undo-tree-id790 . -3) (undo-tree-id791 . -3) (undo-tree-id792 . -3) (undo-tree-id793 . -3) (undo-tree-id794 . -3) (undo-tree-id795 . -3) (undo-tree-id796 . -3) (undo-tree-id797 . -3) (undo-tree-id798 . -3) (undo-tree-id799 . -3) (undo-tree-id800 . -3) (undo-tree-id801 . -3) (undo-tree-id802 . -3) (undo-tree-id803 . -4) (undo-tree-id804 . -4)) nil (25712 58695 584601 741000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -834) (undo-tree-id877 . -6) 840 (834 . 840) (nil face font-lock-keyword-face 833 . 834) (nil fontified t 833 . 834) (833 . 834) (t 25712 58695 589344 138000) 832) nil (25712 58937 228244 824000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 834) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . 1)) nil (25712 58937 228241 52000) 0 nil])
([nil nil ((738 . 741) (730 . 738) (727 . 730) 702) nil (25712 58937 228236 862000) 0 nil])
([nil nil ((#("  val path = 
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t) 11 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 14 (fontified t)) . 728) (undo-tree-id869 . -13) (undo-tree-id870 . 1) (undo-tree-id871 . -14) (undo-tree-id872 . -14) (undo-tree-id873 . -12) 740) nil (25712 58937 228233 509000) 0 nil])
([nil nil ((714 . 719) (702 . 714) (701 . 702) (700 . 701) 669) nil (25712 58937 228227 224000) 0 nil])
([nil nil ((#("object Properties
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 17 (fontified t face font-lock-constant-face) 17 18 (fontified t)) . 702) (undo-tree-id864 . -17) (undo-tree-id865 . 1) (undo-tree-id866 . -18) (undo-tree-id867 . -18) (undo-tree-id868 . -16) 718) nil (25712 58937 228223 941000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 702) (undo-tree-id863 . 1)) nil (25712 58937 228217 795000) 0 nil])
([nil nil ((apply yas--snippet-revive 772 776 #s(yas--snippet nil nil #s(yas--exit 775 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 775 nil) 3 nil nil nil nil)) (772 . 776) (#("of($0)" 0 6 (fontified nil)) . 772) (772 . 778) (#("of(x$1: URI): Path" 0 18 (fontified nil)) . -772) (772 . 790) (771 . 772) (apply yas--snippet-revive 767 771 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (367 . 393) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (741 . 745) (#("Path" 0 4 (fontified nil)) . 741) (741 . 745) (#("Path" 0 4 (fontified nil)) . 741) (741 . 745) (#("Path - java.nio.file" 0 20 (fontified nil)) . -741) (741 . 761) (#("Path" 0 4 (fontified t face font-lock-constant-face)) . -741) (undo-tree-id862 . -4) 745 (741 . 745) (730 . 741) (727 . 730) 703) nil (25712 58937 228213 535000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 393) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (144 . 393) (#("import cats.implicits._
import com.typesafe.config.ConfigFactory
import java.util.ServiceLoader
import scala.annotation.tailrec
import scala.concurrent.duration._
import scala.jdk.CollectionConverters._
import scala.util._
import java.nio.file.Path" 0 6 (fontified t face font-lock-keyword-face) 6 22 (fontified t) 22 23 (syntax-table (3) fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 30 (fontified t face font-lock-keyword-face) 30 51 (fontified t) 51 64 (fontified t face font-lock-constant-face) 64 65 (fontified t) 65 71 (fontified t face font-lock-keyword-face) 71 82 (fontified t) 82 95 (fontified t face font-lock-constant-face) 95 96 (fontified t) 96 102 (fontified t face font-lock-keyword-face) 102 127 (fontified t) 127 128 (fontified t) 128 134 (fontified t face font-lock-keyword-face) 134 161 (fontified t) 161 162 (fontified t syntax-table (3) face font-lock-keyword-face) 162 163 (fontified t) 163 169 (fontified t face font-lock-keyword-face) 169 180 (fontified t) 180 200 (fontified t face font-lock-constant-face) 200 201 (fontified t) 201 202 (fontified t syntax-table (3) face font-lock-keyword-face) 202 203 (fontified t) 203 209 (fontified t face font-lock-keyword-face) 209 221 (fontified t) 221 222 (fontified t syntax-table (3) face font-lock-keyword-face) 222 223 (fontified t) 223 229 (fontified t face font-lock-keyword-face) 229 244 (fontified t) 244 248 (fontified t face font-lock-constant-face)) . 144) (undo-tree-id841 . -128) (undo-tree-id842 . -128) (undo-tree-id843 . -96) (undo-tree-id844 . -96) (undo-tree-id845 . -243) (undo-tree-id846 . -20) (undo-tree-id847 . -65) (undo-tree-id848 . -223) (undo-tree-id849 . -223) (undo-tree-id850 . -203) (undo-tree-id851 . -203) (undo-tree-id852 . -163) (undo-tree-id853 . -163) (undo-tree-id854 . -24) (undo-tree-id855 . -24) (undo-tree-id856 . -65) (undo-tree-id857 . -65) (undo-tree-id858 . -20) (undo-tree-id859 . -243) (undo-tree-id860 . -248) (undo-tree-id861 . -20)) nil (25712 58937 228205 573000) 0 nil])
([nil nil ((895 . 898) (889 . 895) (#("M" 0 1 (fontified t face font-lock-constant-face)) . -889) (undo-tree-id827 . -1) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -890) (undo-tree-id828 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -891) (undo-tree-id829 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -892) (undo-tree-id830 . -1) (#("." 0 1 (fontified t)) . -893) (undo-tree-id831 . -1) (#("p" 0 1 (fontified t)) . -894) (undo-tree-id832 . -1) (#("a" 0 1 (fontified t)) . -895) (undo-tree-id833 . -1) (#("t" 0 1 (fontified t)) . -896) (undo-tree-id834 . -1) (#("h" 0 1 (fontified t)) . -897) (undo-tree-id835 . -1) 898 (889 . 898) (#("p" 0 1 (fontified t)) . -889) (undo-tree-id836 . -1) (#("a" 0 1 (fontified t)) . -890) (undo-tree-id837 . -1) 891 (889 . 891) (883 . 889) (nil face font-lock-keyword-face 882 . 883) (nil fontified t 882 . 883) (882 . 883) 843) nil (25712 58937 228073 432000) 0 nil])
([nil nil ((804 . 805) (785 . 804) (#("h" 0 1 (fontified t)) . -785) (undo-tree-id815 . -1) 786 (776 . 786) (#("/" 0 1 (fontified t)) . -776) (undo-tree-id816 . -1) (#("u" 0 1 (fontified t)) . -777) (undo-tree-id817 . -1) (#("s" 0 1 (fontified t)) . -778) (undo-tree-id818 . -1) (#("r" 0 1 (fontified t)) . -779) (undo-tree-id819 . -1) (#("/" 0 1 (fontified t)) . -780) (undo-tree-id820 . -1) (#("s" 0 1 (fontified t)) . -781) (undo-tree-id821 . -1) (#("h" 0 1 (fontified t)) . -782) (undo-tree-id822 . -1) (#("a" 0 1 (fontified t)) . -783) (undo-tree-id823 . -1) (#("r" 0 1 (fontified t)) . -784) (undo-tree-id824 . -1) (#("e" 0 1 (fontified t)) . -785) (undo-tree-id825 . -1) (#("/" 0 1 (fontified t)) . -786) (undo-tree-id826 . -1) 787 (775 . 787)) nil (25712 58937 228052 409000) 0 nil])
([nil nil ((797 . 803) (#("plugins" 0 7 (fontified t face font-lock-string-face)) . 797) (undo-tree-id878 . -6) (undo-tree-id879 . -7) (undo-tree-id880 . -7) (undo-tree-id881 . -7) (undo-tree-id882 . -7) (undo-tree-id883 . -7) (undo-tree-id884 . -7) (undo-tree-id885 . -7) (undo-tree-id886 . -7) (undo-tree-id887 . -7) (undo-tree-id888 . -7) (undo-tree-id889 . -6) (undo-tree-id890 . -6) (undo-tree-id891 . -6) (undo-tree-id892 . -6) (undo-tree-id893 . -7) (undo-tree-id894 . -7) (t 25712 58937 233224 898000)) nil (25712 58966 748204 959000) 0 nil])
([nil nil ((885 . 890) (#("r" 0 1 (fontified t face font-lock-string-face)) . -885) (undo-tree-id906 . -1) 886 (884 . 886) (#("plugins" 0 7 (fontified t face font-lock-string-face)) . 884) (undo-tree-id907 . -6) (t 25712 58966 753308 95000)) nil (25712 59016 440195 575000) 0 nil])
([nil nil ((958 . 959) (953 . 958) (#("a" 0 1 (fontified t)) . -953) (undo-tree-id899 . -1) (#("r" 0 1 (fontified t)) . -954) (undo-tree-id900 . -1) (#("g" 0 1 (fontified t)) . -955) (undo-tree-id901 . -1) 956 (953 . 956) (#("A" 0 1 (fontified t)) . -953) (undo-tree-id902 . -1) (#("r" 0 1 (fontified t)) . -954) (undo-tree-id903 . -1) (#("g" 0 1 (fontified t)) . -955) (undo-tree-id904 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -956) (undo-tree-id905 . -1) 957 (949 . 957) (942 . 949) (926 . 942)) nil (25712 59016 440187 613000) 0 nil])
([nil nil ((829 . 833) (#("ScanArg" 0 7 (fontified t face font-lock-function-name-face)) . 829) (undo-tree-id898 . -6)) nil (25712 59016 440176 89000) 0 nil])
([nil nil ((951 . 955) (#("path" 0 4 (fontified t)) . 951) (undo-tree-id895 . -3) (undo-tree-id896 . -4) (undo-tree-id897 . -4)) nil (25712 59016 440167 499000) 0 nil])
([nil nil ((1000 . 1010) (993 . 1000) (987 . 993) (982 . 987) (966 . 982) (#("  " 0 2 (fontified nil)) . -961) (963 . 968) (956 . 963) (t 25712 59016 446787 950000) 954) nil (25712 59046 905622 807000) 0 nil])
([nil nil ((1010 . 1022) (1000 . 1010) (994 . 1000) (nil face font-lock-keyword-face 993 . 994) (nil fontified t 993 . 994) (993 . 994) 972) nil (25712 59046 905617 568000) 0 nil])
([nil nil ((808 . 823) (805 . 808) 781) nil (25712 59046 905609 117000) 0 nil])
([nil nil ((833 . 840) (#(" " 0 1 (fontified t)) . -833) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("=" 0 1 (fontified t face font-lock-keyword-face)) . -834) (undo-tree-id910 . -1) (undo-tree-id911 . -1) 835 (832 . 835) (831 . 832) (#("m" 0 1 (fontified t face scala-font-lock:var-face)) . -831) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (#("x" 0 1 (fontified t face scala-font-lock:var-face)) . -832) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (#("p" 0 1 (fontified t face scala-font-lock:var-face)) . -833) (undo-tree-id916 . -1) (undo-tree-id917 . -1) 834 (826 . 834) (823 . 826) (t 25712 59046 910214 841000) 822) nil (25712 59066 289469 71000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1078 . 1079) (#("
" 0 1 (fontified nil)) . -1157) (1074 . 1158) 1073 (t 25712 59066 293609 88000)) nil (25712 59087 709642 204000) 0 nil])
([nil nil ((888 . 894)) nil (25712 59087 709633 543000) 0 nil])
([nil nil ((1093 . 1096) (t 25712 59087 710344 254000)) nil (25712 59094 38802 300000) 0 nil])
([nil nil ((1132 . 1135) (#("port" 0 4 (fontified t)) . 1132) (undo-tree-id918 . -3) (undo-tree-id919 . -3) (undo-tree-id920 . -3) (undo-tree-id921 . -3) (undo-tree-id922 . -3) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (t 25712 59094 40364 733000)) nil (25712 59097 453925 523000) 0 nil])
([nil nil ((1232 . 1242) (1225 . 1232) (1209 . 1225) (1202 . 1209) (1191 . 1202) (1175 . 1191) (#("  " 0 2 (fontified nil)) . -1170) (1172 . 1177) (1165 . 1172) (t 25712 59097 457042 497000) 1162) nil (25712 59155 439358 504000) 0 nil])
([nil nil ((1252 . 1261) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -1252) (undo-tree-id925 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -1253) (undo-tree-id926 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -1254) (undo-tree-id927 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -1255) (undo-tree-id928 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -1256) (undo-tree-id929 . -1) (#("." 0 1 (fontified t)) . -1257) (undo-tree-id930 . -1) (#("c" 0 1 (fontified t face font-lock-constant-face)) . -1258) (undo-tree-id931 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -1259) (undo-tree-id932 . -1) (#("l" 0 1 (fontified t face font-lock-constant-face)) . -1260) (undo-tree-id933 . -1) 1261 (#("l" 0 1 (fontified t face font-lock-constant-face)) . -1261) (undo-tree-id934 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -1262) (undo-tree-id935 . -1) (#("c" 0 1 (fontified t face font-lock-constant-face)) . -1263) (undo-tree-id936 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -1264) (undo-tree-id937 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -1265) (undo-tree-id938 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -1266) (undo-tree-id939 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -1267) (undo-tree-id940 . -1) (#("." 0 1 (fontified t)) . -1268) (undo-tree-id941 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -1269) (undo-tree-id942 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -1270) (undo-tree-id943 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -1271) (undo-tree-id944 . -1) (#("u" 0 1 (fontified t face font-lock-constant-face)) . -1272) (undo-tree-id945 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -1273) (undo-tree-id946 . -1) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -1274) (undo-tree-id947 . -1) (#("b" 0 1 (fontified t face font-lock-constant-face)) . -1275) (undo-tree-id948 . -1) (#("l" 0 1 (fontified t face font-lock-constant-face)) . -1276) (undo-tree-id949 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -1277) (undo-tree-id950 . -1) (#("." 0 1 (fontified t)) . -1278) (undo-tree-id951 . -1) (#("N" 0 1 (fontified t face font-lock-constant-face)) . -1279) (undo-tree-id952 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -1280) (undo-tree-id953 . -1) (#("l" 0 1 (fontified t face font-lock-constant-face)) . -1281) (undo-tree-id954 . -1) 1282 (1280 . 1282) (1278 . 1280) (apply yas--snippet-revive 1269 1278 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (1269 . 1278) (#("immutable" 0 9 (fontified nil)) . 1269) (1269 . 1278) (#("immutable" 0 9 (fontified nil)) . -1269) (1269 . 1278) (#("imm" 0 3 (fontified t face font-lock-constant-face)) . -1269) (undo-tree-id955 . -3) 1272 (1269 . 1272) (#("N" 0 1 (fontified t face font-lock-constant-face)) . -1269) (undo-tree-id956 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -1270) (undo-tree-id957 . -1) 1271 (1268 . 1271) (apply yas--snippet-revive 1258 1268 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (1258 . 1268) (#("collection" 0 10 (fontified nil)) . 1258) (1258 . 1268) (#("collection" 0 10 (fontified nil)) . -1258) (1258 . 1268) (#("coll" 0 4 (fontified t face font-lock-constant-face)) . -1258) (undo-tree-id958 . -4) 1262 (1252 . 1262) (#("N" 0 1 (fontified t face font-lock-constant-face)) . -1252) (undo-tree-id959 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -1253) (undo-tree-id960 . -1) (#("l" 0 1 (fontified t face font-lock-constant-face)) . -1254) (undo-tree-id961 . -1) 1255 (1252 . 1255) (#("  " 0 2 (fontified nil)) . -1247) (1249 . 1254) (1242 . 1249) 1241) nil (25712 59155 439342 999000) 0 nil])
([nil nil ((855 . 856) (843 . 855) (840 . 843) (t 25712 59155 440568 585000) 839) nil (25712 59171 261521 841000) 0 nil])
([nil nil ((862 . 864) (#("1" 0 1 (fontified t face font-lock-string-face)) . -862) (undo-tree-id962 . -1) 863 (855 . 863)) nil (25712 59171 261514 229000) 0 nil])
([nil nil ((1341 . 1346) (#("w" 0 1 (fontified t)) . -1341) (undo-tree-id966 . -1) (#("o" 0 1 (fontified t)) . -1342) (undo-tree-id967 . -1) 1343 (1334 . 1343) (#("u" 0 1 (fontified t)) . -1334) (undo-tree-id968 . -1) 1335 (1334 . 1335) (1313 . 1334) (1312 . 1313) (#("e" 0 1 (fontified t face font-lock-type-face)) . -1312) (undo-tree-id969 . -1) 1313 (1304 . 1313) (#("o" 0 1 (fontified t)) . -1304) (undo-tree-id970 . -1) 1305 (1302 . 1305) (1295 . 1302) (1277 . 1295) (#("\"" 0 1 (fontified t)) . -1277) (undo-tree-id971 . -1) 1278 (1277 . 1278) (#("  " 0 2 (fontified nil)) . -1272) (1274 . 1279) (1267 . 1274) (t 25712 59171 263955 902000) 1266) nil (25712 59199 994221 977000) 0 nil])
([nil nil ((1322 . 1323)) nil (25712 59199 994210 523000) 0 nil])
([nil nil ((1295 . 1296) (#("      " 0 6 (fontified nil)) . 1295) (#("
" 0 1 (fontified t)) . -1295) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) 1294) nil (25712 59199 994203 749000) 0 nil])
([nil nil ((#("    case \"--jmxport\" :: port :: tail =>
      this.jmx = port.toInt
      scan(tail)
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (syntax-table (7) fontified t face font-lock-string-face) 10 15 (fontified t face font-lock-string-face) 15 19 (fontified t face font-lock-string-face) 19 20 (syntax-table (7) fontified t face font-lock-string-face) 20 21 (fontified t) 21 23 (syntax-table (3) fontified t face font-lock-constant-face) 23 24 (fontified t) 24 28 (fontified t face font-lock-type-face) 28 29 (fontified t) 29 31 (syntax-table (3) fontified t face font-lock-constant-face) 31 32 (fontified t) 32 36 (fontified t face font-lock-type-face) 36 37 (fontified t) 37 39 (syntax-table (3) fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 46 (fontified t) 46 50 (fontified t face font-lock-keyword-face) 50 55 (fontified t) 55 56 (fontified t face font-lock-keyword-face) 56 67 (fontified t) 67 68 (fontified t) 68 78 (fontified t) 78 79 (fontified t face (rainbow-delimiters-depth-3-face)) 79 83 (fontified t) 83 84 (fontified t face (rainbow-delimiters-depth-3-face)) 84 85 (fontified t)) . 1106) (undo-tree-id984 . -84) (undo-tree-id985 . -84) (undo-tree-id986 . -27) (undo-tree-id987 . -84) (undo-tree-id988 . -40) (undo-tree-id989 . -40) (undo-tree-id990 . -68) (undo-tree-id991 . -68) (undo-tree-id992 . -85) (undo-tree-id993 . -85) (undo-tree-id994 . -84) (undo-tree-id995 . -27) (undo-tree-id996 . -84) 1190 (t 25712 59199 997388 679000)) nil (25712 59219 801359 735000) 0 nil])
([nil nil ((#("  var jmx = 9998
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 9 (fontified t face scala-font-lock:var-face) 9 10 (fontified t) 10 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 16 (fontified t face font-lock-constant-face) 16 17 (fontified t)) . 824) (undo-tree-id972 . -16) (undo-tree-id973 . -17) (undo-tree-id974 . -17) (undo-tree-id975 . -15) (undo-tree-id976 . -15) (undo-tree-id977 . -15) (undo-tree-id978 . -15) (undo-tree-id979 . -15) (undo-tree-id980 . -15) (undo-tree-id981 . -15) (undo-tree-id982 . -15) (undo-tree-id983 . -17) 839) nil (25712 59219 801344 580000) 0 nil])
([nil nil ((#("  val envs = System.getenv()
  // root - lib - jars
  //            - native
  //      - bin
  val root = new java.io.File(envs.get(\"ROOT\")).toPath()
  def lib = root.resolve(\"lib\")
  def jars = lib.resolve(\"jars\")
  def native = lib.resolve(\"native\")
  def bin = root.resolve(\"bin\")
  val mainActor = envs.get(\"MAIN\")
  val host = envs.getOrDefault(\"HOST\", \"127.0.0.1\")
  val port = envs.getOrDefault(\"PORT\", \"9000\")
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t) 11 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t) 29 31 (fontified t) 31 34 (fontified t face font-lock-comment-delimiter-face) 34 52 (fontified t face font-lock-comment-face) 52 54 (fontified t) 54 68 (fontified t face font-lock-comment-delimiter-face) 68 77 (fontified t face font-lock-comment-face) 77 79 (fontified t) 79 87 (fontified t face font-lock-comment-delimiter-face) 87 90 (fontified t face font-lock-comment-face) 90 93 (fontified t face font-lock-comment-face) 93 95 (fontified t) 95 97 (fontified t face font-lock-keyword-face) 97 98 (fontified t face font-lock-keyword-face) 98 99 (fontified t) 99 103 (fontified t face font-lock-variable-name-face) 103 104 (fontified t) 104 105 (fontified t face font-lock-keyword-face) 105 106 (fontified t) 106 109 (fontified t face font-lock-keyword-face) 109 110 (fontified t) 110 114 (fontified t face font-lock-type-face) 114 118 (fontified t) 118 122 (fontified t face font-lock-constant-face) 122 123 (fontified t face (rainbow-delimiters-depth-2-face)) 123 124 (fontified t) 124 131 (fontified t) 131 132 (fontified t face (rainbow-delimiters-depth-3-face)) 132 133 (syntax-table (7) fontified t face font-lock-string-face) 133 137 (fontified t face font-lock-string-face) 137 138 (syntax-table (7) fontified t face font-lock-string-face) 138 139 (fontified t face (rainbow-delimiters-depth-3-face)) 139 140 (fontified t face (rainbow-delimiters-depth-2-face)) 140 147 (fontified t) 147 148 (fontified t face (rainbow-delimiters-depth-2-face)) 148 149 (fontified t face (rainbow-delimiters-depth-2-face)) 149 150 (fontified t) 150 152 (fontified t) 152 155 (fontified t face font-lock-keyword-face) 155 156 (fontified t) 156 159 (fontified t face font-lock-function-name-face) 159 160 (fontified t) 160 161 (fontified t face font-lock-keyword-face) 161 174 (fontified t) 174 175 (fontified t face (rainbow-delimiters-depth-2-face)) 175 176 (syntax-table (7) fontified t face font-lock-string-face) 176 178 (fontified t face font-lock-string-face) 178 179 (fontified t face font-lock-string-face) 179 180 (syntax-table (7) fontified t face font-lock-string-face) 180 181 (fontified t face (rainbow-delimiters-depth-2-face)) 181 182 (fontified t) 182 184 (fontified t) 184 187 (fontified t face font-lock-keyword-face) 187 188 (fontified t) 188 192 (fontified t face font-lock-function-name-face) 192 193 (fontified t) 193 194 (fontified t face font-lock-keyword-face) 194 206 (fontified t) 206 207 (fontified t face (rainbow-delimiters-depth-2-face)) 207 208 (syntax-table (7) fontified t face font-lock-string-face) 208 212 (fontified t face font-lock-string-face) 212 213 (syntax-table (7) fontified t face font-lock-string-face) 213 214 (fontified t face (rainbow-delimiters-depth-2-face)) 214 217 (fontified t) 217 220 (fontified t face font-lock-keyword-face) 220 221 (fontified t) 221 227 (fontified t face font-lock-function-name-face) 227 228 (fontified t) 228 229 (fontified t face font-lock-keyword-face) 229 241 (fontified t) 241 242 (fontified t face (rainbow-delimiters-depth-2-face)) 242 243 (syntax-table (7) fontified t face font-lock-string-face) 243 249 (fontified t face font-lock-string-face) 249 250 (syntax-table (7) fontified t face font-lock-string-face) 250 251 (fontified t face (rainbow-delimiters-depth-2-face)) 251 254 (fontified t) 254 257 (fontified t face font-lock-keyword-face) 257 258 (fontified t) 258 261 (fontified t face font-lock-function-name-face) 261 262 (fontified t) 262 263 (fontified t face font-lock-keyword-face) 263 276 (fontified t) 276 277 (fontified t face (rainbow-delimiters-depth-2-face)) 277 278 (syntax-table (7) fontified t face font-lock-string-face) 278 281 (fontified t face font-lock-string-face) 281 282 (syntax-table (7) fontified t face font-lock-string-face) 282 283 (fontified t face (rainbow-delimiters-depth-2-face)) 283 286 (fontified t) 286 289 (fontified t face font-lock-keyword-face) 289 290 (fontified t) 290 299 (fontified t face font-lock-variable-name-face) 299 300 (fontified t) 300 301 (fontified t face font-lock-keyword-face) 301 310 (fontified t) 310 311 (fontified t face (rainbow-delimiters-depth-2-face)) 311 312 (syntax-table (7) fontified t face font-lock-string-face) 312 316 (fontified t face font-lock-string-face) 316 317 (syntax-table (7) fontified t face font-lock-string-face) 317 318 (fontified t face (rainbow-delimiters-depth-2-face)) 318 321 (fontified t) 321 324 (fontified t face font-lock-keyword-face) 324 325 (fontified t) 325 327 (fontified t face font-lock-variable-name-face) 327 328 (fontified t face font-lock-variable-name-face) 328 329 (fontified t face font-lock-variable-name-face) 329 330 (fontified t) 330 331 (fontified t face font-lock-keyword-face) 331 349 (fontified t) 349 350 (fontified t face (rainbow-delimiters-depth-2-face)) 350 351 (syntax-table (7) fontified t face font-lock-string-face) 351 355 (fontified t face font-lock-string-face) 355 356 (syntax-table (7) fontified t face font-lock-string-face) 356 358 (fontified t) 358 359 (syntax-table (7) fontified t face font-lock-string-face) 359 368 (fontified t face font-lock-string-face) 368 369 (syntax-table (7) fontified t face font-lock-string-face) 369 370 (fontified t face (rainbow-delimiters-depth-2-face)) 370 371 (fontified t) 371 373 (fontified t) 373 376 (fontified t face font-lock-keyword-face) 376 377 (fontified t) 377 381 (fontified t face font-lock-variable-name-face) 381 382 (fontified t) 382 383 (fontified t face font-lock-keyword-face) 383 401 (fontified t) 401 402 (fontified t face (rainbow-delimiters-depth-2-face)) 402 403 (syntax-table (7) fontified t face font-lock-string-face) 403 406 (fontified t face font-lock-string-face) 406 407 (fontified t face font-lock-string-face) 407 408 (syntax-table (7) fontified t face font-lock-string-face) 408 410 (fontified t) 410 411 (syntax-table (7) fontified t face font-lock-string-face) 411 415 (fontified t face font-lock-string-face) 415 416 (syntax-table (7) fontified t face font-lock-string-face) 416 417 (fontified t face (rainbow-delimiters-depth-2-face)) 417 418 (fontified t)) . 1263) (undo-tree-id997 . -319) (undo-tree-id998 . -319) (undo-tree-id999 . -182) (undo-tree-id1000 . -182) (undo-tree-id1001 . -215) (undo-tree-id1002 . -215) (undo-tree-id1003 . -418) (undo-tree-id1004 . -418) (undo-tree-id1005 . -150) (undo-tree-id1006 . -150) (undo-tree-id1007 . -29) (undo-tree-id1008 . -29) (undo-tree-id1009 . -52) (undo-tree-id1010 . -52) (undo-tree-id1011 . -77) (undo-tree-id1012 . -77) (undo-tree-id1013 . -93) (undo-tree-id1014 . -93) (undo-tree-id1015 . -417) (undo-tree-id1016 . -373) (undo-tree-id1017 . -2) (undo-tree-id1018 . -373) (undo-tree-id1019 . -284) (undo-tree-id1020 . -284) (undo-tree-id1021 . -252) (undo-tree-id1022 . -252) (undo-tree-id1023 . -371) (undo-tree-id1024 . -371) (undo-tree-id1025 . -373) (undo-tree-id1026 . -417) (undo-tree-id1027 . -373) (undo-tree-id1028 . -418) (undo-tree-id1029 . -2) (undo-tree-id1030 . -373) (undo-tree-id1031 . -286) (undo-tree-id1032 . -286) (undo-tree-id1033 . -286) (undo-tree-id1034 . -286) (undo-tree-id1035 . -286) (undo-tree-id1036 . -286) (undo-tree-id1037 . -286) (undo-tree-id1038 . -321) (undo-tree-id1039 . -371) (undo-tree-id1040 . -373) (undo-tree-id1041 . -373) (undo-tree-id1042 . -373) (undo-tree-id1043 . -373) (undo-tree-id1044 . -373) (undo-tree-id1045 . -373) (undo-tree-id1046 . -418) 1636 (t 25712 59219 804124 916000)) nil (25712 59254 880834 449000) 0 nil])
([nil nil ((#("ConfigFactory.parseString {" 0 13 (fontified t face font-lock-constant-face) 13 16 (fontified t) 16 17 (fontified t) 17 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-2-face))) . 1278) (undo-tree-id1070 . -26) (undo-tree-id1071 . -27) (t 25712 59254 884250 68000)) nil (25712 59277 135306 777000) 0 nil])
([nil nil ((1277 . 1278) (#("     " 0 1 (fontified nil) 1 5 (fontified nil)) . 1277) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (#("
" 0 1 (fontified t)) . -1278) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) 1277) nil (25712 59277 135298 257000) 0 nil])
([nil nil ((1282 . 1283) (t 25712 59277 137664 12000)) nil (25712 59284 819616 607000) 0 nil])
([nil nil ((1283 . 1285)) nil (25712 59284 819613 743000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil face font-lock-string-face)) . -1287) (1283 . 1287)) nil (25712 59284 819605 502000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face font-lock-string-face)) . 1387) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (t 25712 59284 821025 388000)) nil (25712 59292 183939 336000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-string-face)) . 1387) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1)) nil (25712 59292 183935 6000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-string-face)) . 1387) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1)) nil (25712 59292 183926 834000) 0 nil])
([nil nil ((1494 . 1498) (#("host" 0 4 (fontified t face font-lock-variable-name-face)) . 1494) (undo-tree-id1078 . -3) (undo-tree-id1079 . -4) (undo-tree-id1080 . -4) (t 25712 59292 187719 41000)) nil (25712 59304 156882 946000) 0 nil])
([nil nil ((#("  }
" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-1-face)) 3 4 (fontified t)) . 1567) (undo-tree-id1081 . -4) (undo-tree-id1082 . -4) (undo-tree-id1083 . -3) (undo-tree-id1084 . -2) (undo-tree-id1085 . -3) (undo-tree-id1086 . -2) (undo-tree-id1087 . 2) (undo-tree-id1088 . -3) 1569 (t 25712 59304 161096 439000)) nil (25712 59327 978287 718000) 0 nil])
([nil nil ((#("  case class Member(
    ref: ActorRef[Serializable],
    kind: String,
  )
" 0 2 (fontified t) 2 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-type-face) 19 20 (fontified t face (rainbow-delimiters-depth-2-face)) 20 28 (fontified t) 28 29 (fontified t face font-lock-keyword-face) 29 30 (fontified t) 30 38 (fontified t face font-lock-type-face) 38 39 (fontified t face (rainbow-delimiters-depth-3-face)) 39 51 (fontified t face font-lock-constant-face) 51 52 (fontified t face (rainbow-delimiters-depth-3-face)) 52 62 (fontified t) 62 63 (fontified t face font-lock-keyword-face) 63 64 (fontified t) 64 70 (fontified t face font-lock-type-face) 70 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-2-face)) 75 76 (fontified t)) . 1568) (undo-tree-id1093 . -75) (undo-tree-id1094 . -75) (undo-tree-id1095 . -3) (undo-tree-id1096 . -75) (undo-tree-id1097 . -76) (undo-tree-id1098 . -76) (undo-tree-id1099 . -72) (undo-tree-id1100 . -72) (undo-tree-id1101 . -54) (undo-tree-id1102 . -54) (undo-tree-id1103 . -21) (undo-tree-id1104 . -21) (undo-tree-id1105 . -3) (undo-tree-id1106 . -3) (undo-tree-id1107 . -3) (undo-tree-id1108 . -3) (undo-tree-id1109 . -3) (undo-tree-id1110 . -75) (undo-tree-id1111 . -3) (undo-tree-id1112 . -3) (undo-tree-id1113 . -3) (undo-tree-id1114 . -3) (undo-tree-id1115 . -3) (undo-tree-id1116 . -3) (undo-tree-id1117 . -76) (undo-tree-id1118 . -3) (undo-tree-id1119 . -75) (undo-tree-id1120 . -3) (undo-tree-id1121 . -3) (undo-tree-id1122 . -3) (undo-tree-id1123 . -3) (undo-tree-id1124 . -3) (undo-tree-id1125 . -3) (undo-tree-id1126 . -24) (undo-tree-id1127 . -76) (undo-tree-id1128 . -72) (undo-tree-id1129 . -75) (undo-tree-id1130 . -75) (undo-tree-id1131 . -76) 1643 (t 25712 59327 981184 831000)) nil (25712 59344 574117 870000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1568) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . 1) (undo-tree-id1092 . -1)) nil (25712 59355 488109 218000) 0 nil])
([nil nil ((1269 . 1274) (#("f" 0 1 (fontified t face font-lock-function-name-face)) . -1269) (undo-tree-id1147 . -1) 1270 (1265 . 1270) (1262 . 1265) 1261) nil (25712 59379 798927 21000) 0 nil] [nil nil ((1265 . 1273) (t 25712 59344 577913 639000)) ((#("private " 0 7 (fontified t face scala-font-lock:private-face) 7 8 (fontified t)) . 1265) (undo-tree-id1132 . -7) (undo-tree-id1133 . -7) (undo-tree-id1134 . -7) (undo-tree-id1135 . -7) (undo-tree-id1136 . -7) (undo-tree-id1137 . -7) (undo-tree-id1138 . -7) (undo-tree-id1139 . -7) (undo-tree-id1140 . -7) (undo-tree-id1141 . -7) (t 25712 59350 761270 236000)) (25712 59350 756031 812000) 0 nil])
([nil nil ((1272 . 1274)) nil (25712 59379 798923 179000) 0 nil])
nil
([nil nil (1273) nil (25712 59379 798920 875000) 0 nil])
([nil nil ((1265 . 1273)) nil (25712 59379 798918 989000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil face font-lock-string-face)) . -1616) (1610 . 1616) (#("      " 0 6 (fontified nil face font-lock-string-face)) . -1599) (1591 . 1599) (#("      " 0 6 (fontified nil face font-lock-string-face)) . -1589) (1581 . 1589) (#("        " 0 8 (fontified nil face font-lock-string-face)) . -1579) (1569 . 1579) (#("          " 0 10 (fontified nil face font-lock-string-face)) . -1556) (1544 . 1556) (#("          " 0 10 (fontified nil face font-lock-string-face)) . -1525) (1513 . 1525) (#("        " 0 8 (fontified nil face font-lock-string-face)) . -1501) (1491 . 1501) (#("      " 0 6 (fontified nil face font-lock-string-face)) . -1475) (1467 . 1475) (#("      " 0 6 (fontified nil face font-lock-string-face)) . -1465) (1457 . 1465) (#("        " 0 8 (fontified nil face font-lock-string-face)) . -1455) (1445 . 1455) (#("          " 0 10 (fontified nil face font-lock-string-face)) . -1414) (1402 . 1414) (#("        " 0 8 (fontified nil face font-lock-string-face)) . -1377) (1367 . 1377) (#("        " 0 8 (fontified nil face font-lock-string-face)) . -1346) (1336 . 1346) (#("      " 0 6 (fontified nil face font-lock-string-face)) . -1328) (1320 . 1328) (#("    " 0 4 (fontified nil face font-lock-string-face)) . -1313) (1307 . 1313) (#("  " 0 2 (fontified nil)) . -1289) (undo-tree-id1146 . -2) (1285 . 1289) 1588) nil (25712 59379 798913 821000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -1623) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (1625 . 1626) (1621 . 1625) (nil face font-lock-string-face 1620 . 1621) (nil fontified t 1620 . 1621) (1620 . 1621) 1618) nil (25712 59379 798904 252000) 0 nil])
([nil nil ((1627 . 1632) (1624 . 1627) 1623) nil (25712 59379 798884 696000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1633) (undo-tree-id1154 . 1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (t 25712 59379 801380 288000)) nil (25712 59383 636297 942000) 0 nil])
([nil nil ((#("  new Launcher()
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 14 (fontified t face font-lock-type-face) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t)) . 1633) (undo-tree-id1148 . -17) (undo-tree-id1149 . -17) (undo-tree-id1150 . -16) (undo-tree-id1151 . 17) (undo-tree-id1152 . -16) (undo-tree-id1153 . -17)) nil (25712 59383 636288 373000) 0 nil])
([nil nil ((#("object Sys {
  ActorSystem[Nothing](Behaviors.setup[Nothing] { ctx =>
    println(\"TOP\")
    Behaviors.empty
  }, \"dbg\")
}

trait Actor {
  def show
}
class Primary extends Actor {
  def show = println(\"primary\")
  println(\"up\")
}
class Secondary extends Actor {
  def show = println(\"secondary\")
  println(\"up\")
}
class Third extends Actor {
  def show = println(\"third\")
  println(\"up\")
}
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 10 (fontified t face font-lock-constant-face) 10 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t) 13 15 (fontified t) 15 26 (fontified t face font-lock-constant-face) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 34 (fontified t face font-lock-constant-face) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 45 (fontified t face font-lock-constant-face) 45 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-3-face)) 52 59 (fontified t face font-lock-constant-face) 59 60 (fontified t face (rainbow-delimiters-depth-3-face)) 60 61 (fontified t) 61 62 (fontified t face (rainbow-delimiters-depth-3-face)) 62 67 (fontified t) 67 69 (syntax-table (3) fontified t face font-lock-keyword-face) 69 81 (fontified t) 81 82 (fontified t face (rainbow-delimiters-depth-4-face)) 82 83 (syntax-table (7) fontified t face font-lock-string-face) 83 86 (fontified t face font-lock-string-face) 86 87 (syntax-table (7) fontified t face font-lock-string-face) 87 88 (fontified t face (rainbow-delimiters-depth-4-face)) 88 93 (fontified t) 93 102 (fontified t face font-lock-constant-face) 102 111 (fontified t) 111 112 (fontified t face (rainbow-delimiters-depth-3-face)) 112 114 (fontified t) 114 115 (syntax-table (7) fontified t face font-lock-string-face) 115 118 (fontified t face font-lock-string-face) 118 119 (syntax-table (7) fontified t face font-lock-string-face) 119 120 (fontified t face (rainbow-delimiters-depth-2-face)) 120 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-1-face)) 122 124 (fontified t) 124 129 (fontified t face font-lock-keyword-face) 129 130 (fontified t) 130 135 (fontified t face font-lock-type-face) 135 136 (fontified t) 136 137 (fontified t face (rainbow-delimiters-depth-1-face)) 137 140 (fontified t) 140 143 (fontified t face font-lock-keyword-face) 143 144 (fontified t) 144 148 (fontified t face font-lock-function-name-face) 148 149 (fontified t) 149 150 (fontified t face (rainbow-delimiters-depth-1-face)) 150 151 (fontified t) 151 156 (fontified t face font-lock-keyword-face) 156 157 (fontified t) 157 164 (fontified t face font-lock-type-face) 164 165 (fontified t) 165 172 (fontified t face font-lock-keyword-face) 172 173 (fontified t) 173 178 (fontified t face font-lock-type-face) 178 179 (fontified t) 179 180 (fontified t face (rainbow-delimiters-depth-1-face)) 180 183 (fontified t) 183 186 (fontified t face font-lock-keyword-face) 186 187 (fontified t) 187 191 (fontified t face font-lock-function-name-face) 191 192 (fontified t) 192 193 (fontified t face font-lock-keyword-face) 193 201 (fontified t) 201 202 (fontified t face (rainbow-delimiters-depth-2-face)) 202 203 (syntax-table (7) fontified t face font-lock-string-face) 203 210 (fontified t face font-lock-string-face) 210 211 (syntax-table (7) fontified t face font-lock-string-face) 211 212 (fontified t face (rainbow-delimiters-depth-2-face)) 212 222 (fontified t) 222 223 (fontified t face (rainbow-delimiters-depth-2-face)) 223 224 (syntax-table (7) fontified t face font-lock-string-face) 224 226 (fontified t face font-lock-string-face) 226 227 (syntax-table (7) fontified t face font-lock-string-face) 227 228 (fontified t face (rainbow-delimiters-depth-2-face)) 228 229 (fontified t) 229 230 (fontified t face (rainbow-delimiters-depth-1-face)) 230 231 (fontified t) 231 236 (fontified t face font-lock-keyword-face) 236 237 (fontified t) 237 246 (fontified t face font-lock-type-face) 246 247 (fontified t) 247 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 260 (fontified t face font-lock-type-face) 260 261 (fontified t) 261 262 (fontified t face (rainbow-delimiters-depth-1-face)) 262 265 (fontified t) 265 268 (fontified t face font-lock-keyword-face) 268 269 (fontified t) 269 273 (fontified t face font-lock-function-name-face) 273 274 (fontified t) 274 275 (fontified t face font-lock-keyword-face) 275 283 (fontified t) 283 284 (fontified t face (rainbow-delimiters-depth-2-face)) 284 285 (syntax-table (7) fontified t face font-lock-string-face) 285 294 (fontified t face font-lock-string-face) 294 295 (syntax-table (7) fontified t face font-lock-string-face) 295 296 (fontified t face (rainbow-delimiters-depth-2-face)) 296 306 (fontified t) 306 307 (fontified t face (rainbow-delimiters-depth-2-face)) 307 308 (syntax-table (7) fontified t face font-lock-string-face) 308 310 (fontified t face font-lock-string-face) 310 311 (syntax-table (7) fontified t face font-lock-string-face) 311 312 (fontified t face (rainbow-delimiters-depth-2-face)) 312 313 (fontified t) 313 314 (fontified t face (rainbow-delimiters-depth-1-face)) 314 315 (fontified t) 315 320 (fontified t face font-lock-keyword-face) 320 321 (fontified t) 321 326 (fontified t face font-lock-type-face) 326 327 (fontified t) 327 334 (fontified t face font-lock-keyword-face) 334 335 (fontified t) 335 340 (fontified t face font-lock-type-face) 340 341 (fontified t) 341 342 (fontified t face (rainbow-delimiters-depth-1-face)) 342 345 (fontified t) 345 348 (fontified t face font-lock-keyword-face) 348 349 (fontified t) 349 353 (fontified t face font-lock-function-name-face) 353 354 (fontified t) 354 355 (fontified t face font-lock-keyword-face) 355 363 (fontified t) 363 364 (fontified t face (rainbow-delimiters-depth-2-face)) 364 365 (syntax-table (7) fontified t face font-lock-string-face) 365 370 (fontified t face font-lock-string-face) 370 371 (syntax-table (7) fontified t face font-lock-string-face) 371 372 (fontified t face (rainbow-delimiters-depth-2-face)) 372 382 (fontified t) 382 383 (fontified t face (rainbow-delimiters-depth-2-face)) 383 384 (syntax-table (7) fontified t face font-lock-string-face) 384 386 (fontified t face font-lock-string-face) 386 387 (syntax-table (7) fontified t face font-lock-string-face) 387 388 (fontified t face (rainbow-delimiters-depth-2-face)) 388 389 (fontified t) 389 390 (fontified t face (rainbow-delimiters-depth-1-face)) 390 391 (fontified t)) . 3287) (undo-tree-id1162 . -13) (undo-tree-id1163 . -13) (undo-tree-id1164 . -391) (undo-tree-id1165 . -391) (undo-tree-id1166 . -138) (undo-tree-id1167 . -138) (undo-tree-id1168 . -124) (undo-tree-id1169 . -124) (undo-tree-id1170 . -123) (undo-tree-id1171 . -123) (undo-tree-id1172 . -263) (undo-tree-id1173 . -263) (undo-tree-id1174 . -70) (undo-tree-id1175 . -70) (undo-tree-id1176 . -121) (undo-tree-id1177 . -121) (undo-tree-id1178 . -109) (undo-tree-id1179 . -109) (undo-tree-id1180 . -89) (undo-tree-id1181 . -89) (undo-tree-id1182 . -390) (undo-tree-id1183 . -389) (undo-tree-id1184 . -389) (undo-tree-id1185 . -149) (undo-tree-id1186 . -149) (undo-tree-id1187 . -297) (undo-tree-id1188 . -297) (undo-tree-id1189 . -315) (undo-tree-id1190 . -315) (undo-tree-id1191 . -313) (undo-tree-id1192 . -313) (undo-tree-id1193 . -389) (undo-tree-id1194 . -389) (undo-tree-id1195 . -373) (undo-tree-id1196 . -373) (undo-tree-id1197 . -343) (undo-tree-id1198 . -343) (undo-tree-id1199 . -231) (undo-tree-id1200 . -231) (undo-tree-id1201 . -229) (undo-tree-id1202 . -229) (undo-tree-id1203 . -213) (undo-tree-id1204 . -213) (undo-tree-id1205 . -181) (undo-tree-id1206 . -181) (undo-tree-id1207 . -151) (undo-tree-id1208 . -151) (undo-tree-id1209 . -389) (undo-tree-id1210 . -391) (undo-tree-id1211 . -389) (undo-tree-id1212 . -389) (undo-tree-id1213 . 2) (undo-tree-id1214 . -390) (undo-tree-id1215 . 50) (undo-tree-id1216 . -342) (undo-tree-id1217 . -389) (undo-tree-id1218 . -391) 3676 (t 25712 59383 641394 936000)) nil (25712 59415 687899 651000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3287) (undo-tree-id1158 . 1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1)) nil (25712 59415 687853 346000) 0 nil])
([nil nil ((#("    val rootLoader = this.getClass().getClassLoader()
    val dependencyLoader = new DependencyClassLoader(rootLoader)
    val libLoader = new URLClassLoader(Array(Main.lib.toUri().toURL()), dependencyLoader)
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t) 19 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 25 (fontified t face font-lock-keyword-face) 25 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-4-face)) 35 36 (fontified t face (rainbow-delimiters-depth-4-face)) 36 44 (fontified t) 44 49 (fontified t) 49 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-4-face)) 52 53 (fontified t face (rainbow-delimiters-depth-4-face)) 53 54 (fontified t) 54 58 (fontified t) 58 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 78 (fontified t face font-lock-variable-name-face) 78 79 (fontified t) 79 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 84 (fontified t face font-lock-keyword-face) 84 85 (fontified t) 85 96 (fontified t face font-lock-type-face) 96 106 (fontified t face font-lock-type-face) 106 107 (fontified t face (rainbow-delimiters-depth-4-face)) 107 113 (fontified t) 113 117 (fontified t) 117 118 (fontified t face (rainbow-delimiters-depth-4-face)) 118 119 (fontified t) 119 123 (fontified t) 123 124 (fontified t face font-lock-keyword-face) 124 126 (fontified t face font-lock-keyword-face) 126 127 (fontified t) 127 130 (fontified t face font-lock-variable-name-face) 130 131 (fontified t face font-lock-variable-name-face) 131 136 (fontified t face font-lock-variable-name-face) 136 137 (fontified t) 137 138 (fontified t face font-lock-keyword-face) 138 139 (fontified t) 139 142 (fontified t face font-lock-keyword-face) 142 143 (fontified t) 143 157 (fontified t face font-lock-type-face) 157 158 (fontified t face (rainbow-delimiters-depth-4-face)) 158 160 (fontified t face font-lock-constant-face) 160 163 (fontified t face font-lock-constant-face) 163 164 (fontified t face (rainbow-delimiters-depth-5-face)) 164 166 (fontified t face font-lock-constant-face) 166 168 (fontified t face font-lock-constant-face) 168 178 (fontified t) 178 179 (fontified t face (rainbow-delimiters-depth-6-face)) 179 180 (fontified t face (rainbow-delimiters-depth-6-face)) 180 182 (fontified t) 182 183 (fontified t) 183 186 (fontified t) 186 187 (fontified t face (rainbow-delimiters-depth-6-face)) 187 188 (fontified t face (rainbow-delimiters-depth-6-face)) 188 189 (fontified t face (rainbow-delimiters-depth-5-face)) 189 202 (fontified t) 202 207 (fontified t) 207 208 (fontified t face (rainbow-delimiters-depth-4-face)) 208 209 (fontified t)) . 1744) (undo-tree-id1219 . -208) (undo-tree-id1220 . -119) (undo-tree-id1221 . -119) (undo-tree-id1222 . -119) (undo-tree-id1223 . -209) (undo-tree-id1224 . -209) (undo-tree-id1225 . -119) (undo-tree-id1226 . -119) (undo-tree-id1227 . -54) (undo-tree-id1228 . -54) (undo-tree-id1229 . -119) 1863 (t 25712 59415 691518 22000)) nil (25712 59431 735002 278000) 0 nil])
([nil nil ((#("      val actors = scala.collection.mutable.Map[String, Main.Member]()
" 0 6 (fontified t) 6 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t) 17 18 (fontified t face font-lock-keyword-face) 18 44 (fontified t) 44 47 (fontified t face font-lock-constant-face) 47 48 (fontified t face (rainbow-delimiters-depth-6-face)) 48 54 (fontified t face font-lock-constant-face) 54 56 (fontified t) 56 60 (fontified t face font-lock-constant-face) 60 61 (fontified t) 61 67 (fontified t face font-lock-constant-face) 67 68 (fontified t face (rainbow-delimiters-depth-6-face)) 68 69 (fontified t face (rainbow-delimiters-depth-6-face)) 69 70 (fontified t face (rainbow-delimiters-depth-6-face)) 70 71 (fontified t)) . 1818) (undo-tree-id1230 . -70) (undo-tree-id1231 . -71) (undo-tree-id1232 . -71) (undo-tree-id1233 . -58) (undo-tree-id1234 . -56) (undo-tree-id1235 . -67) (undo-tree-id1236 . -58) (undo-tree-id1237 . -58) (undo-tree-id1238 . -58) (undo-tree-id1239 . -58) (undo-tree-id1240 . -58) (undo-tree-id1241 . -58) (undo-tree-id1242 . -58) (undo-tree-id1243 . -58) (undo-tree-id1244 . -58) (undo-tree-id1245 . -58) (undo-tree-id1246 . -58) (undo-tree-id1247 . -58) (undo-tree-id1248 . -71) 1876 (t 25712 59431 738246 855000)) nil (25712 59487 307435 269000) 0 nil])
([nil nil ((#(" msg =>" 0 5 (fontified t) 5 7 (syntax-table (3) fontified t face font-lock-keyword-face)) . 1850) (undo-tree-id1275 . -6) (t 25712 59437 748270 228000)) nil (25712 59501 148436 765000) 0 nil] [nil nil ((1788 . 1795) (#("setup" 0 5 (fontified t)) . 1788) (undo-tree-id1258 . -4) (t 25712 59437 748270 228000)) ((1788 . 1793) (#("receive" 0 7 (fontified t)) . 1788)) (25712 59486 830298 426000) 0 nil] [nil nil ((1788 . 1802) (#("setup" 0 5 (fontified t)) . 1788) (undo-tree-id1249 . -4) (t 25712 59437 748270 228000)) ((1788 . 1793) (#("receiveMessage" 0 14 (fontified t)) . 1788) (undo-tree-id1250 . -13) (undo-tree-id1251 . -13)) (25712 59453 402231 427000) 0 nil])
([nil nil ((#("        var out = Behaviors.same[SystemCommand]
        msg match {
" 0 7 (fontified t) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face scala-font-lock:var-face) 15 16 (fontified t) 16 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 27 (fontified t face font-lock-constant-face) 27 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-7-face)) 33 34 (fontified t face font-lock-constant-face) 34 40 (fontified t face font-lock-constant-face) 40 46 (fontified t face font-lock-constant-face) 46 47 (fontified t face (rainbow-delimiters-depth-7-face)) 47 48 (fontified t) 48 52 (fontified t) 52 56 (fontified t) 56 60 (fontified t) 60 62 (fontified t face font-lock-keyword-face) 62 63 (fontified t face font-lock-keyword-face) 63 65 (fontified t face font-lock-keyword-face) 65 66 (fontified t) 66 67 (fontified t face (rainbow-delimiters-depth-7-face)) 67 68 (fontified t)) . 1851) (undo-tree-id1263 . -67) (undo-tree-id1264 . -67) (undo-tree-id1265 . -31) (undo-tree-id1266 . -67) (undo-tree-id1267 . -68) (undo-tree-id1268 . -68) (undo-tree-id1269 . -48) (undo-tree-id1270 . -48) (undo-tree-id1271 . -67) (undo-tree-id1272 . -67) (undo-tree-id1273 . -31) (undo-tree-id1274 . -67) 1918) nil (25712 59501 148433 64000) 0 nil])
([nil nil ((1813 . 1814)) ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . 1813) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . 1) (undo-tree-id1262 . -1)) (25712 59486 410053 785000) 0 nil])
nil
([nil nil ((#("            " 0 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 7 (fontified nil) 7 8 (fontified nil) 8 11 (fontified nil) 11 12 (fontified nil)) . -1901) (1891 . 1901) (#("          " 0 10 (fontified nil)) . -1859) (1851 . 1859) 1912) nil (25712 59501 148406 314000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . 1813) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . 1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1)) ((1813 . 1814)) (25712 59486 409569 711000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -2029) (2019 . 2029) (#("          " 0 10 (fontified nil)) . -1998) (1990 . 1998) 2040 (t 25712 59501 151852 945000)) nil (25712 59504 887681 761000) 0 nil])
nil
([nil nil ((493 . 499) (#("k" 0 1 (fontified t face font-lock-function-name-face)) . -493) (undo-tree-id1276 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -494) (undo-tree-id1277 . -1) (#("l" 0 1 (fontified t face font-lock-function-name-face)) . -495) (undo-tree-id1278 . -1) (#("l" 0 1 (fontified t face font-lock-function-name-face)) . -496) (undo-tree-id1279 . -1) 497 (489 . 497) (486 . 489) (t 25712 59504 898534 501000) 451) nil (25712 59566 362410 126000) 0 nil])
([nil nil ((502 . 512) (499 . 502) 498) nil (25712 59566 362389 871000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 534) (undo-tree-id1284 . -1) (undo-tree-id1285 . 1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . 1) (432 . 534) (#("  def spawn(system: ActorContext[SystemCommand]): Unit
  def stop()
  def kill()
  def config: String" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 18 (fontified t) 18 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 32 (fontified t face font-lock-type-face) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 46 (fontified t face font-lock-constant-face) 46 47 (fontified t face (rainbow-delimiters-depth-3-face)) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 49 (fontified t face font-lock-keyword-face) 49 50 (fontified t) 50 54 (fontified t face font-lock-type-face) 54 55 (fontified t) 55 57 (fontified t) 57 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t) 61 65 (fontified t face font-lock-function-name-face) 65 66 (fontified t face (rainbow-delimiters-depth-2-face)) 66 67 (fontified t face (rainbow-delimiters-depth-2-face)) 67 68 (fontified t) 68 70 (fontified t) 70 73 (fontified t face font-lock-keyword-face) 73 74 (fontified t) 74 78 (fontified t face font-lock-function-name-face) 78 79 (fontified t face (rainbow-delimiters-depth-2-face)) 79 80 (fontified t face (rainbow-delimiters-depth-2-face)) 80 81 (fontified t) 81 83 (fontified t) 83 86 (fontified t face font-lock-keyword-face) 86 87 (fontified t) 87 93 (fontified t face font-lock-function-name-face) 93 94 (fontified t face font-lock-keyword-face) 94 95 (fontified t) 95 101 (fontified t face font-lock-type-face)) . 432) (undo-tree-id1291 . -92) (undo-tree-id1292 . -11) (undo-tree-id1293 . 21) (undo-tree-id1294 . -81) (undo-tree-id1295 . -81) (undo-tree-id1296 . -55) (undo-tree-id1297 . -55) (undo-tree-id1298 . -68) (undo-tree-id1299 . -68) (undo-tree-id1300 . 21) (undo-tree-id1301 . -11) (undo-tree-id1302 . -92) (undo-tree-id1303 . -101) (undo-tree-id1304 . -11) (t 25712 59566 365447 692000)) nil (25712 59572 551569 624000) 0 nil])
([nil nil ((#("  def spawn(system: ActorContext[SystemCommand]): Unit
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 18 (fontified t) 18 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 32 (fontified t face font-lock-type-face) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 46 (fontified t face font-lock-constant-face) 46 47 (fontified t face (rainbow-delimiters-depth-3-face)) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 49 (fontified t face font-lock-keyword-face) 49 50 (fontified t) 50 54 (fontified t face font-lock-type-face) 54 55 (fontified t)) . 466) (undo-tree-id1280 . -54) (undo-tree-id1281 . -55) (undo-tree-id1282 . -55) (undo-tree-id1283 . -55)) nil (25712 59572 551551 46000) 0 nil])
([nil nil ((nil rear-nonsticky nil 480 . 481) (#("
" 0 1 (fontified nil)) . -533) (478 . 534) 466) nil (25712 59572 551532 399000) 0 nil])
([nil nil ((753 . 761) (752 . 753) (t 25712 59572 555472 742000) 728) nil (25712 61989 645562 541000) 0 nil])
([nil nil (760) nil (25712 61989 645559 747000) 0 nil])
([nil nil ((753 . 762)) nil (25712 61989 645558 280000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 761)) nil (25712 61989 645555 906000) 0 nil])
([nil nil ((788 . 800) (#("t" 0 1 (fontified t face font-lock-type-face)) . -788) (undo-tree-id1308 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -789) (undo-tree-id1309 . -1) 790 (788 . 790) (#("s" 0 1 (fontified t face font-lock-type-face)) . -788) (undo-tree-id1310 . -1) 789 (#("t" 0 1 (fontified t face font-lock-type-face)) . -789) (undo-tree-id1311 . -1) 790 (772 . 790) (#("T" 0 1 (fontified t face font-lock-type-face)) . -772) (undo-tree-id1312 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -773) (undo-tree-id1313 . -1) 774 (771 . 774) (769 . 771)) nil (25712 61989 645551 506000) 0 nil])
([nil nil ((738 . 741) (#("S" 0 1 (fontified t face font-lock-type-face)) . -738) (undo-tree-id1305 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -739) (undo-tree-id1306 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -740) (undo-tree-id1307 . -1) 741 (738 . 741) (729 . 738)) nil (25712 61989 645537 188000) 0 nil])
([nil nil ((1931 . 1932) (apply yas--snippet-revive 1920 1932 #s(yas--snippet nil nil #s(yas--exit 1931 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1931 nil) 6 nil nil nil nil)) (1920 . 1932) (#("withTimers($0)" 0 14 (fontified nil)) . 1920) (1920 . 1934) (#("withTimers[T](factory: TimerScheduler[T] => Behavior[T]): Behavior[T]" 0 69 (fontified nil)) . -1920) (1920 . 1989) (#("withT" 0 5 (fontified t)) . -1920) (undo-tree-id1332 . -5) 1925 (1910 . 1925) (#("c" 0 1 (fontified t)) . -1910) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (#("t" 0 1 (fontified t)) . -1911) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (#("x" 0 1 (fontified t)) . -1912) (undo-tree-id1337 . -1) (#("." 0 1 (fontified t)) . -1913) (undo-tree-id1338 . -1) 1914 (1910 . 1914) (1904 . 1910) (nil face font-lock-keyword-face 1903 . 1904) (nil fontified t 1903 . 1904) (1903 . 1904) (t 25712 61989 649344 667000) 1862) nil (25712 62029 803628 475000) 0 nil])
([nil nil ((1931 . 1941) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-6-face))) . -1931) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) 1932 (1930 . 1932) (#("( )" 0 1 (fontified t face (rainbow-delimiters-depth-6-face)) 1 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-6-face))) . 1930) (undo-tree-id1325 . -2) (undo-tree-id1326 . 1) (undo-tree-id1327 . -1) (undo-tree-id1328 . 3) (undo-tree-id1329 . -1) (undo-tree-id1330 . 1) (undo-tree-id1331 . -3)) nil (25712 62029 803618 627000) 0 nil])
([nil nil ((1940 . 1941) (#("+" 0 1 (fontified t)) . 1940) (1940 . 1941) (#("+" 0 1 (fontified t)) . 1940) (undo-tree-id1322 . -1)) nil (25712 62029 803607 592000) 0 nil])
([nil nil ((1941 . 1942)) nil (25712 62029 803604 240000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -2844) (undo-tree-id1318 . -8) (undo-tree-id1319 . -8) (undo-tree-id1320 . -8) (undo-tree-id1321 . -8) (2834 . 2844) (#("          " 0 10 (fontified nil)) . -2824) (2812 . 2824) (#("             " 0 13 (fontified nil face font-lock-comment-face)) . -2809) (2795 . 2809) (#("            " 0 12 (fontified nil face font-lock-comment-face)) . -2768) (2754 . 2768) (#("            " 0 2 (fontified nil face font-lock-comment-face) 2 12 (fontified nil face font-lock-comment-face)) . -2752) (2738 . 2752) (#("              " 0 14 (fontified nil face font-lock-comment-face)) . -2723) (2707 . 2723) (#("              " 0 14 (fontified nil face font-lock-comment-face)) . -2696) (2680 . 2696) (#("            " 0 12 (fontified nil face font-lock-comment-face)) . -2659) (2645 . 2659) (#("            " 0 12 (fontified nil face font-lock-comment-face)) . -2595) (2581 . 2595) (#("            " 0 12 (fontified nil)) . -2578) (2564 . 2578) (#("            " 0 7 (fontified nil) 7 12 (fontified nil)) . -2551) (2537 . 2551) (#("              " 0 14 (fontified nil)) . -2509) (2493 . 2509) (#("              " 0 14 (fontified nil)) . -2478) (2462 . 2478) (#("              " 0 14 (fontified nil)) . -2440) (2424 . 2440) (#("              " 0 14 (fontified nil)) . -2389) (2373 . 2389) (#("            " 0 8 (fontified nil) 8 12 (fontified nil)) . -2324) (2310 . 2324) (#("          " 0 10 (fontified nil)) . -2284) (2272 . 2284) (#("          " 0 10 (fontified nil)) . -2200) (2188 . 2200) (#("          " 0 10 (fontified nil)) . -2164) (2152 . 2164) (#("        " 0 8 (fontified nil)) . -2131) (2121 . 2131) (#("          " 0 10 (fontified nil)) . -2032) (2020 . 2032) (#("        " 0 8 (fontified nil)) . -1988) (1978 . 1988) (#("      " 0 6 (fontified nil)) . -1951) (1943 . 1951) 2799) nil (25712 62029 803596 976000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -2856) (undo-tree-id1316 . 8) (undo-tree-id1317 . -8) (2846 . 2856) 2854) nil (25712 62029 803582 380000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -2866) (undo-tree-id1315 . -2) (2868 . 2869) (2859 . 2868) 2854) nil (25712 62029 803577 560000) 0 nil])
([nil nil ((#("      " 0 6 (fontified nil)) . -2868) (undo-tree-id1314 . -6) (2860 . 2868) 2866) nil (25712 62029 803570 367000) 0 nil])
([nil nil ((1975 . 1979) (apply yas--snippet-revive 1958 1976 #s(yas--snippet nil nil #s(yas--exit 1975 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1975 nil) 7 nil nil nil nil)) (1958 . 1976) (#("startSingleTimer($0)" 0 20 (fontified nil)) . 1958) (1958 . 1978) (#("startSingleTimer(msg: SystemCommand, delay: FiniteDuration): Unit" 0 65 (fontified nil)) . -1958) (1958 . 2023) (1951 . 1958) (1943 . 1951) (nil face font-lock-keyword-face 1942 . 1943) (nil fontified t 1942 . 1943) (1942 . 1943) (t 25712 62029 809251 905000) 1916) nil (25712 62056 17452 145000) 0 nil])
([nil nil ((578 . 579) (557 . 578) (556 . 557) (t 25712 62056 22532 627000) 539) nil (25712 62066 718388 863000) 0 nil])
([nil nil ((794 . 796) (736 . 738) (661 . 663) (580 . 582) 809) nil (25712 62066 718385 162000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -844) (undo-tree-id1339 . -2) (undo-tree-id1340 . -2) (undo-tree-id1341 . -2) (undo-tree-id1342 . -2) (846 . 847) (843 . 846) 815) nil (25712 62066 718377 619000) 0 nil])
([nil nil ((2014 . 2022) (#("c" 0 1 (fontified t face font-lock-constant-face)) . -2014) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) 2015 (2008 . 2015) (#("O" 0 1 (fontified t face font-lock-constant-face)) . -2008) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (#("b" 0 1 (fontified t face font-lock-constant-face)) . -2009) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (#("j" 0 1 (fontified t face font-lock-constant-face)) . -2010) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -2011) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#("c" 0 1 (fontified t face font-lock-constant-face)) . -2012) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -2013) (undo-tree-id1397 . -1) (#("." 0 1 (fontified t)) . -2014) (undo-tree-id1398 . -1) 2015 (2008 . 2015) (#("o" 0 1 (fontified t)) . -2008) (undo-tree-id1399 . -1) 2009 (2008 . 2009) (t 25712 62066 722512 867000)) nil (25712 62076 697735 43000) 0 nil])
([nil nil ((#("          out
" 0 10 (fontified t) 10 13 (fontified t) 13 14 (fontified t)) . 2931) (undo-tree-id1400 . -13) (undo-tree-id1401 . -14) (undo-tree-id1402 . -14) (undo-tree-id1403 . -12) (undo-tree-id1404 . -12) (undo-tree-id1405 . -12) (undo-tree-id1406 . -12) (undo-tree-id1407 . -12) (undo-tree-id1408 . -12) (undo-tree-id1409 . -12) (undo-tree-id1410 . -12) (undo-tree-id1411 . -12) (undo-tree-id1412 . -12) (undo-tree-id1413 . -12) (undo-tree-id1414 . -12) (undo-tree-id1415 . -12) (undo-tree-id1416 . -12) (undo-tree-id1417 . -14) 2943 (t 25712 62076 702495 303000)) nil (25712 62087 948596 301000) 0 nil])
([nil nil ((#("          }
" 0 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-7-face)) 11 12 (fontified t)) . 2919) (undo-tree-id1418 . -11) (undo-tree-id1419 . -12) (undo-tree-id1420 . -12) (undo-tree-id1421 . -10) (undo-tree-id1422 . -10) (undo-tree-id1423 . -11) (undo-tree-id1424 . 2) (undo-tree-id1425 . -11) (undo-tree-id1426 . -10) (undo-tree-id1427 . -10) (undo-tree-id1428 . -10) (undo-tree-id1429 . -10) (undo-tree-id1430 . -10) (undo-tree-id1431 . -10) (undo-tree-id1432 . -10) (undo-tree-id1433 . -12) 2929 (t 25712 62087 955809 816000)) nil (25712 62097 417874 739000) 0 nil])
([nil nil ((2028 . 2046) (2026 . 2028) (t 25712 62097 422461 444000)) nil (25712 62116 341161 895000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2044)) nil (25712 62116 341154 352000) 0 nil])
([nil nil ((2144 . 2158) (2131 . 2144) (2119 . 2131) (#(" " 0 1 (fontified t)) . -2119) (undo-tree-id1434 . -1) (#("=" 0 1 (fontified t face font-lock-keyword-face)) . -2120) (undo-tree-id1435 . -1) 2121 (2119 . 2121) (apply yas--snippet-revive 2111 2119 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (2111 . 2119) (#("Shutdown" 0 8 (fontified nil)) . 2111) (2111 . 2119) (#("Shutdown artes.SystemCommand" 0 28 (fontified nil)) . -2111) (2111 . 2139) (2110 . 2111) (apply yas--snippet-revive 2097 2110 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (2097 . 2110) (#("SystemCommand" 0 13 (fontified nil)) . 2097) (2097 . 2110) (#("SystemC" 0 7 (fontified nil)) . 2097) (2097 . 2104) (#("SystemCommand artes" 0 19 (fontified nil)) . -2097) (2097 . 2116) (#("SystemC" 0 7 (fontified t face font-lock-constant-face)) . -2097) (undo-tree-id1436 . -7) 2104 (2092 . 2104) (2081 . 2092) (t 25712 62116 345766 829000) 2080) nil (25712 62137 602557 470000) 0 nil])
([nil nil ((#("class Launcher {
" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 14 (fontified t face font-lock-type-face) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 17 (fontified t)) . 1755) (undo-tree-id1537 . -16) (undo-tree-id1538 . -17) (undo-tree-id1539 . -17) (undo-tree-id1540 . -15) (undo-tree-id1541 . 2) (undo-tree-id1542 . -16) 1770 (t 25712 62137 609072 14000)) nil (25712 62179 453589 197000) 0 nil])
([nil nil ((#("  ActorSystem[Nothing](Behaviors.setup[Nothing] { j =>
    val cluster = Cluster(j.system)

    val spawn = j.spawnAnonymous(Behaviors.setup[SystemCommand] { ctx =>
      Behaviors.withTimers { timers =>
        timers.startSingleTimer(SystemCommand.Kill(), timeout.seconds)
        Behaviors.receiveMessage {
          case SystemCommand.Shutdown(timeout) =>
            Behaviors.same
          case JoinCluster(host, port) =>
            cluster.manager ! Join(akka.actor.Address(\"akka\", \"lambda\", host.some, port.toInt.some))
          case SystemDown() =>
            out = Behaviors.stopped
            case AddDependency(name, jar) => dependencyLoader.addLibrary(name, jar)
            case SpawnActor(actor) =>
              val j = new DynamicClassLoader(actor, libLoader)
                .loadClass(s\"artes.actors.$actor\")
                .getConstructors()(0)
                .newInstance()
                .asInstanceOf[DynamicActor]
              j.spawn(ctx)
              /*
              val ref = ctx.spawnAnonymous(j.spawner(ctx.self))
              val member = Member(
                ref = ref,
                kind = j.kind,
              )
              actors += j.name -> member
              */
            case _ =>
        }
      }
    })
    dependencyLoader.add(Main.lib.resolve(\"Timer.jar\").toFile.toURI().toURL())
    spawn ! JoinCluster(Main.host, \"9000\")
    spawn ! SpawnActor(Main.mainActor)
    Behaviors.empty[Nothing]
  }, \"lambda\", Main.config)
" 0 2 (fontified t) 2 13 (fontified t face font-lock-constant-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 21 (fontified t face font-lock-constant-face) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 32 (fontified t face font-lock-constant-face) 32 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 46 (fontified t face font-lock-constant-face) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 52 (fontified t) 52 54 (fontified t syntax-table (3) face font-lock-keyword-face) 54 55 (fontified t) 55 59 (fontified t) 59 62 (fontified t face font-lock-keyword-face) 62 63 (fontified t) 63 70 (fontified t face font-lock-variable-name-face) 70 71 (fontified t) 71 72 (fontified t face font-lock-keyword-face) 72 73 (fontified t) 73 80 (fontified t face font-lock-constant-face) 80 81 (fontified t face (rainbow-delimiters-depth-3-face)) 81 89 (fontified t) 89 90 (fontified t face (rainbow-delimiters-depth-3-face)) 90 91 (fontified t) 91 92 (fontified t) 92 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 104 (fontified t face font-lock-variable-name-face) 104 105 (fontified t face font-lock-variable-name-face) 105 106 (fontified t) 106 107 (fontified t face font-lock-keyword-face) 107 124 (fontified t) 124 125 (fontified t face (rainbow-delimiters-depth-3-face)) 125 134 (fontified t face font-lock-constant-face) 134 135 (fontified t) 135 140 (fontified t) 140 141 (fontified t face (rainbow-delimiters-depth-4-face)) 141 154 (fontified t face font-lock-constant-face) 154 155 (fontified t face (rainbow-delimiters-depth-4-face)) 155 156 (fontified t) 156 157 (fontified t face (rainbow-delimiters-depth-4-face)) 157 158 (fontified t) 158 162 (fontified t) 162 164 (syntax-table (3) fontified t face font-lock-keyword-face) 164 165 (fontified t) 165 171 (fontified t) 171 180 (fontified t face font-lock-constant-face) 180 181 (fontified t) 181 192 (fontified t) 192 193 (fontified t face (rainbow-delimiters-depth-5-face)) 193 201 (fontified t) 201 203 (syntax-table (3) fontified t face font-lock-keyword-face) 203 204 (fontified t) 204 219 (fontified t) 219 235 (fontified t) 235 236 (fontified t face (rainbow-delimiters-depth-6-face)) 236 249 (fontified t face font-lock-constant-face) 249 250 (fontified t) 250 254 (fontified t face font-lock-constant-face) 254 255 (fontified t face (rainbow-delimiters-depth-7-face)) 255 256 (fontified t face (rainbow-delimiters-depth-7-face)) 256 273 (fontified t) 273 274 (fontified t face (rainbow-delimiters-depth-6-face)) 274 275 (fontified t) 275 283 (fontified t) 283 292 (fontified t face font-lock-constant-face) 292 301 (fontified t) 301 308 (fontified t) 308 309 (fontified t face (rainbow-delimiters-depth-6-face)) 309 310 (fontified t) 310 320 (fontified t) 320 324 (fontified t face font-lock-keyword-face) 324 325 (fontified t) 325 338 (fontified t face font-lock-type-face) 338 339 (fontified t face font-lock-type-face) 339 347 (fontified t face font-lock-type-face) 347 348 (fontified t face (rainbow-delimiters-depth-7-face)) 348 355 (fontified t face font-lock-variable-name-face) 355 356 (fontified t face (rainbow-delimiters-depth-7-face)) 356 357 (fontified t) 357 359 (syntax-table (3) fontified t face font-lock-keyword-face) 359 360 (fontified t) 360 372 (fontified t) 372 381 (fontified t face font-lock-constant-face) 381 386 (fontified t) 386 387 (fontified t) 387 397 (fontified t) 397 401 (fontified t face font-lock-keyword-face) 401 402 (fontified t) 402 410 (fontified t face font-lock-type-face) 410 412 (fontified t face font-lock-type-face) 412 413 (fontified t face font-lock-type-face) 413 414 (fontified t face (rainbow-delimiters-depth-7-face)) 414 416 (fontified t face font-lock-variable-name-face) 416 417 (fontified t face font-lock-variable-name-face) 417 418 (fontified t face font-lock-variable-name-face) 418 420 (fontified t) 420 424 (fontified t face font-lock-variable-name-face) 424 425 (fontified t face (rainbow-delimiters-depth-7-face)) 425 426 (fontified t) 426 428 (syntax-table (3) fontified t face font-lock-keyword-face) 428 441 (fontified t) 441 442 (fontified t) 442 443 (fontified t) 443 445 (fontified t) 445 446 (fontified t) 446 451 (fontified t) 451 459 (fontified t) 459 463 (fontified t face font-lock-constant-face) 463 464 (fontified t face (rainbow-delimiters-depth-7-face)) 464 475 (fontified t) 475 482 (fontified t face font-lock-constant-face) 482 483 (fontified t face (rainbow-delimiters-depth-8-face)) 483 484 (syntax-table (7) fontified t face font-lock-string-face) 484 488 (fontified t face font-lock-string-face) 488 489 (syntax-table (7) fontified t face font-lock-string-face) 489 491 (fontified t) 491 492 (syntax-table (7) fontified t face font-lock-string-face) 492 498 (fontified t face font-lock-string-face) 498 499 (syntax-table (7) fontified t face font-lock-string-face) 499 527 (fontified t) 527 528 (fontified t face (rainbow-delimiters-depth-8-face)) 528 529 (fontified t face (rainbow-delimiters-depth-7-face)) 529 540 (fontified t) 540 544 (fontified t face font-lock-keyword-face) 544 545 (fontified t) 545 555 (fontified t face font-lock-type-face) 555 556 (fontified t face (rainbow-delimiters-depth-7-face)) 556 557 (fontified t face (rainbow-delimiters-depth-7-face)) 557 558 (fontified t) 558 560 (syntax-table (3) fontified t face font-lock-keyword-face) 560 573 (fontified t) 573 577 (fontified t) 577 578 (fontified t face font-lock-keyword-face) 578 579 (fontified t) 579 588 (fontified t face font-lock-constant-face) 588 609 (fontified t) 609 613 (fontified t face font-lock-keyword-face) 613 614 (fontified t) 614 627 (fontified t face font-lock-type-face) 627 628 (fontified t face (rainbow-delimiters-depth-7-face)) 628 632 (fontified t face font-lock-variable-name-face) 632 634 (fontified t) 634 637 (fontified t face font-lock-variable-name-face) 637 638 (fontified t face (rainbow-delimiters-depth-7-face)) 638 639 (fontified t) 639 641 (syntax-table (3) fontified t face font-lock-keyword-face) 641 669 (fontified t) 669 670 (fontified t face (rainbow-delimiters-depth-7-face)) 670 679 (fontified t) 679 680 (fontified t face (rainbow-delimiters-depth-7-face)) 680 693 (fontified t) 693 697 (fontified t face font-lock-keyword-face) 697 698 (fontified t) 698 708 (fontified t face font-lock-type-face) 708 709 (fontified t face (rainbow-delimiters-depth-7-face)) 709 714 (fontified t face font-lock-variable-name-face) 714 715 (fontified t face (rainbow-delimiters-depth-7-face)) 715 716 (fontified t) 716 718 (syntax-table (3) fontified t face font-lock-keyword-face) 718 733 (fontified t) 733 736 (fontified t face font-lock-keyword-face) 736 737 (fontified t) 737 738 (fontified t face font-lock-variable-name-face) 738 739 (fontified t) 739 740 (fontified t face font-lock-keyword-face) 740 741 (fontified t) 741 744 (fontified t face font-lock-keyword-face) 744 745 (fontified t) 745 763 (fontified t face font-lock-type-face) 763 764 (fontified t face (rainbow-delimiters-depth-7-face)) 764 777 (fontified t) 777 780 (fontified t) 780 781 (fontified t face (rainbow-delimiters-depth-7-face)) 781 798 (fontified t) 798 808 (fontified t) 808 809 (fontified t face (rainbow-delimiters-depth-7-face)) 809 810 (fontified t) 810 811 (syntax-table (7) fontified t face font-lock-string-face) 811 824 (fontified t face font-lock-string-face) 824 825 (syntax-table (1) fontified t face font-lock-variable-name-face) 825 830 (fontified t face font-lock-variable-name-face) 830 831 (syntax-table (7) fontified t face font-lock-string-face) 831 832 (fontified t face (rainbow-delimiters-depth-7-face)) 832 849 (fontified t) 849 865 (fontified t) 865 866 (fontified t face (rainbow-delimiters-depth-7-face)) 866 867 (fontified t face (rainbow-delimiters-depth-7-face)) 867 868 (fontified t face (rainbow-delimiters-depth-7-face)) 868 869 (fontified t face font-lock-constant-face) 869 870 (fontified t face (rainbow-delimiters-depth-7-face)) 870 887 (fontified t) 887 899 (fontified t) 899 900 (fontified t face (rainbow-delimiters-depth-7-face)) 900 901 (fontified t face (rainbow-delimiters-depth-7-face)) 901 918 (fontified t) 918 931 (fontified t) 931 932 (fontified t face (rainbow-delimiters-depth-7-face)) 932 937 (fontified t face font-lock-constant-face) 937 938 (fontified t face font-lock-constant-face) 938 944 (fontified t face font-lock-constant-face) 944 945 (fontified t face (rainbow-delimiters-depth-7-face)) 945 960 (fontified t) 960 967 (fontified t) 967 968 (fontified t face (rainbow-delimiters-depth-7-face)) 968 971 (fontified t) 971 972 (fontified t face (rainbow-delimiters-depth-7-face)) 972 987 (fontified t) 987 989 (fontified t face font-lock-comment-delimiter-face) 989 1004 (fontified t face font-lock-comment-face) 1004 1012 (fontified t face font-lock-comment-face) 1012 1032 (fontified t face font-lock-comment-face) 1032 1036 (fontified t face font-lock-comment-face) 1036 1068 (fontified t face font-lock-comment-face) 1068 1081 (fontified t face font-lock-comment-face) 1081 1105 (fontified t face font-lock-comment-face) 1105 1132 (fontified t face font-lock-comment-face) 1132 1161 (fontified t face font-lock-comment-face) 1161 1177 (fontified t face font-lock-comment-face) 1177 1178 (fontified t face font-lock-comment-face) 1178 1184 (fontified t face font-lock-comment-face) 1184 1186 (syntax-table (3) fontified t face font-lock-comment-face) 1186 1194 (fontified t face font-lock-comment-face) 1194 1196 (syntax-table (3) fontified t face font-lock-comment-face) 1196 1218 (fontified t face font-lock-comment-face) 1218 1220 (fontified t face font-lock-comment-face) 1220 1233 (fontified t) 1233 1237 (fontified t face font-lock-keyword-face) 1237 1238 (fontified t) 1238 1239 (syntax-table (3) fontified t face font-lock-keyword-face) 1239 1240 (fontified t) 1240 1242 (syntax-table (3) fontified t face font-lock-keyword-face) 1242 1243 (fontified t) 1243 1251 (fontified t) 1251 1252 (fontified t face (rainbow-delimiters-depth-6-face)) 1252 1253 (fontified t) 1253 1259 (fontified t) 1259 1260 (fontified t face (rainbow-delimiters-depth-5-face)) 1260 1265 (fontified t) 1265 1266 (fontified t face (rainbow-delimiters-depth-4-face)) 1266 1267 (fontified t face (rainbow-delimiters-depth-3-face)) 1267 1292 (fontified t) 1292 1293 (fontified t face (rainbow-delimiters-depth-3-face)) 1293 1297 (fontified t face font-lock-constant-face) 1297 1309 (fontified t) 1309 1310 (fontified t face (rainbow-delimiters-depth-4-face)) 1310 1311 (syntax-table (7) fontified t face font-lock-string-face) 1311 1317 (fontified t face font-lock-string-face) 1317 1318 (fontified t face font-lock-string-face) 1318 1320 (fontified t face font-lock-string-face) 1320 1321 (syntax-table (7) fontified t face font-lock-string-face) 1321 1322 (fontified t face (rainbow-delimiters-depth-4-face)) 1322 1335 (fontified t) 1335 1336 (fontified t face (rainbow-delimiters-depth-4-face)) 1336 1337 (fontified t face (rainbow-delimiters-depth-4-face)) 1337 1343 (fontified t) 1343 1344 (fontified t face (rainbow-delimiters-depth-4-face)) 1344 1345 (fontified t face (rainbow-delimiters-depth-4-face)) 1345 1346 (fontified t face (rainbow-delimiters-depth-3-face)) 1346 1347 (fontified t) 1347 1359 (fontified t) 1359 1370 (fontified t face font-lock-constant-face) 1370 1371 (fontified t face (rainbow-delimiters-depth-3-face)) 1371 1375 (fontified t face font-lock-constant-face) 1375 1382 (fontified t) 1382 1383 (syntax-table (7) fontified t face font-lock-string-face) 1383 1387 (fontified t face font-lock-string-face) 1387 1388 (syntax-table (7) fontified t face font-lock-string-face) 1388 1389 (fontified t face (rainbow-delimiters-depth-3-face)) 1389 1402 (fontified t) 1402 1412 (fontified t face font-lock-constant-face) 1412 1413 (fontified t face (rainbow-delimiters-depth-3-face)) 1413 1417 (fontified t face font-lock-constant-face) 1417 1427 (fontified t) 1427 1428 (fontified t face (rainbow-delimiters-depth-3-face)) 1428 1433 (fontified t) 1433 1442 (fontified t face font-lock-constant-face) 1442 1444 (fontified t) 1444 1448 (fontified t) 1448 1449 (fontified t face (rainbow-delimiters-depth-3-face)) 1449 1456 (fontified t face font-lock-constant-face) 1456 1457 (fontified t face (rainbow-delimiters-depth-3-face)) 1457 1458 (fontified t) 1458 1460 (fontified t) 1460 1461 (fontified t face (rainbow-delimiters-depth-2-face)) 1461 1463 (fontified t) 1463 1464 (syntax-table (7) fontified t face font-lock-string-face) 1464 1470 (fontified t face font-lock-string-face) 1470 1471 (syntax-table (7) fontified t face font-lock-string-face) 1471 1473 (fontified t) 1473 1477 (fontified t face font-lock-constant-face) 1477 1484 (fontified t) 1484 1485 (fontified t face (rainbow-delimiters-depth-1-face)) 1485 1486 (fontified t)) . 1755) (undo-tree-id1463 . -1116) (undo-tree-id1464 . -1116) (undo-tree-id1465 . -1147) (undo-tree-id1466 . -1147) (undo-tree-id1467 . -1163) (undo-tree-id1468 . -1163) (undo-tree-id1469 . -1204) (undo-tree-id1470 . -1204) (undo-tree-id1471 . -1485) (undo-tree-id1472 . -1460) (undo-tree-id1473 . -15) (undo-tree-id1474 . -1460) (undo-tree-id1475 . 1100) (undo-tree-id1476 . -946) (undo-tree-id1477 . -946) (undo-tree-id1478 . -1221) (undo-tree-id1479 . -1221) (undo-tree-id1480 . -530) (undo-tree-id1481 . -530) (undo-tree-id1482 . -580) (undo-tree-id1483 . -551) (undo-tree-id1484 . -551) (undo-tree-id1485 . -429) (undo-tree-id1486 . -429) (undo-tree-id1487 . -387) (undo-tree-id1488 . -387) (undo-tree-id1489 . -1458) (undo-tree-id1490 . -1458) (undo-tree-id1491 . -1486) (undo-tree-id1492 . -1486) (undo-tree-id1493 . -1253) (undo-tree-id1494 . -1253) (undo-tree-id1495 . -681) (undo-tree-id1496 . -681) (undo-tree-id1497 . -871) (undo-tree-id1498 . -871) (undo-tree-id1499 . -597) (undo-tree-id1500 . -597) (undo-tree-id1501 . -1243) (undo-tree-id1502 . -1243) (undo-tree-id1503 . -1261) (undo-tree-id1504 . -1261) (undo-tree-id1505 . -1268) (undo-tree-id1506 . -1268) (undo-tree-id1507 . -1347) (undo-tree-id1508 . -1347) (undo-tree-id1509 . -1390) (undo-tree-id1510 . -1390) (undo-tree-id1511 . -902) (undo-tree-id1512 . -902) (undo-tree-id1513 . -833) (undo-tree-id1514 . -833) (undo-tree-id1515 . -782) (undo-tree-id1516 . -782) (undo-tree-id1517 . -719) (undo-tree-id1518 . -719) (undo-tree-id1519 . -308) (undo-tree-id1520 . -561) (undo-tree-id1521 . -561) (undo-tree-id1522 . -1429) (undo-tree-id1523 . -1429) (undo-tree-id1524 . -257) (undo-tree-id1525 . 1100) (undo-tree-id1526 . -387) (undo-tree-id1527 . -1460) (undo-tree-id1528 . -1460) (undo-tree-id1529 . -15) (undo-tree-id1530 . -1460) (undo-tree-id1531 . -54) (undo-tree-id1532 . 26) (undo-tree-id1533 . -1461) (undo-tree-id1534 . 1438) (undo-tree-id1535 . -49) (undo-tree-id1536 . -48) 3215) nil (25712 62179 453580 955000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1741 . 1742) (#("
" 0 1 (fontified nil)) . -3225) (1740 . 3226) (nil face font-lock-string-face 1739 . 1740) (nil fontified t 1739 . 1740) (1739 . 1740) 1729) nil (25712 62179 453529 63000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -3274) (undo-tree-id1446 . -2) (undo-tree-id1447 . -2) (undo-tree-id1448 . -2) (undo-tree-id1449 . -2) (undo-tree-id1450 . -2) (undo-tree-id1451 . -2) (undo-tree-id1452 . -2) (undo-tree-id1453 . -2) (undo-tree-id1454 . -2) (3270 . 3274) (#("    " 0 4 (fontified nil)) . -3245) (3239 . 3245) (#("    " 0 4 (fontified nil)) . -3204) (3198 . 3204) (#("    " 0 4 (fontified nil)) . -3159) (3153 . 3159) (#("    " 0 4 (fontified nil)) . -3078) (undo-tree-id1455 . -4) (3072 . 3078) (#("    " 0 4 (fontified nil)) . -3069) (3063 . 3069) (#("      " 0 6 (fontified nil)) . -3061) (3053 . 3061) (#("        " 0 8 (fontified nil)) . -3051) (3041 . 3051) (#("            " 0 12 (fontified nil)) . -3031) (3017 . 3031) (#("              " 0 14 (fontified nil face font-lock-comment-face)) . -3014) (2998 . 3014) (#("              " 0 14 (fontified nil face font-lock-comment-face)) . -2971) (2955 . 2971) (#("              " 0 14 (fontified nil face font-lock-comment-face)) . -2953) (2937 . 2953) (#("                " 0 16 (fontified nil face font-lock-comment-face)) . -2922) (2904 . 2922) (#("                " 0 16 (fontified nil face font-lock-comment-face)) . -2893) (2875 . 2893) (#("              " 0 14 (fontified nil face font-lock-comment-face)) . -2854) (2838 . 2854) (#("              " 0 14 (fontified nil face font-lock-comment-face)) . -2788) (2772 . 2788) (#("              " 0 14 (fontified nil)) . -2769) (2753 . 2769) (#("              " 0 14 (fontified nil)) . -2740) (2724 . 2740) (#("                " 0 16 (fontified nil)) . -2696) (2678 . 2696) (#("                " 0 16 (fontified nil)) . -2663) (2645 . 2663) (#("                " 0 16 (fontified nil)) . -2623) (2605 . 2623) (#("                " 0 16 (fontified nil)) . -2570) (2552 . 2570) (#("              " 0 14 (fontified nil)) . -2503) (2487 . 2503) (#("            " 0 12 (fontified nil)) . -2461) (2447 . 2461) (#("            " 0 12 (fontified nil)) . -2375) (2361 . 2375) (#("            " 0 12 (fontified nil)) . -2337) (undo-tree-id1456 . -12) (2323 . 2337) (#("          " 0 10 (fontified nil)) . -2302) (2290 . 2302) (#("            " 0 12 (fontified nil)) . -2201) (undo-tree-id1457 . -12) (2187 . 2201) (#("          " 0 10 (fontified nil)) . -2155) (2143 . 2155) (#("            " 0 12 (fontified nil)) . -2128) (2114 . 2128) (#("          " 0 10 (fontified nil)) . -2074) (2062 . 2074) (#("        " 0 8 (fontified nil)) . -2035) (2025 . 2035) (#("        " 0 8 (fontified nil)) . -1962) (1952 . 1962) (#("      " 0 6 (fontified nil)) . -1919) (1911 . 1919) (#("    " 0 4 (fontified nil)) . -1842) (1836 . 1842) (#("    " 0 4 (fontified nil)) . -1803) (1797 . 1803) (#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . -1744) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -2) (1740 . 1744) 3200) nil (25712 62179 453519 495000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -3348) (undo-tree-id1438 . -4) (undo-tree-id1439 . -4) (undo-tree-id1440 . -4) (undo-tree-id1441 . -4) (3342 . 3348) (#("      " 0 6 (fontified nil)) . -3317) (3309 . 3317) (#("      " 0 6 (fontified nil)) . -3274) (3266 . 3274) (#("      " 0 6 (fontified nil)) . -3227) (3219 . 3227) (#("      " 0 6 (fontified nil)) . -3144) (3136 . 3144) (#("      " 0 6 (fontified nil)) . -3133) (3125 . 3133) (#("        " 0 8 (fontified nil)) . -3123) (3113 . 3123) (#("          " 0 10 (fontified nil)) . -3111) (3099 . 3111) (#("              " 0 14 (fontified nil)) . -3089) (3073 . 3089) (#("                " 0 16 (fontified nil face font-lock-comment-face)) . -3070) (3052 . 3070) (#("                " 0 16 (fontified nil face font-lock-comment-face)) . -3025) (3007 . 3025) (#("                " 0 16 (fontified nil face font-lock-comment-face)) . -3005) (2987 . 3005) (#("                  " 0 18 (fontified nil face font-lock-comment-face)) . -2972) (2952 . 2972) (#("                  " 0 18 (fontified nil face font-lock-comment-face)) . -2941) (2921 . 2941) (#("                " 0 16 (fontified nil face font-lock-comment-face)) . -2900) (2882 . 2900) (#("                " 0 16 (fontified nil face font-lock-comment-face)) . -2832) (2814 . 2832) (#("                " 0 16 (fontified nil)) . -2811) (2793 . 2811) (#("                " 0 16 (fontified nil)) . -2780) (2762 . 2780) (#("                  " 0 18 (fontified nil)) . -2734) (2714 . 2734) (#("                  " 0 18 (fontified nil)) . -2699) (2679 . 2699) (#("                  " 0 18 (fontified nil)) . -2657) (2637 . 2657) (#("                  " 0 18 (fontified nil)) . -2602) (2582 . 2602) (#("                " 0 16 (fontified nil)) . -2533) (2515 . 2533) (#("              " 0 14 (fontified nil)) . -2489) (2473 . 2489) (#("              " 0 14 (fontified nil)) . -2401) (2385 . 2401) (#("              " 0 14 (fontified nil)) . -2361) (2345 . 2361) (#("            " 0 12 (fontified nil)) . -2324) (2310 . 2324) (#("              " 0 14 (fontified nil)) . -2221) (2205 . 2221) (#("            " 0 12 (fontified nil)) . -2173) (2159 . 2173) (#("              " 0 14 (fontified nil)) . -2144) (2128 . 2144) (#("            " 0 12 (fontified nil)) . -2088) (2074 . 2088) (#("          " 0 10 (fontified nil)) . -2047) (2035 . 2047) (#("          " 0 10 (fontified nil)) . -1972) (1960 . 1972) (#("        " 0 8 (fontified nil)) . -1927) (1917 . 1927) (#("      " 0 6 (fontified nil)) . -1848) (1840 . 1848) (#("      " 0 6 (fontified nil)) . -1807) (1799 . 1807) (#("    " 0 2 (fontified nil) 2 4 (fontified nil)) . -1746) (undo-tree-id1442 . -2) (undo-tree-id1443 . -4) (undo-tree-id1444 . -2) (undo-tree-id1445 . -4) (1740 . 1746) 3270) nil (25712 62179 453490 860000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1740) (undo-tree-id1437 . -4) 1744 (1740 . 1744) (nil face font-lock-string-face 1739 . 1740) (nil fontified t 1739 . 1740) (1739 . 1740) 1729) nil (25712 62179 453467 672000) 0 nil])
([nil nil ((#("}
" 0 1 (fontified t face (rainbow-delimiters-unmatched-face)) 1 2 (fontified t)) . 3390) (undo-tree-id1544 . -1) (undo-tree-id1545 . -2) (undo-tree-id1546 . -2) (undo-tree-id1547 . 2) (undo-tree-id1548 . 2) (undo-tree-id1549 . -1) (t 25712 62179 459026 156000)) nil (25712 62185 595358 301000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3390) (undo-tree-id1543 . 1)) nil (25712 62185 595345 590000) 0 nil])
([nil nil ((#("            timers.startSingleTimer(SystemCommand.Kill(), timeout.seconds)
" 0 12 (fontified t) 12 19 (fontified t) 19 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-8-face)) 36 49 (fontified t face font-lock-constant-face) 49 50 (fontified t) 50 54 (fontified t face font-lock-constant-face) 54 55 (fontified t face (rainbow-delimiters-depth-9-face)) 55 56 (fontified t face (rainbow-delimiters-depth-9-face)) 56 73 (fontified t) 73 74 (fontified t face (rainbow-delimiters-depth-8-face)) 74 75 (fontified t)) . 1961) (undo-tree-id1554 . -74) (undo-tree-id1555 . -75) (undo-tree-id1556 . -75) (undo-tree-id1557 . -48) (undo-tree-id1558 . -48) 2009 (t 25712 62185 602353 776000)) nil (25712 62195 672480 306000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2065 . 2066) (#("
" 0 1 (fontified nil)) . -2128) (2054 . 2129) (nil face font-lock-keyword-face 2053 . 2054) (nil fontified t 2053 . 2054) (2053 . 2054) 2037) nil (25712 62195 672472 554000) 0 nil])
([nil nil ((#("            " 0 11 (fontified nil) 11 12 (fontified nil rear-nonsticky t)) . -2068) (undo-tree-id1552 . -12) (undo-tree-id1553 . -12) (2054 . 2068) 2066) nil (25712 62195 672468 712000) 0 nil])
([nil nil ((#("              " 0 14 (fontified nil)) . -2070) (undo-tree-id1550 . -14) (undo-tree-id1551 . -12) (2054 . 2070) 2066) nil (25712 62195 672459 773000) 0 nil])
([nil nil ((2070 . 2077) (2054 . 2070) (nil face font-lock-keyword-face 2053 . 2054) (nil fontified t 2053 . 2054) (2053 . 2054) (t 25712 62195 679011 614000) 2012) nil (25712 62247 220326 254000) 0 nil])
([nil nil ((#("object Empty extends App {
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 17 (fontified t face font-lock-keyword-face) 17 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 24 (fontified t face font-lock-type-face) 24 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t)) . 3418) (undo-tree-id1568 . -26) (undo-tree-id1569 . -27) (undo-tree-id1570 . -2) (undo-tree-id1571 . -2) (undo-tree-id1572 . -27) (undo-tree-id1573 . -27) 3420) nil (25712 62247 220322 831000) 0 nil])
([nil nil ((3423 . 3434) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -3423) (undo-tree-id1567 . -1) 3424 (3418 . 3424) (3417 . 3418) 3417) nil (25712 62247 220315 568000) 0 nil])
([nil nil ((3688 . 3695) (#("Actor" 0 5 (fontified t face font-lock-constant-face)) . 3688) (undo-tree-id1561 . -4) (undo-tree-id1562 . -5) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -5) (undo-tree-id1566 . -5)) nil (25712 62247 220310 400000) 0 nil])
([nil nil ((#(".show" 0 5 (fontified t)) . 3696) (undo-tree-id1559 . -4) (undo-tree-id1560 . -5)) nil (25712 62247 220297 549000) 0 nil])
([nil nil ((3637 . 3641) (#("d" 0 1 (fontified t face font-lock-constant-face)) . -3637) (undo-tree-id1580 . -1) (#("s" 0 1 (fontified t face font-lock-constant-face)) . -3638) (undo-tree-id1581 . -1) 3639 (3623 . 3639) (#(":" 0 1 (fontified t face font-lock-keyword-face)) . -3623) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) 3624 (3615 . 3624) (3612 . 3615) (t 25712 62247 225643 227000) 3611) nil (25712 62257 803906 374000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-constant-face)) . 3637) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1)) nil (25712 62257 803895 339000) 0 nil])
([nil nil ((3764 . 3772) (#("o" 0 1 (fontified t)) . -3764) (undo-tree-id1584 . -1) (#("u" 0 1 (fontified t)) . -3765) (undo-tree-id1585 . -1) (#("t" 0 1 (fontified t)) . -3766) (undo-tree-id1586 . -1) 3767 (3757 . 3767) (t 25712 62257 808971 360000)) nil (25712 62270 174912 632000) 0 nil])
([nil nil ((3752 . 3753) (#("_" 0 1 (fontified t syntax-table (3) face font-lock-keyword-face)) . 3752)) nil (25712 62270 174894 473000) 0 nil])
([nil nil ((3824 . 3827) (3821 . 3824) (t 25712 62270 182299 433000) 3818) nil (25712 62296 579417 792000) 0 nil])
([nil nil ((#("def actors() = {
  val clazz = this.getClass.getClassLoader.loadClass(\"artes.Actor\")
  import scala.jdk.CollectionConverters._
  val i = ServiceLoader.load(clazz).asScala.iterator
  var b = true
  var out = List[Spawner]()
  while (b) {
    scala.util.Try {
      i.nextOption().map(_.asInstanceOf[Spawner]) match {
        case Some(j) => out = j :: out
        case None => b = false
      }
    }
  }
  out
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-function-name-face) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t) 13 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 17 (fontified t) 17 19 (fontified t) 19 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 28 (fontified t face font-lock-variable-name-face) 28 29 (fontified t) 29 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t) 31 35 (fontified t face font-lock-keyword-face) 35 56 (fontified t) 56 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-2-face)) 70 71 (syntax-table (7) fontified t face font-lock-string-face) 71 82 (fontified t face font-lock-string-face) 82 83 (syntax-table (7) fontified t face font-lock-string-face) 83 84 (fontified t face (rainbow-delimiters-depth-2-face)) 84 85 (fontified t) 85 87 (fontified t) 87 93 (fontified t face font-lock-keyword-face) 93 104 (fontified t) 104 124 (fontified t face font-lock-constant-face) 124 125 (fontified t) 125 126 (syntax-table (3) fontified t face font-lock-keyword-face) 126 129 (fontified t) 129 132 (fontified t face font-lock-keyword-face) 132 133 (fontified t) 133 134 (fontified t face font-lock-variable-name-face) 134 135 (fontified t) 135 136 (fontified t face font-lock-keyword-face) 136 137 (fontified t) 137 150 (fontified t face font-lock-constant-face) 150 155 (fontified t) 155 156 (fontified t face (rainbow-delimiters-depth-2-face)) 156 157 (fontified t) 157 161 (fontified t) 161 162 (fontified t face (rainbow-delimiters-depth-2-face)) 162 180 (fontified t) 180 182 (fontified t) 182 185 (fontified t face font-lock-keyword-face) 185 186 (fontified t) 186 187 (fontified t face scala-font-lock:var-face) 187 188 (fontified t) 188 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 194 (fontified t face font-lock-constant-face) 194 195 (fontified t) 195 197 (fontified t) 197 200 (fontified t face font-lock-keyword-face) 200 201 (fontified t) 201 204 (fontified t face scala-font-lock:var-face) 204 205 (fontified t) 205 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 211 (fontified t face font-lock-constant-face) 211 212 (fontified t face (rainbow-delimiters-depth-2-face)) 212 219 (fontified t face font-lock-constant-face) 219 220 (fontified t face (rainbow-delimiters-depth-2-face)) 220 221 (fontified t face (rainbow-delimiters-depth-2-face)) 221 222 (fontified t face (rainbow-delimiters-depth-2-face)) 222 223 (fontified t) 223 225 (fontified t) 225 230 (fontified t face font-lock-keyword-face) 230 231 (fontified t) 231 232 (fontified t face (rainbow-delimiters-depth-2-face)) 232 233 (fontified t) 233 234 (fontified t face (rainbow-delimiters-depth-2-face)) 234 235 (fontified t) 235 236 (fontified t face (rainbow-delimiters-depth-2-face)) 236 252 (fontified t) 252 255 (fontified t face font-lock-constant-face) 255 256 (fontified t) 256 257 (fontified t face (rainbow-delimiters-depth-3-face)) 257 258 (fontified t) 258 276 (fontified t) 276 277 (fontified t face (rainbow-delimiters-depth-4-face)) 277 278 (fontified t face (rainbow-delimiters-depth-4-face)) 278 282 (fontified t) 282 283 (fontified t face (rainbow-delimiters-depth-4-face)) 283 284 (syntax-table (3) fontified t face font-lock-keyword-face) 284 297 (fontified t) 297 298 (fontified t face (rainbow-delimiters-depth-5-face)) 298 305 (fontified t face font-lock-constant-face) 305 306 (fontified t face (rainbow-delimiters-depth-5-face)) 306 307 (fontified t face (rainbow-delimiters-depth-4-face)) 307 308 (fontified t) 308 313 (fontified t face font-lock-keyword-face) 313 314 (fontified t) 314 315 (fontified t face (rainbow-delimiters-depth-4-face)) 315 316 (fontified t) 316 324 (fontified t) 324 326 (fontified t face font-lock-keyword-face) 326 328 (fontified t face font-lock-keyword-face) 328 329 (fontified t) 329 333 (fontified t face font-lock-type-face) 333 334 (fontified t face (rainbow-delimiters-depth-5-face)) 334 335 (fontified t face font-lock-variable-name-face) 335 336 (fontified t face (rainbow-delimiters-depth-5-face)) 336 337 (fontified t) 337 339 (fontified t syntax-table (3) face font-lock-keyword-face) 339 344 (fontified t) 344 345 (fontified t face font-lock-keyword-face) 345 348 (fontified t) 348 350 (fontified t syntax-table (3)) 350 355 (fontified t) 355 363 (fontified t) 363 367 (fontified t face font-lock-keyword-face) 367 368 (fontified t) 368 372 (fontified t face font-lock-constant-face) 372 373 (fontified t) 373 375 (syntax-table (3) fontified t face font-lock-keyword-face) 375 378 (fontified t) 378 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 381 (fontified t face font-lock-constant-face) 381 385 (fontified t face font-lock-constant-face) 385 386 (fontified t) 386 392 (fontified t) 392 393 (fontified t face (rainbow-delimiters-depth-4-face)) 393 394 (fontified t) 394 398 (fontified t) 398 399 (fontified t face (rainbow-delimiters-depth-3-face)) 399 400 (fontified t) 400 402 (fontified t) 402 403 (fontified t face (rainbow-delimiters-depth-2-face)) 403 404 (fontified t) 404 409 (fontified t) 409 410 (fontified t) 410 411 (fontified t face (rainbow-delimiters-depth-1-face)) 411 412 (fontified t)) . 3418) (undo-tree-id1590 . -410) (undo-tree-id1591 . -410) (undo-tree-id1592 . -411) (undo-tree-id1593 . -410) (undo-tree-id1594 . -410) (undo-tree-id1595 . -15) (undo-tree-id1596 . 3) (undo-tree-id1597 . -17) (undo-tree-id1598 . -17) (undo-tree-id1599 . -17) (undo-tree-id1600 . -17) (undo-tree-id1601 . -17) (undo-tree-id1602 . -17) (undo-tree-id1603 . -17) (undo-tree-id1604 . -412) (undo-tree-id1605 . -410) (undo-tree-id1606 . -15) (undo-tree-id1607 . 3) (undo-tree-id1608 . 397) (undo-tree-id1609 . -16) (undo-tree-id1610 . 2) (undo-tree-id1611 . -411) (undo-tree-id1612 . -15) (undo-tree-id1613 . -410) (undo-tree-id1614 . -410) 3433) nil (25712 62296 579413 532000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3416) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) 3417) nil (25712 62296 579387 830000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1381 . 1382) (#("
" 0 1 (fontified nil)) . -1793) (1381 . 1794) 1378) nil (25712 62296 579372 674000) 0 nil])
([nil nil ((1822 . 1824) (#("  " 0 2 (fontified nil)) . -1818) (1814 . 1818) (#("  " 0 2 (fontified nil)) . -1812) (1808 . 1812) (#("    " 0 4 (fontified nil)) . -1806) (1800 . 1806) (#("      " 0 6 (fontified nil)) . -1798) (1790 . 1798) (#("        " 0 8 (fontified nil)) . -1767) (1757 . 1767) (#("        " 0 8 (fontified nil)) . -1726) (1716 . 1726) (#("      " 0 6 (fontified nil)) . -1664) (1656 . 1664) (#("    " 0 4 (fontified nil)) . -1639) (1633 . 1639) (#("  " 0 2 (fontified nil)) . -1621) (1617 . 1621) (#("  " 0 2 (fontified nil)) . -1591) (1587 . 1591) (#("  " 0 2 (fontified nil)) . -1574) (1570 . 1574) (#("  " 0 2 (fontified nil)) . -1519) (1515 . 1519) (#("  " 0 2 (fontified nil)) . -1475) (1471 . 1475) (#("  " 0 2 (fontified nil)) . -1405) (1401 . 1405) (1382 . 1384) 1792) nil (25712 62296 579364 922000) 0 nil])
([nil nil ((1384 . 1392)) nil (25712 62296 579352 71000) 0 nil])
([nil nil ((1402 . 1404) (1396 . 1402) (#("actors" 0 6 (fontified t face font-lock-function-name-face)) . 1396) (undo-tree-id1615 . -5) (undo-tree-id1616 . -6) (undo-tree-id1617 . -6) (t 25712 62296 585624 410000)) nil (25712 62304 805214 77000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2195) (undo-tree-id1624 . -4) (undo-tree-id1625 . -4) (undo-tree-id1626 . -4) (undo-tree-id1627 . -4) (undo-tree-id1628 . -4) (undo-tree-id1629 . -4) (undo-tree-id1630 . -4) (undo-tree-id1631 . -4) (undo-tree-id1632 . -4) (undo-tree-id1633 . -4) 2199 (2195 . 2199) (#("    " 0 4 (fontified nil)) . 2194) (undo-tree-id1634 . -4) (undo-tree-id1635 . -4) (undo-tree-id1636 . -4) (undo-tree-id1637 . -4) (2198 . 2199) (2194 . 2198) (nil face font-lock-string-face 2193 . 2194) (nil fontified t 2193 . 2194) (2193 . 2194) (t 25712 62304 812289 246000) 2192) nil (25712 62314 307885 667000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2195) (undo-tree-id1618 . 1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1)) nil (25712 62314 307866 949000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2194) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (t 25712 62314 315620 910000)) nil (25712 62321 703835 551000) 0 nil])
([nil nil ((#("      " 0 6 (fontified nil)) . -3755) (undo-tree-id1638 . -6) (undo-tree-id1639 . -6) (undo-tree-id1640 . -6) (undo-tree-id1641 . -6) (undo-tree-id1642 . -6) (undo-tree-id1643 . -6) (undo-tree-id1644 . -6) (undo-tree-id1645 . -6) (undo-tree-id1646 . -6) (undo-tree-id1647 . -6) (undo-tree-id1648 . -6) (undo-tree-id1649 . -6) (undo-tree-id1650 . -6) (3751 . 3755) (#("        " 0 8 (fontified nil)) . -3726) (3720 . 3726) (#("        " 0 8 (fontified nil)) . -3685) (3679 . 3685) (#("        " 0 8 (fontified nil)) . -3640) (3634 . 3640) (#("        " 0 8 (fontified nil)) . -3559) (undo-tree-id1651 . -8) (3553 . 3559) (#("        " 0 8 (fontified nil)) . -3550) (3544 . 3550) (#("          " 0 10 (fontified nil)) . -3542) (3534 . 3542) (#("            " 0 12 (fontified nil)) . -3532) (3522 . 3532) (#("                " 0 16 (fontified nil)) . -3512) (3498 . 3512) (#("                  " 0 18 (fontified nil face font-lock-comment-face)) . -3495) (3479 . 3495) (#("                  " 0 18 (fontified nil face font-lock-comment-face)) . -3452) (3436 . 3452) (#("                  " 0 18 (fontified nil face font-lock-comment-face)) . -3434) (3418 . 3434) (#("                    " 0 20 (fontified nil face font-lock-comment-face)) . -3403) (3385 . 3403) (#("                    " 0 20 (fontified nil face font-lock-comment-face)) . -3374) (3356 . 3374) (#("                  " 0 18 (fontified nil face font-lock-comment-face)) . -3335) (3319 . 3335) (#("                  " 0 18 (fontified nil face font-lock-comment-face)) . -3269) (3253 . 3269) (#("                  " 0 18 (fontified nil)) . -3250) (3234 . 3250) (#("                  " 0 18 (fontified nil)) . -3221) (3205 . 3221) (#("                    " 0 20 (fontified nil)) . -3177) (3159 . 3177) (#("                    " 0 20 (fontified nil)) . -3144) (3126 . 3144) (#("                    " 0 20 (fontified nil)) . -3104) (3086 . 3104) (#("                    " 0 20 (fontified nil)) . -3051) (3033 . 3051) (#("                  " 0 18 (fontified nil)) . -2984) (2968 . 2984) (#("                " 0 16 (fontified nil)) . -2942) (2928 . 2942) (#("                " 0 16 (fontified nil)) . -2856) (2842 . 2856) (#("                " 0 16 (fontified nil)) . -2818) (undo-tree-id1652 . -16) (2804 . 2818) (#("              " 0 14 (fontified nil)) . -2783) (2771 . 2783) (#("                " 0 16 (fontified nil)) . -2682) (undo-tree-id1653 . -16) (2668 . 2682) (#("              " 0 14 (fontified nil)) . -2636) (2624 . 2636) (#("                " 0 16 (fontified nil)) . -2609) (2595 . 2609) (#("                " 0 16 (fontified nil)) . -2532) (2518 . 2532) (#("                " 0 16 (fontified nil)) . -2510) (undo-tree-id1654 . -16) (2496 . 2510) (#("              " 0 14 (fontified nil)) . -2456) (2444 . 2456) (#("            " 0 12 (fontified nil)) . -2417) (2407 . 2417) (#("          " 0 10 (fontified nil)) . -2374) (2366 . 2374) (#("        " 0 8 (fontified nil)) . -2297) (2291 . 2297) (#("        " 0 8 (fontified nil)) . -2258) (2252 . 2258) (#("      " 0 6 (fontified nil)) . -2199) (undo-tree-id1655 . -6) (2195 . 2199) 3831) nil (25712 62321 703722 268000) 0 nil])
([nil nil ((2214 . 2222) (2205 . 2214) (2199 . 2205) (2194 . 2199) (t 25712 62321 708953 268000) 2194) nil (25712 62341 57727 983000) 0 nil])
([nil nil ((2214 . 2222) (#("actors" 0 6 (fontified t)) . 2214) (undo-tree-id1659 . -5) (undo-tree-id1660 . -6) (undo-tree-id1661 . -6) (undo-tree-id1662 . -6) (t 25712 62341 65618 695000)) nil (25712 62351 897588 135000) 0 nil])
([nil nil ((2214 . 2219) (t 25712 62351 912285 477000)) nil (25712 62356 831870 648000) 0 nil])
([nil nil ((#("              actors.
" 0 14 (fontified t) 14 21 (fontified t) 21 22 (fontified t)) . 2531) (undo-tree-id1664 . -21) (undo-tree-id1665 . -22) (undo-tree-id1666 . -22) (undo-tree-id1667 . -14) (undo-tree-id1668 . -20) (undo-tree-id1669 . -8) (undo-tree-id1670 . -8) (undo-tree-id1671 . -8) (undo-tree-id1672 . -8) (undo-tree-id1673 . -8) (undo-tree-id1674 . -8) (undo-tree-id1675 . -8) (undo-tree-id1676 . -8) (undo-tree-id1677 . -22) 2539 (t 25712 62356 842285 717000)) nil (25712 62397 222115 321000) 0 nil])
([nil nil ((2568 . 2571) (2553 . 2568) (apply yas--snippet-revive 2545 2553 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (2545 . 2553) (#("spawners" 0 8 (fontified nil)) . 2545) (2545 . 2553) (#("spawn" 0 5 (fontified nil)) . 2545) (2545 . 2550) (#("spawners: List[Spawner]" 0 23 (fontified nil)) . -2545) (2545 . 2568) (#("spawne" 0 6 (fontified t)) . -2545) (undo-tree-id1663 . -6) 2551 (2545 . 2551) (2531 . 2545) (nil face font-lock-keyword-face 2530 . 2531) (nil fontified t 2530 . 2531) (2530 . 2531) 2487) nil (25712 62431 228746 812000) 0 nil])
([nil nil ((#("private " 0 7 (fontified t face scala-font-lock:private-face) 7 8 (fontified t)) . 796) (undo-tree-id1736 . -7) (undo-tree-id1737 . 1) (undo-tree-id1738 . -7) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -8)) nil (25712 62434 155229 978000) 0 nil] [nil nil ((805 . 810) (803 . 805) (t 25712 62423 725633 319000)) ((#("[a" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face)) 1 2 (fontified nil)) . 803) (undo-tree-id1705 . -2) (undo-tree-id1706 . -2) (undo-tree-id1707 . -2) (undo-tree-id1708 . -2) (undo-tree-id1709 . -2) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . 2) (undo-tree-id1713 . -1) (undo-tree-id1714 . -2) (undo-tree-id1715 . -2) (undo-tree-id1716 . -2) (undo-tree-id1717 . -2) (undo-tree-id1718 . -2) (undo-tree-id1719 . -2) (undo-tree-id1720 . -2) (#("rtes]" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-2-face))) . 805) (undo-tree-id1721 . -4) (undo-tree-id1722 . -4) (undo-tree-id1723 . -4) (undo-tree-id1724 . -4) (undo-tree-id1725 . -4) (undo-tree-id1726 . -4) (undo-tree-id1727 . 1) (undo-tree-id1728 . -5) (undo-tree-id1729 . -4) (undo-tree-id1730 . -4) (undo-tree-id1731 . -4) (undo-tree-id1732 . -4) (undo-tree-id1733 . -4) (undo-tree-id1734 . -4) (undo-tree-id1735 . -4) (t 25712 62427 922301 531000)) (25712 62427 914937 422000) 0 nil] [nil nil ((803 . 809) (t 25712 62411 852296 13000)) ((#("[this]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face (rainbow-delimiters-depth-2-face))) . 803) (undo-tree-id1690 . -5) (undo-tree-id1691 . -5) (undo-tree-id1692 . -5) (undo-tree-id1693 . -5) (undo-tree-id1694 . 1) (undo-tree-id1695 . -6) (undo-tree-id1696 . 6) (undo-tree-id1697 . -1) (undo-tree-id1698 . -5) (undo-tree-id1699 . -5) (undo-tree-id1700 . -5) (undo-tree-id1701 . -5) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5) (undo-tree-id1704 . -5) (t 25712 62421 198965 757000)) (25712 62421 190297 215000) 0 nil] [nil nil ((2610 . 2613) (t 25712 62397 228958 619000)) ((#("0, " 0 1 (fontified t face font-lock-constant-face) 1 3 (fontified t)) . 2610) (undo-tree-id1678 . -3) (undo-tree-id1679 . -2) (undo-tree-id1680 . -2) (undo-tree-id1681 . -2) (undo-tree-id1682 . -2) (undo-tree-id1683 . -2) (undo-tree-id1684 . -3) (undo-tree-id1685 . -2) (undo-tree-id1686 . -2) (undo-tree-id1687 . -2) (undo-tree-id1688 . -2) (undo-tree-id1689 . -2) (t 25712 62407 565628 60000)) (25712 62407 558518 875000) 0 nil])
([nil nil ((#("SystemCommand" 0 13 (fontified t face font-lock-constant-face)) . 2602) (undo-tree-id1746 . -12) (t 25712 62434 162303 964000)) nil (25712 62450 592617 456000) 0 nil])
nil
nil
nil
([nil nil ((#("." 0 1 (fontified t)) . 2602) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1)) nil (25712 62450 592609 843000) 0 nil])
([nil nil ((#("  case class Kill() extends SystemCommand
" 0 2 (fontified t) 2 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 17 (fontified t face font-lock-type-face) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 20 (fontified t) 20 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 41 (fontified t face font-lock-type-face) 41 42 (fontified t)) . 794) (undo-tree-id1753 . -41) (undo-tree-id1754 . 40) (undo-tree-id1755 . -2) (undo-tree-id1756 . -2) 796 (t 25712 62450 598977 800000)) nil (25712 62462 812032 901000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2276 . 2277) (#("
" 0 1 (fontified nil)) . -2316) (2274 . 2317) 2237) nil (25712 62462 812025 288000) 0 nil])
([nil nil ((#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . -2279) (undo-tree-id1752 . -2) (2275 . 2279) 2277) nil (25712 62462 812022 355000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -2281) (undo-tree-id1751 . -2) (2275 . 2281) 2277) nil (25712 62462 812018 25000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2275) (undo-tree-id1747 . -6) (undo-tree-id1748 . -6) (undo-tree-id1749 . -6) (undo-tree-id1750 . -6) 2281 (2274 . 2281) 2239) nil (25712 62462 812010 761000) 0 nil])
([nil nil ((2691 . 2692) (apply yas--snippet-revive 2678 2691 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (2678 . 2691) (#("SystemCommand" 0 13 (fontified nil)) . 2678) (2678 . 2691) (#("SystemC" 0 7 (fontified nil)) . 2678) (2678 . 2685) (#("SystemCommand artes" 0 19 (fontified nil)) . -2678) (2678 . 2697) (#("SystemCom" 0 9 (fontified t face font-lock-type-face)) . -2678) (undo-tree-id1757 . -9) 2687 (2679 . 2687) (2678 . 2679) (t 25712 62462 818983 827000)) nil (25712 62473 284617 81000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2835 . 2836) (#("
" 0 1 (fontified nil)) . -2850) (2821 . 2851) 2746 (t 25712 62473 292322 787000)) nil (25712 62483 589837 892000) 0 nil])
([nil nil ((838 . 839) (817 . 838) (796 . 817) (793 . 796) (t 25712 62483 595662 62000) 769) nil (25712 62563 727337 309000) 0 nil])
([nil nil ((2204 . 2205) (2200 . 2204) (2195 . 2200) (2191 . 2195) (#("    " 0 4 (fontified nil)) . 2190) (undo-tree-id1787 . -4) (2194 . 2195) (2190 . 2194) (nil face font-lock-string-face 2189 . 2190) (nil fontified t 2189 . 2190) (2189 . 2190) (t 25712 62563 732387 843000) 2179) nil (25712 62576 586453 65000) 0 nil])
([nil nil ((#("    val config
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t)) . 2191) (undo-tree-id1768 . -14) (undo-tree-id1769 . 1) (undo-tree-id1770 . -15) (undo-tree-id1771 . -15) (undo-tree-id1772 . -13) (undo-tree-id1773 . 1) (undo-tree-id1774 . -15) (undo-tree-id1775 . -14) (undo-tree-id1776 . -14) (undo-tree-id1777 . -14) (undo-tree-id1778 . -14) (undo-tree-id1779 . -13) (undo-tree-id1780 . -13) (undo-tree-id1781 . -13) (undo-tree-id1782 . -13) (undo-tree-id1783 . -13) (undo-tree-id1784 . -13) (undo-tree-id1785 . -13) (undo-tree-id1786 . -15) 2204) nil (25712 62576 586447 198000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2191) (undo-tree-id1758 . 1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . 1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1)) nil (25712 62576 586428 271000) 0 nil])
([nil nil ((#("Main" 0 4 (fontified t face font-lock-constant-face)) . 3894) (undo-tree-id1791 . -3) (t 25712 62576 592399 320000)) nil (25712 62586 489023 486000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3894) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1)) nil (25712 62586 489016 781000) 0 nil])
([nil nil ((3900 . 3901) (t 25712 62586 495741 842000)) nil (25712 62589 54941 575000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2226) (undo-tree-id1871 . -4) 2230 (2225 . 2230) (t 25712 62589 62410 939000) 2214) nil (25712 62742 445606 672000) 0 nil])
([nil nil ((apply yas--snippet-revive 2285 2298 #s(yas--snippet nil nil #s(yas--exit 2297 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2297 nil) 15 nil nil nil nil)) (2285 . 2298) (#("parseString($0)" 0 15 (fontified nil)) . 2285) (2285 . 2300) (#("parseString(x$1: String): Config" 0 32 (fontified nil)) . -2285) (2285 . 2317) (2284 . 2285) (#("." 0 1 (fontified t)) . -2284) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (#("p" 0 1 (fontified t)) . -2285) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (#("a" 0 1 (fontified t)) . -2286) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) 2287 (2284 . 2287) (apply yas--snippet-revive 2271 2284 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (2271 . 2284) (#("ConfigFactory" 0 13 (fontified nil)) . 2271) (2271 . 2284) (#("ConfigF" 0 7 (fontified nil)) . 2271) (2271 . 2278) (#("ConfigFactory" 0 13 (fontified nil)) . -2271) (2271 . 2284) (#("ConfigFa" 0 8 (fontified t face font-lock-constant-face)) . -2271) (undo-tree-id1853 . -8) (undo-tree-id1854 . -8) 2279 (2271 . 2279) (#("_" 0 1 (fontified t syntax-table (3) face font-lock-keyword-face)) . -2271) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) 2272 (2267 . 2272) (2266 . 2267) (2265 . 2266) (apply yas--snippet-revive 2259 2265 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (2259 . 2265) (#("config" 0 6 (fontified nil)) . 2259) (2259 . 2265) (#("config: String" 0 14 (fontified nil)) . -2259) (2259 . 2273) (2252 . 2259) (apply yas--snippet-revive 2244 2252 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (2244 . 2252) (#("spawners" 0 8 (fontified nil)) . 2244) (2244 . 2252) (#("spaw" 0 4 (fontified nil)) . 2244) (2244 . 2248) (#("spawners: List[Spawner]" 0 23 (fontified nil)) . -2244) (2244 . 2267) (#("spawn" 0 5 (fontified t)) . -2244) (undo-tree-id1857 . -5) 2249 (2244 . 2249) (#("S" 0 1 (fontified t face font-lock-constant-face)) . -2244) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -2245) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (#("q" 0 1 (fontified t face font-lock-constant-face)) . -2246) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2247) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) 2248 (2245 . 2248) (2230 . 2245) (#("c" 0 1 (fontified t)) . -2230) (undo-tree-id1866 . -1) (#("o" 0 1 (fontified t)) . -2231) (undo-tree-id1867 . -1) (#("n" 0 1 (fontified t)) . -2232) (undo-tree-id1868 . -1) (#("f" 0 1 (fontified t)) . -2233) (undo-tree-id1869 . -1) (#("i" 0 1 (fontified t)) . -2234) (undo-tree-id1870 . -1) 2235 (2230 . 2235) (2225 . 2230) 2191) nil (25712 62742 445597 174000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 2296) (undo-tree-id1845 . 1) (undo-tree-id1846 . -1)) nil (25712 62742 445502 817000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 2296) (undo-tree-id1842 . 1) (undo-tree-id1843 . 1) (undo-tree-id1844 . -1)) nil (25712 62742 445498 557000) 0 nil])
([nil nil ((2333 . 2341) (2326 . 2333) (2313 . 2326) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -2313) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) 2314 (2313 . 2314) (#("G" 0 1 (fontified t face font-lock-constant-face)) . -2313) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) 2314 (2307 . 2314) (#("c" 0 1 (fontified t)) . -2307) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (#("o" 0 1 (fontified t)) . -2308) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (#("n" 0 1 (fontified t)) . -2309) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (#("f" 0 1 (fontified t)) . -2310) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#("i" 0 1 (fontified t)) . -2311) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (#("g" 0 1 (fontified t)) . -2312) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) 2313 (2306 . 2313) (#(" " 0 1 (fontified t)) . -2306) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2307) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (#(" " 0 1 (fontified t)) . -2308) (undo-tree-id1840 . -1) (#("c" 0 1 (fontified t)) . -2309) (undo-tree-id1841 . -1) 2310 (2296 . 2310)) nil (25712 62742 445488 151000) 0 nil])
([nil nil ((2266 . 2273)) nil (25712 62742 445470 411000) 0 nil])
([nil nil ((2252 . 2259)) nil (25712 62742 445468 525000) 0 nil])
([nil nil ((2311 . 2318)) nil (25712 62742 445466 639000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -2388) (undo-tree-id1816 . -2) (2390 . 2391) (2381 . 2390) (2369 . 2381) (#(" " 0 1 (fontified t)) . -2369) (undo-tree-id1817 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2370) (undo-tree-id1818 . -1) (#("a" 0 1 (fontified t)) . -2371) (undo-tree-id1819 . -1) 2372 (2364 . 2372) (2362 . 2364)) nil (25712 62742 445464 265000) 0 nil])
([nil nil ((2396 . 2407) (#("T" 0 1 (fontified t)) . -2396) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (#("i" 0 1 (fontified t)) . -2397) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (#("m" 0 1 (fontified t)) . -2398) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (#("e" 0 1 (fontified t)) . -2399) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (#("r" 0 1 (fontified t)) . -2400) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (#("s" 0 1 (fontified t)) . -2401) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) 2402 (nil fontified t 2397 . 2402) (nil face font-lock-keyword-face 2397 . 2402) (#("while" 0 5 (fontified t face font-lock-keyword-face)) . -2392) (2397 . 2407) 2397 (nil fontified nil 2396 . 2397) (#("w" 0 1 (fontified nil)) . -2392) (2393 . 2398) 2393 (#("which" 0 5 (fontified nil)) . 2393) (undo-tree-id1804 . -5) (2392 . 2393) 2397 (nil fontified t 2392 . 2397) (#("whose" 0 5 (fontified t)) . -2392) (2397 . 2402) 2397 (nil fontified t 2392 . 2397) (#("whitespace" 0 10 (fontified t)) . -2392) (2402 . 2407) 2402 (nil fontified t 2399 . 2402) (#("was" 0 3 (fontified t)) . -2392) (2395 . 2405) 2395 (nil fontified t 2392 . 2395) (#("when" 0 4 (fontified t)) . -2392) (2396 . 2399) 2396 (nil fontified t 2392 . 2396) (#("warranty" 0 8 (fontified t)) . -2392) (2400 . 2404) 2400 (nil fontified t 2393 . 2400) (#("without" 0 7 (fontified t)) . -2392) (2399 . 2407) 2399 (nil fontified t 2392 . 2399) (#("warranty" 0 8 (fontified t)) . -2392) (2400 . 2407) 2400 (nil fontified t 2393 . 2400) (#("without" 0 7 (fontified t)) . -2392) (2399 . 2407) 2399 (nil fontified t 2395 . 2399) (#("will" 0 4 (fontified t)) . -2392) (2396 . 2403) 2396 (nil fontified t 2392 . 2396) (nil face font-lock-keyword-face 2392 . 2396) (#("with" 0 4 (fontified t face font-lock-keyword-face)) . -2392) (2396 . 2400) 2396 (nil fontified t 2394 . 2396) (#("w3" 0 2 (fontified t)) . -2392) (2394 . 2398) 2394 (nil fontified t 2392 . 2394) (#("webimg" 0 6 (fontified t)) . -2392) (2398 . 2400) 2398 (nil fontified t 2392 . 2398) (#("widictor" 0 8 (fontified t)) . -2392) (2400 . 2406) 2400 (nil fontified t 2393 . 2400) (#("webtool" 0 7 (fontified t)) . -2392) (2399 . 2407) 2399 (nil fontified t 2392 . 2399) (#("withTimers" 0 10 (fontified t)) . -2392) (2402 . 2409) 2402 (#("w" 0 1 (fontified t)) . -2392) (2393 . 2403) 2393 (2392 . 2393) (2391 . 2392) (#("." 0 1 (fontified t)) . -2391) (undo-tree-id1805 . -1) (#("f" 0 1 (fontified t)) . -2392) (undo-tree-id1806 . -1) (#("a" 0 1 (fontified t)) . -2393) (undo-tree-id1807 . -1) (#("l" 0 1 (fontified t)) . -2394) (undo-tree-id1808 . -1) (#("l" 0 1 (fontified t)) . -2395) (undo-tree-id1809 . -1) 2396 (2391 . 2396) (#("." 0 1 (fontified t)) . -2391) (undo-tree-id1810 . -1) (#("d" 0 1 (fontified t)) . -2392) (undo-tree-id1811 . -1) (#("e" 0 1 (fontified t)) . -2393) (undo-tree-id1812 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2394) (undo-tree-id1813 . -1) 2395 (2391 . 2395) (#("." 0 1 (fontified t)) . -2391) (undo-tree-id1814 . -1) (#("w" 0 1 (fontified t)) . -2392) (undo-tree-id1815 . -1) 2393 (2390 . 2393) (2382 . 2390) (nil face font-lock-keyword-face 2381 . 2382) (nil fontified t 2381 . 2382) (2381 . 2382) 2318) nil (25712 62742 445444 220000) 0 nil])
([nil nil ((3118 . 3119) (apply yas--snippet-revive 3105 3118 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (3105 . 3118) (#("SystemCommand" 0 13 (fontified nil)) . 3105) (3105 . 3118) (#("System" 0 6 (fontified nil)) . 3105) (3105 . 3111) (#("SystemCommand artes" 0 19 (fontified nil)) . -3105) (3105 . 3124) (#("System" 0 6 (fontified t face font-lock-type-face)) . -3105) (undo-tree-id1903 . -6) 3111 (3105 . 3111) (t 25712 62742 452589 102000)) nil (25712 62811 619830 52000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face font-lock-type-face)) . 3119) (undo-tree-id1901 . 1) (undo-tree-id1902 . 1)) nil (25712 62811 619825 233000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-type-face)) . 3119) (undo-tree-id1899 . 1) (undo-tree-id1900 . 1)) nil (25712 62811 619821 881000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-type-face)) . 3119) (undo-tree-id1897 . 1) (undo-tree-id1898 . 1)) nil (25712 62811 619818 529000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-type-face)) . 3119) (undo-tree-id1895 . 1) (undo-tree-id1896 . 1)) nil (25712 62811 619815 665000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . 3119) (undo-tree-id1893 . 1) (undo-tree-id1894 . 1)) nil (25712 62811 619812 313000) 0 nil])
([nil nil ((#("            case SystemCommand.mDown() =>
" 0 12 (fontified t) 12 16 (fontified t face font-lock-keyword-face) 16 17 (fontified t) 17 31 (fontified t face font-lock-type-face) 31 36 (fontified t face font-lock-type-face) 36 37 (fontified t face (rainbow-delimiters-depth-9-face)) 37 38 (fontified t face (rainbow-delimiters-depth-9-face)) 38 39 (fontified t) 39 41 (fontified t syntax-table (3) face font-lock-keyword-face) 41 42 (fontified t)) . 3088) (undo-tree-id1873 . -41) (undo-tree-id1874 . 11) (undo-tree-id1875 . -42) (undo-tree-id1876 . -42) (undo-tree-id1877 . -31) (undo-tree-id1878 . 11) (undo-tree-id1879 . -31) (undo-tree-id1880 . -31) (undo-tree-id1881 . -35) (undo-tree-id1882 . -36) (undo-tree-id1883 . -31) (undo-tree-id1884 . -31) (undo-tree-id1885 . -31) (undo-tree-id1886 . -31) (undo-tree-id1887 . -31) (undo-tree-id1888 . -31) (undo-tree-id1889 . -31) (undo-tree-id1890 . -31) (undo-tree-id1891 . -31) (undo-tree-id1892 . -42) 3119) nil (25712 62811 619807 633000) 0 nil])
([nil nil ((3145 . 3157) (3130 . 3145) (3127 . 3130) (apply yas--snippet-revive 3119 3127 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (3119 . 3127) (#("Finished" 0 8 (fontified nil)) . 3119) (3119 . 3127) (#("Finished artes.SystemCommand" 0 28 (fontified nil)) . -3119) (3119 . 3147) (3118 . 3119) (apply yas--snippet-revive 3105 3118 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (3105 . 3118) (#("SystemCommand" 0 13 (fontified nil)) . 3105) (3105 . 3118) (#("SystemC" 0 7 (fontified nil)) . 3105) (3105 . 3112) (#("SystemCommand artes" 0 19 (fontified nil)) . -3105) (3105 . 3124) (#("SystemCom" 0 9 (fontified t face font-lock-constant-face)) . -3105) (undo-tree-id1872 . -9) 3114 (3105 . 3114) (#("  " 0 2 (fontified nil)) . -3100) (3102 . 3107) (3087 . 3102) 3086) nil (25712 62811 619782 351000) 0 nil])
([nil nil ((3127 . 3129) (t 25712 62811 626021 107000)) nil (25712 62821 963395 697000) 0 nil])
([nil nil ((2586 . 2592) (#("s" 0 1 (fontified t)) . -2586) (undo-tree-id1904 . -1) (#("s" 0 1 (fontified t)) . -2587) (undo-tree-id1905 . -1) (#("i" 0 1 (fontified t)) . -2588) (undo-tree-id1906 . -1) 2589 (2587 . 2589) (#("." 0 1 (fontified t)) . -2587) (undo-tree-id1907 . -1) (#("c" 0 1 (fontified t)) . -2588) (undo-tree-id1908 . -1) (#("o" 0 1 (fontified t)) . -2589) (undo-tree-id1909 . -1) 2590 (2588 . 2590) (#("s" 0 1 (fontified t)) . -2588) (undo-tree-id1910 . -1) (#("i" 0 1 (fontified t)) . -2589) (undo-tree-id1911 . -1) 2590 (2579 . 2590) (#("c" 0 1 (fontified t)) . -2579) (undo-tree-id1912 . -1) 2580 (#("o" 0 1 (fontified t)) . -2580) (undo-tree-id1913 . -1) (#("n" 0 1 (fontified t)) . -2581) (undo-tree-id1914 . -1) (#("f" 0 1 (fontified t)) . -2582) (undo-tree-id1915 . -1) (#("i" 0 1 (fontified t)) . -2583) (undo-tree-id1916 . -1) (#("g" 0 1 (fontified t)) . -2584) (undo-tree-id1917 . -1) (#("s" 0 1 (fontified t)) . -2585) (undo-tree-id1918 . -1) 2586 (2567 . 2586) (#("l" 0 1 (fontified t face font-lock-keyword-face)) . -2567) (undo-tree-id1919 . -1) (#(" " 0 1 (fontified t)) . -2568) (undo-tree-id1920 . -1) 2569 (2565 . 2569) (2558 . 2565) (t 25712 62821 969370 32000) 2513) nil (25712 62840 682211 145000) 0 nil])
([nil nil ((3261 . 3263) (3243 . 3261) (apply yas--snippet-revive 3236 3243 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (3236 . 3243) (#("stopped" 0 7 (fontified nil)) . 3236) (3236 . 3243) (#("stopped[T]: Behavior[T]" 0 23 (fontified nil)) . -3236) (3236 . 3259) (#("stop" 0 4 (fontified t)) . -3236) (undo-tree-id2011 . -4) 3240 (3225 . 3240) (3208 . 3225) (3193 . 3208) (t 25712 62840 689398 772000) 3192) nil (25712 62885 789908 120000) 0 nil])
([nil nil ((#("              out = Behaviors.stopped
" 0 14 (fontified t) 14 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 29 (fontified t face font-lock-constant-face) 29 37 (fontified t) 37 38 (fontified t)) . 3264) (undo-tree-id2007 . -37) (undo-tree-id2008 . -38) (undo-tree-id2009 . -38) (undo-tree-id2010 . -36) 3300) nil (25712 62885 789902 323000) 0 nil])
([nil nil ((#("              case AddDependency(name, jar) => dependencyLoader.addLibrary(name, jar)
              case SpawnActor(actor) =>
                val j = new DynamicClassLoader(actor, libLoader)
                  .loadClass(s\"artes.actors.$actor\")
                  .getConstructors()(0)
                  .newInstance()
                  .asInstanceOf[DynamicActor]
                j.spawn(ctx)
                /*
                val ref = ctx.spawnAnonymous(j.spawner(ctx.self))
                val member = Member(
                  ref = ref,
                  kind = j.kind,
                )
                actors += j.name -> member
                */
" 0 14 (fontified t) 14 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 32 (fontified t face font-lock-type-face) 32 33 (fontified t face (rainbow-delimiters-depth-9-face)) 33 37 (fontified t face font-lock-variable-name-face) 37 39 (fontified t) 39 41 (fontified t face font-lock-variable-name-face) 41 42 (fontified t face font-lock-variable-name-face) 42 43 (fontified t face (rainbow-delimiters-depth-9-face)) 43 44 (fontified t) 44 46 (fontified t syntax-table (3) face font-lock-keyword-face) 46 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-9-face)) 75 84 (fontified t) 84 85 (fontified t face (rainbow-delimiters-depth-9-face)) 85 86 (fontified t) 86 100 (fontified t) 100 104 (fontified t face font-lock-keyword-face) 104 105 (fontified t) 105 115 (fontified t face font-lock-type-face) 115 116 (fontified t face (rainbow-delimiters-depth-9-face)) 116 121 (fontified t face font-lock-variable-name-face) 121 122 (fontified t face (rainbow-delimiters-depth-9-face)) 122 123 (fontified t) 123 125 (syntax-table (3) fontified t face font-lock-keyword-face) 125 142 (fontified t) 142 145 (fontified t face font-lock-keyword-face) 145 146 (fontified t) 146 147 (fontified t face font-lock-variable-name-face) 147 148 (fontified t) 148 149 (fontified t face font-lock-keyword-face) 149 150 (fontified t) 150 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 172 (fontified t face font-lock-type-face) 172 173 (fontified t face (rainbow-delimiters-depth-9-face)) 173 186 (fontified t) 186 189 (fontified t) 189 190 (fontified t face (rainbow-delimiters-depth-9-face)) 190 209 (fontified t) 209 219 (fontified t) 219 220 (fontified t face (rainbow-delimiters-depth-9-face)) 220 221 (fontified t) 221 222 (syntax-table (7) fontified t face font-lock-string-face) 222 235 (fontified t face font-lock-string-face) 235 236 (syntax-table (1) fontified t face font-lock-variable-name-face) 236 241 (fontified t face font-lock-variable-name-face) 241 242 (syntax-table (7) fontified t face font-lock-string-face) 242 243 (fontified t face (rainbow-delimiters-depth-9-face)) 243 262 (fontified t) 262 278 (fontified t) 278 279 (fontified t face (rainbow-delimiters-depth-9-face)) 279 280 (fontified t face (rainbow-delimiters-depth-9-face)) 280 281 (fontified t face (rainbow-delimiters-depth-9-face)) 281 282 (fontified t face font-lock-constant-face) 282 283 (fontified t face (rainbow-delimiters-depth-9-face)) 283 302 (fontified t) 302 314 (fontified t) 314 315 (fontified t face (rainbow-delimiters-depth-9-face)) 315 316 (fontified t face (rainbow-delimiters-depth-9-face)) 316 335 (fontified t) 335 348 (fontified t) 348 349 (fontified t face (rainbow-delimiters-depth-9-face)) 349 354 (fontified t face font-lock-constant-face) 354 355 (fontified t face font-lock-constant-face) 355 361 (fontified t face font-lock-constant-face) 361 362 (fontified t face (rainbow-delimiters-depth-9-face)) 362 379 (fontified t) 379 386 (fontified t) 386 387 (fontified t face (rainbow-delimiters-depth-9-face)) 387 390 (fontified t) 390 391 (fontified t face (rainbow-delimiters-depth-9-face)) 391 408 (fontified t) 408 410 (fontified t face font-lock-comment-delimiter-face) 410 427 (fontified t face font-lock-comment-face) 427 435 (fontified t face font-lock-comment-face) 435 448 (fontified t face font-lock-comment-face) 448 455 (fontified t face font-lock-comment-face) 455 459 (fontified t face font-lock-comment-face) 459 493 (fontified t face font-lock-comment-face) 493 506 (fontified t face font-lock-comment-face) 506 532 (fontified t face font-lock-comment-face) 532 561 (fontified t face font-lock-comment-face) 561 592 (fontified t face font-lock-comment-face) 592 610 (fontified t face font-lock-comment-face) 610 611 (fontified t face font-lock-comment-face) 611 617 (fontified t face font-lock-comment-face) 617 619 (syntax-table (3) fontified t face font-lock-comment-face) 619 627 (fontified t face font-lock-comment-face) 627 629 (syntax-table (3) fontified t face font-lock-comment-face) 629 653 (fontified t face font-lock-comment-face) 653 655 (fontified t face font-lock-comment-face) 655 656 (fontified t)) . 3264) (undo-tree-id1937 . -655) (undo-tree-id1938 . -655) (undo-tree-id1939 . -36) (undo-tree-id1940 . -655) (undo-tree-id1941 . -514) (undo-tree-id1942 . -514) (undo-tree-id1943 . -411) (undo-tree-id1944 . -411) (undo-tree-id1945 . -576) (undo-tree-id1946 . -576) (undo-tree-id1947 . -656) (undo-tree-id1948 . -656) (undo-tree-id1949 . -637) (undo-tree-id1950 . -637) (undo-tree-id1951 . -594) (undo-tree-id1952 . -594) (undo-tree-id1953 . -392) (undo-tree-id1954 . -392) (undo-tree-id1955 . -363) (undo-tree-id1956 . -363) (undo-tree-id1957 . -317) (undo-tree-id1958 . -317) (undo-tree-id1959 . -284) (undo-tree-id1960 . -284) (undo-tree-id1961 . -244) (undo-tree-id1962 . -244) (undo-tree-id1963 . -191) (undo-tree-id1964 . -191) (undo-tree-id1965 . -126) (undo-tree-id1966 . -126) (undo-tree-id1967 . -86) (undo-tree-id1968 . -86) (undo-tree-id1969 . -543) (undo-tree-id1970 . -543) (undo-tree-id1971 . -477) (undo-tree-id1972 . -477) (undo-tree-id1973 . -36) (undo-tree-id1974 . -655) (undo-tree-id1975 . -19) (undo-tree-id1976 . -32) (undo-tree-id1977 . -47) (undo-tree-id1978 . -63) (undo-tree-id1979 . -105) (undo-tree-id1980 . -115) (undo-tree-id1981 . -154) (undo-tree-id1982 . -172) (undo-tree-id1983 . -180) (undo-tree-id1984 . -189) (undo-tree-id1985 . -349) (undo-tree-id1986 . -361) (undo-tree-id1987 . -656) (undo-tree-id1988 . -36) (undo-tree-id1989 . -655) (undo-tree-id1990 . -410) (undo-tree-id1991 . -410) (undo-tree-id1992 . -513) (undo-tree-id1993 . -513) (undo-tree-id1994 . -542) (undo-tree-id1995 . -542) (undo-tree-id1996 . -575) (undo-tree-id1997 . -575) (undo-tree-id1998 . -593) (undo-tree-id1999 . -593) (undo-tree-id2000 . -630) (undo-tree-id2001 . -630) (undo-tree-id2002 . -637) (undo-tree-id2003 . -655) (undo-tree-id2004 . -655) (undo-tree-id2005 . -655) (undo-tree-id2006 . -656) 3919) nil (25712 62885 789895 619000) 0 nil])
([nil nil ((#("              case _ =>
" 0 14 (fontified t) 14 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 20 (fontified t syntax-table (3) face font-lock-keyword-face) 20 21 (fontified t) 21 23 (fontified t syntax-table (3) face font-lock-keyword-face) 23 24 (fontified t)) . 3264) (undo-tree-id1921 . -23) (undo-tree-id1922 . 24) (undo-tree-id1923 . -24) (undo-tree-id1924 . -24) (undo-tree-id1925 . -18) (undo-tree-id1926 . -23) (undo-tree-id1927 . -18) (undo-tree-id1928 . -18) (undo-tree-id1929 . -18) (undo-tree-id1930 . -18) (undo-tree-id1931 . -18) (undo-tree-id1932 . -18) (undo-tree-id1933 . -18) (undo-tree-id1934 . -18) (undo-tree-id1935 . -18) (undo-tree-id1936 . -24) 3282) nil (25712 62885 789758 310000) 0 nil])
([nil nil ((3408 . 3413) (#("t" 0 1 (fontified t)) . -3408) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) 3409 (3407 . 3409) (#("j" 0 1 (fontified t)) . -3407) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (#("a" 0 1 (fontified t)) . -3408) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (#("r" 0 1 (fontified t)) . -3409) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-9-face))) . -3410) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . 1) (undo-tree-id2026 . -1) 3411 (3398 . 3411) (3383 . 3398) (3371 . 3383) (apply yas--snippet-revive 3355 3371 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (3355 . 3371) (#("FileOutputStream" 0 16 (fontified nil)) . 3355) (3355 . 3371) (#("FileOutputStream" 0 16 (fontified nil)) . -3355) (3355 . 3371) (#("FileO" 0 5 (fontified t face font-lock-constant-face)) . -3355) (undo-tree-id2027 . -5) 3360 (3352 . 3360) (3337 . 3352) (#("s" 0 1 (fontified t)) . -3337) (undo-tree-id2028 . -1) (#("c" 0 1 (fontified t)) . -3338) (undo-tree-id2029 . -1) (#("a" 0 1 (fontified t)) . -3339) (undo-tree-id2030 . -1) (#("l" 0 1 (fontified t)) . -3340) (undo-tree-id2031 . -1) (#("a" 0 1 (fontified t)) . -3341) (undo-tree-id2032 . -1) (#("." 0 1 (fontified t)) . -3342) (undo-tree-id2033 . -1) (#("u" 0 1 (fontified t)) . -3343) (undo-tree-id2034 . -1) (#("t" 0 1 (fontified t)) . -3344) (undo-tree-id2035 . -1) (#("i" 0 1 (fontified t)) . -3345) (undo-tree-id2036 . -1) (#("l" 0 1 (fontified t)) . -3346) (undo-tree-id2037 . -1) (#("." 0 1 (fontified t)) . -3347) (undo-tree-id2038 . -1) (#("U" 0 1 (fontified t face font-lock-constant-face)) . -3348) (undo-tree-id2039 . -1) 3349 (3337 . 3349) (3322 . 3337) (3313 . 3322) (#(":" 0 1 (fontified t face font-lock-keyword-face)) . -3313) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (#(" " 0 1 (fontified t)) . -3314) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (#("S" 0 1 (fontified t)) . -3315) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) 3316 (#("t" 0 1 (fontified t)) . -3316) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (#("r" 0 1 (fontified t)) . -3317) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (#("i" 0 1 (fontified t)) . -3318) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (#("n" 0 1 (fontified t)) . -3319) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (#("g" 0 1 (fontified t)) . -3320) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (#("," 0 1 (fontified t)) . -3321) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (#(" " 0 1 (fontified t)) . -3322) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (#("j" 0 1 (fontified t face font-lock-variable-name-face)) . -3323) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -3324) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -3325) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (#(":" 0 1 (fontified t face font-lock-keyword-face)) . -3326) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (#(" " 0 1 (fontified t)) . -3327) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (#("A" 0 1 (fontified t)) . -3328) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (#("r" 0 1 (fontified t)) . -3329) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (#("r" 0 1 (fontified t)) . -3330) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (#("a" 0 1 (fontified t)) . -3331) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (#("y" 0 1 (fontified t)) . -3332) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (#("[" 0 1 (fontified t)) . -3333) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (#("B" 0 1 (fontified t)) . -3334) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (#("y" 0 1 (fontified t)) . -3335) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (#("t" 0 1 (fontified t)) . -3336) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) 3337 (3334 . 3337) (3329 . 3334) (3308 . 3329) (apply yas--snippet-revive 3295 3308 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (3295 . 3308) (#("AddDependency" 0 13 (fontified nil)) . 3295) (3295 . 3308) (#("AddDependency artes.SystemCommand" 0 33 (fontified nil)) . -3295) (3295 . 3328) (3294 . 3295) (apply yas--snippet-revive 3281 3294 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (3281 . 3294) (#("SystemCommand" 0 13 (fontified nil)) . 3281) (3281 . 3294) (#("SystemC" 0 7 (fontified nil)) . 3281) (3281 . 3288) (#("SystemCommand artes" 0 19 (fontified nil)) . -3281) (3281 . 3300) (#("SystemC" 0 7 (fontified t face font-lock-constant-face)) . -3281) (undo-tree-id2088 . -7) 3288 (3281 . 3288) (#("  " 0 2 (fontified nil)) . -3276) (3278 . 3283) (3263 . 3278) (t 25712 62885 796137 309000) 3204) nil (25712 63020 465008 59000) 0 nil])
([nil nil ((3428 . 3442) (3413 . 3428) (t 25712 63020 473037 980000) 3412) nil (25712 63024 399334 431000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -3436) (undo-tree-id2090 . -2) (undo-tree-id2091 . -2) (undo-tree-id2092 . -2) (undo-tree-id2093 . -2) (3438 . 3439) (3421 . 3438) (3413 . 3421) (t 25712 63024 406378 535000)) nil (25712 63121 474223 663000) 0 nil])
([nil nil ((3456 . 3473) (3451 . 3456) (#("j" 0 1 (fontified t face font-lock-variable-name-face)) . -3451) (undo-tree-id2089 . -1) 3452 (3446 . 3452) (3438 . 3446) (3421 . 3438) 3337) nil (25712 63121 474212 838000) 0 nil])
([nil nil ((3472 . 3482) (t 25712 63121 479896 75000)) nil (25712 63128 16054 720000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 3480) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . 1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (t 25712 63128 19908 870000)) nil (25712 63130 231124 959000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 3480) (undo-tree-id2094 . 1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1)) nil (25712 63130 231108 896000) 0 nil])
([nil nil ((apply yas--snippet-revive 3473 3485 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (3473 . 3485) (#("getMessage()" 0 12 (fontified nil)) . 3473) (3473 . 3485) (#("getMessage(): String" 0 20 (fontified nil)) . -3473) (3473 . 3493) (3472 . 3473) (#("." 0 1 (fontified t)) . -3472) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) 3473 (#("display" 0 7 (fontified t)) . 3473) (undo-tree-id2117 . -6) (undo-tree-id2118 . -7) (undo-tree-id2119 . -7) (undo-tree-id2120 . -7) (undo-tree-id2121 . -7) (t 25712 63130 236579 884000)) nil (25712 63146 292841 611000) 0 nil])
([nil nil ((3508 . 3512) (#("  " 0 2 (fontified nil)) . -3503) (3505 . 3510) (3486 . 3505) (t 25712 63146 296611 532000) 3484) nil (25712 63153 242958 824000) 0 nil])
([nil nil ((3621 . 3624) (3616 . 3621) (apply yas--snippet-revive 3608 3617 #s(yas--snippet nil nil #s(yas--exit 3616 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3616 nil) 24 nil nil nil nil)) (3608 . 3617) (#("foreach($0)" 0 11 (fontified nil)) . 3608) (3608 . 3619) (#("foreach[U](f: Spawner => U): Unit" 0 33 (fontified nil)) . -3608) (3608 . 3641) (#("for" 0 3 (fontified t face font-lock-keyword-face)) . -3608) (undo-tree-id2122 . -3) 3611 (3607 . 3611) (3599 . 3607) (3584 . 3599) (#(" " 0 1 (fontified t)) . -3584) (undo-tree-id2123 . -1) (#("s" 0 1 (fontified t)) . -3585) (undo-tree-id2124 . -1) (#("p" 0 1 (fontified t)) . -3586) (undo-tree-id2125 . -1) (#("a" 0 1 (fontified t)) . -3587) (undo-tree-id2126 . -1) (#("w" 0 1 (fontified t)) . -3588) (undo-tree-id2127 . -1) (#("n" 0 1 (fontified t)) . -3589) (undo-tree-id2128 . -1) 3590 (3579 . 3590) (3575 . 3579) (#("  " 0 2 (fontified nil)) . -3570) (undo-tree-id2129 . -2) (3572 . 3577) (3557 . 3572) (t 25712 63153 246625 309000) 3543) nil (25712 63428 285551 228000) 0 nil])
([nil nil ((477 . 483) (t 25712 63428 290536 887000)) nil (25712 63448 970875 977000) 0 nil])
([nil nil ((477 . 478) (#("i" 0 1 (fontified t)) . 477) (undo-tree-id2130 . -1) (t 25712 63448 977249 183000)) nil (25712 63452 76528 290000) 0 nil])
([nil nil ((822 . 828) (t 25712 63452 80589 382000)) nil (25712 63459 590572 497000) 0 nil])
([nil nil ((apply yas--snippet-revive 2834 2846 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (2834 . 2846) (#("zipWithIndex" 0 12 (fontified nil)) . 2834) (2834 . 2846) (#("ind" 0 3 (fontified nil)) . 2834) (2834 . 2837) (#("zipWithIndex: List[(Spawner, Int)]" 0 34 (fontified nil)) . -2834) (2834 . 2868) (#("ind" 0 3 (fontified t)) . -2834) (undo-tree-id2136 . -3) 2837 (2834 . 2837) (#("p" 0 1 (fontified t)) . -2834) (undo-tree-id2137 . -1) (#("a" 0 1 (fontified t)) . -2835) (undo-tree-id2138 . -1) (#("i" 0 1 (fontified t)) . -2836) (undo-tree-id2139 . -1) (#("r" 0 1 (fontified t)) . -2837) (undo-tree-id2140 . -1) 2838 (2836 . 2838) (2834 . 2836) (#("m" 0 1 (fontified t)) . -2834) (undo-tree-id2141 . -1) 2835 (2834 . 2835) (#("i" 0 1 (fontified t)) . -2834) (undo-tree-id2142 . -1) (#("t" 0 1 (fontified t)) . -2835) (undo-tree-id2143 . -1) (#("e" 0 1 (fontified t)) . -2836) (undo-tree-id2144 . -1) (#("r" 0 1 (fontified t)) . -2837) (undo-tree-id2145 . -1) (#("a" 0 1 (fontified t)) . -2838) (undo-tree-id2146 . -1) (#("t" 0 1 (fontified t)) . -2839) (undo-tree-id2147 . -1) (#("o" 0 1 (fontified t)) . -2840) (undo-tree-id2148 . -1) (#("r" 0 1 (fontified t)) . -2841) (undo-tree-id2149 . -1) (#("." 0 1 (fontified t)) . -2842) (undo-tree-id2150 . -1) (#("w" 0 1 (fontified t)) . -2843) (undo-tree-id2151 . -1) 2844 (2833 . 2844) (#("." 0 1 (fontified t)) . -2833) (undo-tree-id2152 . -1) (#("w" 0 1 (fontified t)) . -2834) (undo-tree-id2153 . -1) (#("i" 0 1 (fontified t)) . -2835) (undo-tree-id2154 . -1) 2836 (2834 . 2836) (#("i" 0 1 (fontified t)) . -2834) (undo-tree-id2155 . -1) (#("n" 0 1 (fontified t)) . -2835) (undo-tree-id2156 . -1) 2836 (2834 . 2836) (#("w" 0 1 (fontified t)) . -2834) (undo-tree-id2157 . -1) 2835 (2833 . 2835) (t 25712 63459 597272 702000)) nil (25712 63509 708405 26000) 0 nil])
([nil nil ((2855 . 2860)) nil (25712 63509 708379 324000) 0 nil])
([nil nil ((2860 . 2861) (#("_" 0 1 (fontified t syntax-table (3) face font-lock-keyword-face)) . 2860) (undo-tree-id2134 . 1) (undo-tree-id2135 . -1)) nil (25712 63509 708377 439000) 0 nil])
([nil nil ((2860 . 2861) (#("j" 0 1 (fontified t)) . 2860)) nil (25712 63509 708372 689000) 0 nil])
([nil nil ((2862 . 2865) (2861 . 2862) (#("." 0 1 (fontified t)) . -2861) (undo-tree-id2131 . 1) (undo-tree-id2132 . -1) (#("." 0 1 (fontified t)) . -2862) (undo-tree-id2133 . -1) 2863 (2862 . 2863)) nil (25712 63509 708365 565000) 0 nil])
([nil nil ((2870 . 2874) (t 25712 63509 714051 179000)) nil (25712 63512 631070 948000) 0 nil])
([nil nil ((2591 . 2597) (t 25712 63512 637391 74000)) nil (25712 63545 287516 959000) 0 nil])
([nil nil ((2610 . 2611)) nil (25712 63545 287514 95000) 0 nil])
([nil nil ((2610 . 2614) (#("-" 0 1 (fontified t)) . -2610) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (#(" " 0 1 (fontified t)) . -2611) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) 2612 (2610 . 2612)) nil (25712 63545 287511 162000) 0 nil])
([nil nil ((2618 . 2623) (#("S" 0 1 (fontified t)) . -2618) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (#("e" 0 1 (fontified t)) . -2619) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) 2620 (2615 . 2620)) nil (25712 63545 287500 685000) 0 nil])
([nil nil ((2618 . 2621) (#("Array" 0 5 (fontified t)) . 2618) (undo-tree-id2166 . -4) (undo-tree-id2167 . -4) (undo-tree-id2168 . -4) (undo-tree-id2169 . -4) (undo-tree-id2170 . -4) (undo-tree-id2171 . -4) (undo-tree-id2172 . -4) (undo-tree-id2173 . -4) (undo-tree-id2174 . -4) (undo-tree-id2175 . -3) (undo-tree-id2176 . -3) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -5) (undo-tree-id2182 . -5) (t 25712 63545 294131 329000)) nil (25712 63555 450301 13000) 0 nil])
([nil nil ((3216 . 3217) (t 25712 63555 457487 667000)) nil (25712 63565 64390 746000) 0 nil])
([nil nil ((3247 . 3248) (#("1" 0 1 (fontified t face font-lock-constant-face)) . 3247) (undo-tree-id2187 . -1)) nil (25712 63566 792261 705000) 0 nil] [nil nil ((#("-" 0 1 (syntax-table (3) fontified t)) . 3244) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1)) ((3244 . 3245)) (25712 63565 64109 633000) 0 nil])
([nil nil ((apply yas--snippet-revive 3275 3282 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (3275 . 3282) (#("isEmpty" 0 7 (fontified nil)) . 3275) (3275 . 3282) (#("isEmpty: Boolean" 0 16 (fontified nil)) . -3275) (3275 . 3291) (#("isEm" 0 4 (fontified t)) . -3275) (undo-tree-id2188 . -4) (undo-tree-id2189 . -4) (undo-tree-id2190 . -4) 3279 (3274 . 3279) (#(" == 0" 0 1 (fontified t) 1 3 (syntax-table (3) fontified t) 3 4 (fontified t) 4 5 (fontified t face font-lock-constant-face)) . 3274) (undo-tree-id2191 . -4) (undo-tree-id2192 . -4) (undo-tree-id2193 . -4) (undo-tree-id2194 . -4) (undo-tree-id2195 . -5) (undo-tree-id2196 . -4) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -2) (undo-tree-id2200 . -2) (undo-tree-id2201 . -3) (undo-tree-id2202 . -3) (undo-tree-id2203 . -4) (undo-tree-id2204 . -4) (undo-tree-id2205 . -4) (undo-tree-id2206 . -5) (undo-tree-id2207 . -5) 3278 (t 25712 63566 797513 391000)) nil (25712 63575 331823 861000) 0 nil])
nil
([nil nil ((3691 . 3697) (3686 . 3691) (#("." 0 1 (fontified t)) . -3686) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) 3687 (3673 . 3687) (3670 . 3673) (#("h" 0 1 (fontified t)) . -3670) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (#("c" 0 1 (fontified t)) . -3671) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) 3672 (3657 . 3672) (3643 . 3657) (nil face font-lock-keyword-face 3642 . 3643) (nil fontified t 3642 . 3643) (3642 . 3643) (t 25712 63575 337532 802000) 3635) nil (25712 63620 588734 647000) 0 nil])
([nil nil ((#("              spawners.foreach(_.kill())
" 0 23 (fontified t) 23 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-9-face)) 31 32 (syntax-table (3) fontified t face font-lock-keyword-face) 32 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-1-face)) 38 39 (fontified t face (rainbow-delimiters-depth-1-face)) 39 40 (fontified t face (rainbow-delimiters-depth-9-face)) 40 41 (fontified t)) . 3698) (undo-tree-id2214 . -40) (undo-tree-id2215 . -41) (undo-tree-id2216 . -41) (undo-tree-id2217 . -39) (undo-tree-id2218 . -39) (undo-tree-id2219 . 2) (undo-tree-id2220 . -40) (undo-tree-id2221 . 11) (undo-tree-id2222 . -31) (undo-tree-id2223 . -14) (undo-tree-id2224 . -40) 3737 (t 25712 63620 594302 856000)) nil (25712 63632 421029 366000) 0 nil])
([nil nil ((3712 . 3723) (3697 . 3712) 3653) nil (25712 63632 421008 344000) 0 nil])
([nil nil ((3723 . 3727)) nil (25712 63632 421000 731000) 0 nil])
([nil nil ((3750 . 3752) (apply yas--snippet-revive 3744 3751 #s(yas--snippet nil nil #s(yas--exit 3750 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3750 nil) 27 nil nil nil nil)) (3744 . 3751) (#("sleep($0)" 0 9 (fontified nil)) . 3744) (3744 . 3753) (#("sleep(x$1: Long): Unit" 0 22 (fontified nil)) . -3744) (3744 . 3766) (#("slee" 0 4 (fontified t)) . -3744) (undo-tree-id2227 . -4) 3748 (3737 . 3748) (3720 . 3737) (#(" " 0 1 (fontified t)) . -3720) (undo-tree-id2228 . -1) (#("S" 0 1 (fontified t face font-lock-constant-face)) . -3721) (undo-tree-id2229 . -1) (#("y" 0 1 (fontified t face font-lock-constant-face)) . -3722) (undo-tree-id2230 . -1) (#("s" 0 1 (fontified t face font-lock-constant-face)) . -3723) (undo-tree-id2231 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -3724) (undo-tree-id2232 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -3725) (undo-tree-id2233 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -3726) (undo-tree-id2234 . -1) (#("." 0 1 (fontified t)) . -3727) (undo-tree-id2235 . -1) 3728 (3727 . 3728) (#("." 0 1 (fontified t)) . -3727) (undo-tree-id2236 . -1) (#("s" 0 1 (fontified t)) . -3728) (undo-tree-id2237 . -1) (#("l" 0 1 (fontified t)) . -3729) (undo-tree-id2238 . -1) 3730 (3721 . 3730) (#("S" 0 1 (fontified t face font-lock-constant-face)) . -3721) (undo-tree-id2239 . -1) (#("l" 0 1 (fontified t face font-lock-constant-face)) . -3722) (undo-tree-id2240 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -3723) (undo-tree-id2241 . -1) 3724 (3721 . 3724) (#("S" 0 1 (fontified t face font-lock-constant-face)) . -3721) (undo-tree-id2242 . -1) (#("y" 0 1 (fontified t face font-lock-constant-face)) . -3722) (undo-tree-id2243 . -1) (#("s" 0 1 (fontified t face font-lock-constant-face)) . -3723) (undo-tree-id2244 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -3724) (undo-tree-id2245 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -3725) (undo-tree-id2246 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -3726) (undo-tree-id2247 . -1) (#("." 0 1 (fontified t)) . -3727) (undo-tree-id2248 . -1) (#("e" 0 1 (fontified t)) . -3728) (undo-tree-id2249 . -1) (#("x" 0 1 (fontified t)) . -3729) (undo-tree-id2250 . -1) 3730 (3712 . 3730) (3697 . 3712) (t 25712 63632 427663 362000) 3671) nil (25712 63689 722514 115000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -3768) (undo-tree-id2225 . -2) (undo-tree-id2226 . -2) (3770 . 3771) (3753 . 3770) 3752) nil (25712 63689 722361 930000) 0 nil])
([nil nil ((3782 . 3784) (apply yas--snippet-revive 3777 3783 #s(yas--snippet nil nil #s(yas--exit 3782 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3782 nil) 28 nil nil nil nil)) (3777 . 3783) (#("exit($0)" 0 8 (fontified nil)) . 3777) (3777 . 3785) (#("exit(x$1: Int): Unit" 0 20 (fontified nil)) . -3777) (3777 . 3797) (3770 . 3777) (3753 . 3770) 3735) nil (25712 63689 722344 749000) 0 nil])
([nil nil ((3712 . 3729) (t 25712 63689 727795 694000)) nil (25712 63698 373280 805000) 0 nil])
([nil nil ((apply yas--snippet-revive 3734 3750 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (3734 . 3750) (#("executionContext" 0 16 (fontified nil)) . 3734) (3734 . 3750) (#("executionContext: ExecutionContextExecutor" 0 42 (fontified nil)) . -3734) (3734 . 3776) (#("exe" 0 3 (fontified t)) . -3734) (undo-tree-id2251 . -3) (undo-tree-id2252 . -3) (undo-tree-id2253 . -3) 3737 (3733 . 3737) (#("." 0 1 (fontified t)) . -3733) (undo-tree-id2254 . -1) (#("e" 0 1 (fontified t)) . -3734) (undo-tree-id2255 . -1) (#("x" 0 1 (fontified t)) . -3735) (undo-tree-id2256 . -1) 3736 (3731 . 3736) (#("x" 0 1 (fontified t)) . -3731) (undo-tree-id2257 . -1) (#("t" 0 1 (fontified t)) . -3732) (undo-tree-id2258 . -1) 3733 (3720 . 3733) (3715 . 3720) (#("o" 0 1 (fontified t)) . -3715) (undo-tree-id2259 . -1) 3716 (3712 . 3716) (3697 . 3712) (t 25712 63698 387815 798000) 3673) nil (25712 63714 25957 781000) 0 nil])
([nil nil ((#("              implicit val ec = ctx.executionContext
" 0 14 (fontified t) 14 22 (fontified t face scala-font-lock:implicit-face) 22 23 (fontified t) 23 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t) 27 29 (fontified t face font-lock-variable-name-face) 29 30 (fontified t) 30 31 (fontified t face font-lock-keyword-face) 31 36 (fontified t) 36 52 (fontified t) 52 53 (fontified t)) . 3698) (undo-tree-id2265 . -52) (undo-tree-id2266 . 1) (undo-tree-id2267 . -53) (undo-tree-id2268 . -53) (undo-tree-id2269 . -31) (undo-tree-id2270 . -31) 3729 (t 25712 63714 31185 512000)) nil (25712 63737 469525 143000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2499 . 2500) (#("
" 0 1 (fontified nil)) . -2538) (2486 . 2539) (nil face font-lock-keyword-face 2485 . 2486) (nil fontified t 2485 . 2486) (2485 . 2486) 2460) nil (25712 63737 469517 460000) 0 nil])
([nil nil ((#("              " 0 13 (fontified nil) 13 14 (fontified nil rear-nonsticky t)) . -2498) (undo-tree-id2263 . -14) (undo-tree-id2264 . -14) (2486 . 2498) 2500) nil (25712 63737 469514 177000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -2496) (undo-tree-id2262 . -12) (2486 . 2496) 2500) nil (25712 63737 469509 987000) 0 nil])
([nil nil ((#("          " 0 10 (fontified nil)) . -2494) (undo-tree-id2261 . -10) (2486 . 2494) 2500) nil (25712 63737 469506 216000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -2492) (undo-tree-id2260 . -8) (2486 . 2492) 2500) nil (25712 63737 469498 952000) 0 nil])
([nil nil ((#("      implicit val ec = ctx.executionContext
" 0 6 (fontified t) 6 14 (fontified t face scala-font-lock:implicit-face) 14 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-variable-name-face) 21 22 (fontified t) 22 23 (fontified t face font-lock-keyword-face) 23 28 (fontified t) 28 44 (fontified t) 44 45 (fontified t)) . 2486) (undo-tree-id2281 . -44) (undo-tree-id2282 . -44) (undo-tree-id2283 . -45) (undo-tree-id2284 . -45) (undo-tree-id2285 . -25) (undo-tree-id2286 . -25) 2511 (t 25712 63737 477906 861000)) nil (25712 63750 717665 923000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2703 . 2704) (#("
" 0 1 (fontified nil)) . -2742) (2698 . 2743) (nil face font-lock-keyword-face 2697 . 2698) (nil fontified t 2697 . 2698) (2697 . 2698) 2648) nil (25712 63750 717658 241000) 0 nil])
([nil nil ((#("      " 0 5 (fontified nil) 5 6 (rear-nonsticky t fontified nil)) . -2706) (undo-tree-id2271 . -6) (undo-tree-id2272 . -6) (undo-tree-id2273 . -6) (undo-tree-id2274 . -6) (undo-tree-id2275 . -6) (undo-tree-id2276 . -6) (undo-tree-id2277 . -6) (undo-tree-id2278 . -6) (undo-tree-id2279 . -6) (undo-tree-id2280 . -6) (2698 . 2706) 2704) nil (25712 63750 717650 698000) 0 nil])
([nil nil ((#("        implicit val ec = ctx.executionContext
" 0 8 (fontified t) 8 16 (fontified t face scala-font-lock:implicit-face) 16 17 (fontified t) 17 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 23 (fontified t face font-lock-variable-name-face) 23 24 (fontified t) 24 25 (fontified t face font-lock-keyword-face) 25 30 (fontified t) 30 46 (fontified t) 46 47 (fontified t)) . 2698) (undo-tree-id2302 . -46) (undo-tree-id2303 . -46) (undo-tree-id2304 . -47) (undo-tree-id2305 . -47) (undo-tree-id2306 . -6) (undo-tree-id2307 . -6) 2704 (t 25712 63750 724604 500000)) nil (25712 63771 571188 66000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2531 . 2532) (#("
" 0 1 (fontified nil)) . -2570) (2523 . 2571) 2492) nil (25712 63771 571181 431000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -2530) (undo-tree-id2301 . -8) (2524 . 2530) 2532) nil (25712 63771 571178 568000) 0 nil])
([nil nil ((#("      implicit val ec = ctx.executionContext
" 0 6 (fontified t) 6 14 (fontified t face scala-font-lock:implicit-face) 14 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-variable-name-face) 21 22 (fontified t) 22 23 (fontified t face font-lock-keyword-face) 23 28 (fontified t) 28 44 (fontified t) 44 45 (fontified t)) . 2524) (undo-tree-id2296 . -44) (undo-tree-id2297 . -44) (undo-tree-id2298 . -45) (undo-tree-id2299 . -45) (undo-tree-id2300 . -8) 2532) nil (25712 63771 571175 215000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2491 . 2492) (#("
" 0 1 (fontified nil)) . -2530) (2486 . 2531) (nil face font-lock-keyword-face 2485 . 2486) (nil fontified t 2485 . 2486) (2485 . 2486) 2429) nil (25712 63771 571169 139000) 0 nil])
([nil nil ((2481 . 2484) (#("j" 0 1 (fontified t)) . 2481)) nil (25712 63771 571165 298000) 0 nil])
([nil nil ((2561 . 2564) (#("s" 0 1 (fontified t)) . -2561) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) 2562 (2561 . 2562) (#("j" 0 1 (fontified t)) . 2561) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1)) nil (25712 63771 571158 34000) 0 nil])
([nil nil ((2690 . 2693) (#("j" 0 1 (fontified t)) . 2690) (t 25712 63771 578061 371000)) nil (25712 63783 340524 738000) 0 nil])
([nil nil ((#("      dependencyLoader.add(Main.lib.resolve(\"Timer.jar\").toFile.toURI().toURL())
      spawn ! JoinCluster(Main.host, \"9000\")
      spawn ! SpawnActor(Main.mainActor)
      Behaviors.empty[Nothing]
" 0 3 (fontified t) 3 6 (fontified t) 6 11 (fontified t) 11 12 (fontified t) 12 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-5-face)) 27 31 (fontified t face font-lock-constant-face) 31 38 (fontified t) 38 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-6-face)) 44 45 (syntax-table (7) fontified t face font-lock-string-face) 45 46 (fontified t face font-lock-string-face) 46 47 (fontified t face font-lock-string-face) 47 51 (fontified t face font-lock-string-face) 51 52 (fontified t face font-lock-string-face) 52 54 (fontified t face font-lock-string-face) 54 55 (syntax-table (7) fontified t face font-lock-string-face) 55 56 (fontified t face (rainbow-delimiters-depth-6-face)) 56 61 (fontified t) 61 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-6-face)) 70 71 (fontified t face (rainbow-delimiters-depth-6-face)) 71 73 (fontified t) 73 74 (fontified t) 74 77 (fontified t) 77 78 (fontified t face (rainbow-delimiters-depth-6-face)) 78 79 (fontified t face (rainbow-delimiters-depth-6-face)) 79 80 (fontified t face (rainbow-delimiters-depth-5-face)) 80 81 (fontified t) 81 87 (fontified t) 87 88 (fontified t) 88 95 (fontified t) 95 99 (fontified t face font-lock-constant-face) 99 100 (fontified t face font-lock-constant-face) 100 102 (fontified t face font-lock-constant-face) 102 106 (fontified t face font-lock-constant-face) 106 107 (fontified t face (rainbow-delimiters-depth-5-face)) 107 111 (fontified t face font-lock-constant-face) 111 118 (fontified t) 118 119 (syntax-table (7) fontified t face font-lock-string-face) 119 123 (fontified t face font-lock-string-face) 123 124 (syntax-table (7) fontified t face font-lock-string-face) 124 125 (fontified t face (rainbow-delimiters-depth-5-face)) 125 126 (fontified t) 126 132 (fontified t) 132 140 (fontified t) 140 142 (fontified t face font-lock-constant-face) 142 144 (fontified t face font-lock-constant-face) 144 150 (fontified t face font-lock-constant-face) 150 151 (fontified t face (rainbow-delimiters-depth-5-face)) 151 155 (fontified t face font-lock-constant-face) 155 165 (fontified t) 165 166 (fontified t face (rainbow-delimiters-depth-5-face)) 166 167 (fontified t) 167 173 (fontified t) 173 182 (fontified t face font-lock-constant-face) 182 184 (fontified t) 184 186 (fontified t) 186 188 (fontified t) 188 189 (fontified t face (rainbow-delimiters-depth-5-face)) 189 196 (fontified t face font-lock-constant-face) 196 197 (fontified t face (rainbow-delimiters-depth-5-face)) 197 198 (fontified t)) . 3931) (undo-tree-id2308 . -197) (undo-tree-id2309 . -175) (undo-tree-id2310 . -8) (undo-tree-id2311 . -175) (undo-tree-id2312 . -198) (undo-tree-id2313 . -198) (undo-tree-id2314 . -81) (undo-tree-id2315 . -81) (undo-tree-id2316 . -126) (undo-tree-id2317 . -126) (undo-tree-id2318 . -167) (undo-tree-id2319 . -167) (undo-tree-id2320 . -6) (undo-tree-id2321 . -22) (undo-tree-id2322 . -27) (undo-tree-id2323 . -35) (undo-tree-id2324 . -95) (undo-tree-id2325 . -106) (undo-tree-id2326 . -107) (undo-tree-id2327 . -116) (undo-tree-id2328 . -140) (undo-tree-id2329 . -150) (undo-tree-id2330 . -151) (undo-tree-id2331 . -165) (undo-tree-id2332 . -175) (undo-tree-id2333 . -175) (undo-tree-id2334 . -8) (undo-tree-id2335 . -175) 4106 (t 25712 63783 348140 604000)) nil (25712 63804 706537 403000) 0 nil])
([nil nil ((3937 . 3952) (3930 . 3937) (t 25712 63804 714948 560000) 3929) nil (25712 63834 115199 840000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -3931) (undo-tree-id2336 . -6) (undo-tree-id2337 . -6) (undo-tree-id2338 . -6) (undo-tree-id2339 . -6) (undo-tree-id2340 . -6) (undo-tree-id2341 . -6) 3937 (3930 . 3937) 3929) nil (25712 63834 115192 157000) 0 nil])
([nil nil ((3954 . 3956) (apply yas--snippet-revive 3946 3955 #s(yas--snippet nil nil #s(yas--exit 3954 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3954 nil) 30 nil nil nil nil)) (3946 . 3955) (#("foreach($0)" 0 11 (fontified nil)) . 3946) (3946 . 3957) (#("foreach[U](f: Spawner => U): Unit" 0 33 (fontified nil)) . -3946) (3946 . 3979) (#("forea" 0 5 (fontified t)) . -3946) (undo-tree-id2378 . -5) 3951 (3937 . 3951) (#("a" 0 1 (fontified t)) . -3937) (undo-tree-id2379 . -1) (#("s" 0 1 (fontified t face font-lock-keyword-face)) . -3938) (undo-tree-id2380 . -1) 3939 (3938 . 3939) (#("c" 0 1 (fontified t)) . -3938) (undo-tree-id2381 . -1) (#("t" 0 1 (fontified t)) . -3939) (undo-tree-id2382 . -1) (#("o" 0 1 (fontified t)) . -3940) (undo-tree-id2383 . -1) (#("r" 0 1 (fontified t)) . -3941) (undo-tree-id2384 . -1) 3942 (3937 . 3942) (3930 . 3937) (t 25712 63834 121804 529000) 3922) nil (25712 63874 506331 593000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -3973) (undo-tree-id2347 . -2) (undo-tree-id2348 . -2) (undo-tree-id2349 . -2) (undo-tree-id2350 . -2) (undo-tree-id2351 . -2) (undo-tree-id2352 . -2) (undo-tree-id2353 . -2) (3975 . 3976) (3966 . 3975) (3953 . 3966) (#("(_.)" 0 1 (fontified t face (rainbow-delimiters-depth-5-face)) 1 2 (fontified t syntax-table (3) face font-lock-keyword-face) 2 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-5-face))) . 3953) (undo-tree-id2354 . -3) (undo-tree-id2355 . 1) (undo-tree-id2356 . -1) (undo-tree-id2357 . 1) (undo-tree-id2358 . -3) (undo-tree-id2359 . -4) (undo-tree-id2360 . -3) (undo-tree-id2361 . -3) (undo-tree-id2362 . -3) (undo-tree-id2363 . -3) (undo-tree-id2364 . -2) (undo-tree-id2365 . -2) (undo-tree-id2366 . -2) (undo-tree-id2367 . -2) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . 4) (undo-tree-id2373 . -1) (undo-tree-id2374 . 1) (undo-tree-id2375 . -4) (undo-tree-id2376 . -4) (undo-tree-id2377 . -4)) nil (25712 63874 506320 69000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -3989) (undo-tree-id2342 . -2) (undo-tree-id2343 . -2) (undo-tree-id2344 . -2) (undo-tree-id2345 . -2) (undo-tree-id2346 . -2) (3991 . 3992) (3980 . 3991) (3975 . 3980) (3967 . 3975) (nil face font-lock-keyword-face 3966 . 3967) (nil fontified t 3966 . 3967) (3966 . 3967) 3937) nil (25712 63874 506228 925000) 0 nil])
([nil nil ((3996 . 4011) (3991 . 3996) (3980 . 3991) 3975) nil (25712 63874 506208 601000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4010) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (#("c" 0 1 (fontified t)) . -4011) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (#("t" 0 1 (fontified t)) . -4012) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (#("x" 0 1 (fontified t)) . -4013) (undo-tree-id2391 . -1) 4014 (4010 . 4014) (t 25712 63874 515388 716000)) nil (25712 63883 805255 712000) 0 nil])
([nil nil ((518 . 525) (#("SystemCommand" 0 13 (fontified t face font-lock-constant-face)) . 518) (undo-tree-id2392 . -12) (undo-tree-id2393 . -1) (undo-tree-id2394 . -13) (undo-tree-id2395 . -13) (t 25712 63883 812111 691000)) nil (25712 63927 449826 272000) 0 nil])
([nil nil ((528 . 534) (#("s" 0 1 (fontified t)) . -528) (undo-tree-id2411 . -1) (#("p" 0 1 (fontified t)) . -529) (undo-tree-id2412 . -1) 530 (#("a" 0 1 (fontified t)) . -530) (undo-tree-id2413 . -1) (#("w" 0 1 (fontified t)) . -531) (undo-tree-id2414 . -1) (#("n" 0 1 (fontified t)) . -532) (undo-tree-id2415 . -1) 533 (528 . 533) (#("a" 0 1 (fontified t)) . -528) (undo-tree-id2416 . -1) (#("c" 0 1 (fontified t)) . -529) (undo-tree-id2417 . -1) (#("t" 0 1 (fontified t)) . -530) (undo-tree-id2418 . -1) (#("o" 0 1 (fontified t)) . -531) (undo-tree-id2419 . -1) (#("r" 0 1 (fontified t)) . -532) (undo-tree-id2420 . -1) 533 (526 . 533) (t 25712 63927 459035 997000)) nil (25712 63956 689147 3000) 0 nil])
([nil nil ((497 . 504) (#("system" 0 6 (fontified t)) . 497) (undo-tree-id2410 . -5)) nil (25712 63956 689135 549000) 0 nil])
([nil nil ((558 . 560) (537 . 558) (#("S" 0 1 (fontified t face font-lock-type-face)) . -537) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -538) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -539) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (#("w" 0 1 (fontified t face font-lock-type-face)) . -540) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -541) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -542) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -543) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) 544 (542 . 544) (535 . 542)) nil (25712 63956 689126 470000) 0 nil])
([nil nil ((4033 . 4038) (t 25712 63956 695869 372000)) nil (25712 63990 352853 600000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -4071) (undo-tree-id2437 . -2) (undo-tree-id2438 . -2) (undo-tree-id2439 . -2) (undo-tree-id2440 . -2) (4073 . 4074) (4062 . 4073) (4054 . 4062) (t 25712 63990 362722 561000)) nil (25712 64011 302475 128000) 0 nil])
([nil nil ((4120 . 4121) (apply yas--snippet-revive 4108 4120 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (4108 . 4120) (#("getMessage()" 0 12 (fontified nil)) . 4108) (4108 . 4120) (#("getMessage(): String" 0 20 (fontified nil)) . -4108) (4108 . 4128) (#("getM" 0 4 (fontified t)) . -4108) (undo-tree-id2421 . -4) (undo-tree-id2422 . -3) (undo-tree-id2423 . -3) (undo-tree-id2424 . -4) (undo-tree-id2425 . -4) (undo-tree-id2426 . -4) (undo-tree-id2427 . -4) (undo-tree-id2428 . -4) (undo-tree-id2429 . -4) (undo-tree-id2430 . -4) 4112 (4110 . 4112) (4105 . 4110) (#("f" 0 1 (fontified t)) . -4105) (undo-tree-id2431 . -1) 4106 (4105 . 4106) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . -4105) (undo-tree-id2432 . -1) (#("s" 0 1 (fontified t)) . -4106) (undo-tree-id2433 . -1) (#("\"" 0 1 (fontified t)) . -4107) (undo-tree-id2434 . -1) (#("$" 0 1 (fontified t syntax-table (1))) . -4108) (undo-tree-id2435 . -1) 4109 (4100 . 4109) (#("E" 0 1 (fontified t face font-lock-constant-face)) . -4100) (undo-tree-id2436 . -1) 4101 (4089 . 4101) (4073 . 4089) (4062 . 4073) 4053) nil (25712 64011 302463 883000) 0 nil])
([nil nil ((4137 . 4142) (#("  " 0 2 (fontified nil)) . -4132) (4134 . 4139) (4121 . 4134) (t 25712 64011 312835 846000) 4120) nil (25712 64014 784320 535000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4141) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1)) nil (25712 64014 784313 271000) 0 nil])
([nil nil ((1350 . 1364) (1339 . 1350) (#("|" 0 1 (fontified t)) . -1339) (undo-tree-id2492 . -1) (#(" " 0 1 (fontified t)) . -1340) (undo-tree-id2493 . -1) 1341 (1333 . 1341) (#("p" 0 1 (fontified t)) . -1333) (undo-tree-id2494 . -1) (#("a" 0 1 (fontified t)) . -1334) (undo-tree-id2495 . -1) (#("t" 0 1 (fontified t)) . -1335) (undo-tree-id2496 . -1) (#("h" 0 1 (fontified t)) . -1336) (undo-tree-id2497 . -1) (#("\"" 0 1 (fontified t syntax-table (7) face font-lock-string-face)) . -1337) (undo-tree-id2498 . -1) 1338 (1325 . 1338) (#(" " 0 1 (fontified t)) . -1325) (undo-tree-id2499 . -1) (#(" " 0 1 (fontified t)) . -1326) (undo-tree-id2500 . -1) 1327 (1320 . 1327) (t 25712 64014 792854 464000) 1304) nil (25712 64606 978108 966000) 0 nil])
([nil nil ((#("    case \"--help\" :: tail | \"-help\" :: tail
" 0 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t syntax-table (7) face font-lock-string-face) 10 12 (fontified t face font-lock-string-face) 12 16 (fontified t face font-lock-string-face) 16 17 (fontified t syntax-table (7) face font-lock-string-face) 17 18 (fontified t) 18 20 (fontified t syntax-table (3) face font-lock-constant-face) 20 21 (fontified t) 21 25 (fontified t face font-lock-type-face) 25 28 (fontified t) 28 29 (fontified t syntax-table (7) face font-lock-string-face) 29 34 (fontified t face font-lock-string-face) 34 35 (fontified t syntax-table (7) face font-lock-string-face) 35 36 (fontified t) 36 38 (fontified t syntax-table (3) face font-lock-constant-face) 38 39 (fontified t) 39 43 (fontified t face font-lock-type-face) 43 44 (fontified t)) . 1321) (undo-tree-id2444 . -43) (undo-tree-id2445 . 1) (undo-tree-id2446 . -44) (undo-tree-id2447 . -44) (undo-tree-id2448 . -42) (undo-tree-id2449 . -34) (undo-tree-id2450 . -34) (undo-tree-id2451 . -34) (undo-tree-id2452 . -34) (undo-tree-id2453 . -34) (undo-tree-id2454 . -34) (undo-tree-id2455 . -34) (undo-tree-id2456 . -34) (undo-tree-id2457 . -35) (undo-tree-id2458 . -35) (undo-tree-id2459 . -35) (undo-tree-id2460 . -35) (undo-tree-id2461 . -35) (undo-tree-id2462 . -35) (undo-tree-id2463 . -35) (undo-tree-id2464 . -35) (undo-tree-id2465 . -39) (undo-tree-id2466 . -39) (undo-tree-id2467 . -39) (undo-tree-id2468 . -39) (undo-tree-id2469 . -39) (undo-tree-id2470 . -39) (undo-tree-id2471 . -39) (undo-tree-id2472 . -39) (undo-tree-id2473 . -39) (undo-tree-id2474 . -39) (undo-tree-id2475 . -39) (undo-tree-id2476 . -39) (undo-tree-id2477 . 1) (undo-tree-id2478 . -43) (undo-tree-id2479 . -43) (undo-tree-id2480 . -43) (undo-tree-id2481 . -43) (undo-tree-id2482 . -43) (undo-tree-id2483 . -43) (undo-tree-id2484 . -42) (undo-tree-id2485 . -42) (undo-tree-id2486 . -42) (undo-tree-id2487 . -42) (undo-tree-id2488 . -42) (undo-tree-id2489 . -42) (undo-tree-id2490 . -42) (undo-tree-id2491 . -44) 1363) nil (25712 64606 978094 998000) 0 nil])
([nil nil ((1348 . 1355) (#(" " 0 1 (fontified t)) . 1348) (undo-tree-id2443 . -1)) nil (25712 64606 978055 467000) 0 nil])
([nil nil ((1408 . 1413) (#("  " 0 2 (fontified nil)) . -1407) (undo-tree-id2508 . -2) (undo-tree-id2509 . -2) (undo-tree-id2510 . -2) (undo-tree-id2511 . -2) (1409 . 1410) (1400 . 1409) (1398 . 1400) (1386 . 1398) (#("w" 0 1 (fontified t)) . -1386) (undo-tree-id2512 . -1) (#("o" 0 1 (fontified t)) . -1387) (undo-tree-id2513 . -1) 1388 (1380 . 1388) (#(" " 0 1 (fontified t)) . -1380) (undo-tree-id2514 . -1) 1381 (1378 . 1381) (1358 . 1378) (1355 . 1358) (1349 . 1355) (nil face font-lock-keyword-face 1348 . 1349) (nil fontified t 1348 . 1349) (1348 . 1349) (t 25712 64606 985449 842000) 1327) nil (25712 64635 182521 381000) 0 nil])
([nil nil ((1413 . 1414) (#("      " 0 6 (fontified nil)) . 1413) (undo-tree-id2501 . 6) (undo-tree-id2502 . 6) (#("
" 0 1 (fontified t)) . -1413) (undo-tree-id2503 . 1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . 1) (undo-tree-id2507 . -1) 1412) nil (25712 64635 182507 203000) 0 nil])
([nil nil ((1465 . 1479) (1444 . 1465) (1441 . 1444) (1420 . 1441) (1409 . 1420) (1400 . 1409) (t 25712 64635 192221 98000) 1361) nil (25712 64680 366635 246000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1487 . 1488) (#("
" 0 1 (fontified nil)) . -1558) (1479 . 1559) 1478 (t 25712 64680 375719 724000)) nil (25712 64735 976620 710000) 0 nil])
([nil nil ((1534 . 1541) (#("(" 0 1 (fontified t face font-lock-string-face)) . -1534) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (#("9" 0 1 (fontified t face font-lock-string-face)) . -1535) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (#("9" 0 1 (fontified t face font-lock-string-face)) . -1536) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) 1537 (1530 . 1537) (#("v" 0 1 (fontified t face font-lock-string-face)) . -1530) (undo-tree-id2522 . -1) 1531 (1517 . 1531) (1510 . 1517) (1504 . 1510) (#("p" 0 1 (fontified t face font-lock-string-face)) . -1504) (undo-tree-id2523 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -1505) (undo-tree-id2524 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -1506) (undo-tree-id2525 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1507) (undo-tree-id2526 . -1) 1508 (1497 . 1508) (#("--actors <path> - path to writable directory for extensions" 0 2 (fontified t face font-lock-string-face) 2 45 (fontified t face font-lock-string-face) 45 48 (fontified t face font-lock-string-face) 48 49 (fontified t face font-lock-string-face) 49 59 (fontified t face font-lock-string-face)) . 1497) (undo-tree-id2527 . -58)) nil (25712 64735 976612 119000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1607) (1543 . 1608) 1542 (t 25712 64735 985919 672000)) nil (25712 65258 578225 980000) 0 nil])
([nil nil ((1563 . 1567) (#("port" 0 4 (fontified t face font-lock-string-face)) . 1563) (undo-tree-id2555 . -3)) nil (25712 65258 578223 116000) 0 nil])
([nil nil ((1569 . 1573) (#("port" 0 4 (fontified t face font-lock-string-face)) . 1569) (undo-tree-id2554 . -3)) nil (25712 65258 578219 764000) 0 nil])
([nil nil ((1569 . 1571) (#("host" 0 4 (fontified t face font-lock-string-face)) . 1569) (undo-tree-id2553 . -3)) nil (25712 65258 578216 412000) 0 nil])
([nil nil ((1596 . 1600) (#("g" 0 1 (fontified t face font-lock-string-face)) . -1596) (undo-tree-id2528 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -1597) (undo-tree-id2529 . -1) 1598 (1577 . 1598) (1575 . 1577) (#("port for cluster bind" 0 21 (fontified t face font-lock-string-face)) . 1575) (undo-tree-id2530 . -20) (undo-tree-id2531 . -20) (undo-tree-id2532 . -20) (undo-tree-id2533 . -20) (undo-tree-id2534 . -21) (undo-tree-id2535 . -20) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -8) (undo-tree-id2543 . -8) (undo-tree-id2544 . -20) (undo-tree-id2545 . -20) (undo-tree-id2546 . -20) (undo-tree-id2547 . -20) (undo-tree-id2548 . -20) (undo-tree-id2549 . -20) (undo-tree-id2550 . -20) (undo-tree-id2551 . -21) (undo-tree-id2552 . -21) 1595) nil (25712 65258 578207 402000) 0 nil])
([nil nil ((1027 . 1037) (1006 . 1027) (1004 . 1006) (nil face font-lock-string-face 1003 . 1004) (nil fontified t 1003 . 1004) (1003 . 1004) (t 25712 65258 584336 238000) 993) nil (25712 65416 372728 121000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1709) (1643 . 1710) 1610 (t 25712 65416 381502 567000)) nil (25712 65445 646039 139000) 0 nil])
([nil nil ((1663 . 1667) (#("bind" 0 4 (fontified t face font-lock-string-face)) . 1663) (undo-tree-id2576 . -3)) nil (25712 65445 646036 834000) 0 nil])
([nil nil ((1671 . 1676)) nil (25712 65445 646034 41000) 0 nil])
([nil nil ((1691 . 1698) (#("l" 0 1 (fontified t face font-lock-string-face)) . -1691) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) 1692 (1688 . 1692) (1680 . 1688) (#("cluster network interface (9999)" 0 32 (fontified t face font-lock-string-face)) . 1680) (undo-tree-id2561 . -31) (undo-tree-id2562 . -31) (undo-tree-id2563 . -31) (undo-tree-id2564 . -31) (undo-tree-id2565 . -32) (undo-tree-id2566 . -31) (undo-tree-id2567 . 1) (undo-tree-id2568 . -32) (undo-tree-id2569 . 6) (undo-tree-id2570 . -27) (undo-tree-id2571 . -31) (undo-tree-id2572 . -31) (undo-tree-id2573 . -31) (undo-tree-id2574 . -32) (undo-tree-id2575 . -32) 1711) nil (25712 65445 646030 688000) 0 nil])
([nil nil ((1636 . 1645) (#("9999" 0 4 (fontified t face font-lock-string-face)) . 1636) (undo-tree-id2556 . -3) (undo-tree-id2557 . -4) (undo-tree-id2558 . -4)) nil (25712 65445 646012 879000) 0 nil])
([nil nil ((959 . 964) (952 . 959) (940 . 952) (apply yas--snippet-revive 929 940 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (929 . 940) (#("getProperty" 0 11 (fontified nil)) . 929) (929 . 940) (#("getProperty(x$1: String): String" 0 32 (fontified nil)) . -929) (929 . 961) (#("Prope" 0 5 (fontified t face font-lock-constant-face)) . -929) (undo-tree-id2581 . -5) 934 (929 . 934) (#("p" 0 1 (fontified t)) . -929) (undo-tree-id2582 . -1) 930 (922 . 930) (t 25712 65445 654927 707000)) nil (25712 65479 779804 542000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -1005) (undo-tree-id2577 . -2) (undo-tree-id2578 . -2) (undo-tree-id2579 . -2) (undo-tree-id2580 . -2) (1007 . 1008) (1002 . 1007) 963) nil (25712 65479 779797 278000) 0 nil])
([nil nil ((964 . 978)) nil (25712 65479 779784 78000) 0 nil])
([nil nil ((969 . 970)) nil (25712 65479 779781 634000) 0 nil])
([nil nil ((975 . 976)) nil (25712 65479 779775 488000) 0 nil])
([nil nil ((1061 . 1064) (1046 . 1061) (1029 . 1046) (#("w" 0 1 (fontified t)) . -1029) (undo-tree-id2586 . -1) (#("i" 0 1 (fontified t)) . -1030) (undo-tree-id2587 . -1) (#("n" 0 1 (fontified t)) . -1031) (undo-tree-id2588 . -1) (#("d" 0 1 (fontified t)) . -1032) (undo-tree-id2589 . -1) 1033 (1028 . 1033) (#("  " 0 2 (fontified nil)) . -1023) (1025 . 1030) (1018 . 1025) (t 25712 65479 788367 786000) 975) nil (25712 65514 861210 823000) 0 nil])
([nil nil ((1054 . 1061) (1050 . 1054)) nil (25712 65514 861202 233000) 0 nil])
([nil nil ((1066 . 1068) (#("/" 0 1 (fontified t face font-lock-string-face)) . 1066) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1)) nil (25712 65514 861195 458000) 0 nil])
([nil nil ((1121 . 1129) (#("o" 0 1 (fontified t)) . -1121) (undo-tree-id2591 . -1) 1122 (1113 . 1122) (1111 . 1113) (#("\"" 0 1 (fontified t)) . -1111) (undo-tree-id2592 . -1) (#("U" 0 1 (fontified t face font-lock-constant-face)) . -1112) (undo-tree-id2593 . -1) 1113 (1112 . 1113) (1091 . 1112) (#("P" 0 1 (fontified t face font-lock-constant-face)) . -1091) (undo-tree-id2594 . -1) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -1092) (undo-tree-id2595 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -1093) (undo-tree-id2596 . -1) (#("h" 0 1 (fontified t face font-lock-constant-face)) . -1094) (undo-tree-id2597 . -1) (#("." 0 1 (fontified t)) . -1095) (undo-tree-id2598 . -1) (#("o" 0 1 (fontified t)) . -1096) (undo-tree-id2599 . -1) (#("f" 0 1 (fontified t)) . -1097) (undo-tree-id2600 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1098) (undo-tree-id2601 . -1) 1099 (1091 . 1099) (1086 . 1091) (#("  " 0 2 (fontified nil)) . -1081) (1083 . 1088) (1076 . 1083) (t 25712 65514 868477 173000) 1067) nil (25713 2 583140 385000) 0 nil])
([nil nil ((1086 . 1087) (#("_" 0 1 (fontified t syntax-table (3) face font-lock-keyword-face)) . 1086) (undo-tree-id2590 . -1)) nil (25713 2 583120 759000) 0 nil])
([nil nil ((1571 . 1581) (1564 . 1571) (1553 . 1564) (#(":" 0 1 (fontified t face font-lock-keyword-face)) . -1553) (undo-tree-id2602 . -1) (#(" " 0 1 (fontified t)) . -1554) (undo-tree-id2603 . -1) (#(":" 0 1 (fontified t face font-lock-keyword-face)) . -1555) (undo-tree-id2604 . -1) 1556 (1540 . 1556) (1537 . 1540) (#("  " 0 2 (fontified nil)) . -1532) (1534 . 1539) (1527 . 1534) (t 25713 2 591884 309000) 1526) nil (25713 46 891705 184000) 0 nil])
([nil nil ((1592 . 1594) (1571 . 1592) (1565 . 1571) (nil face font-lock-keyword-face 1564 . 1565) (nil fontified t 1564 . 1565) (1564 . 1565) 1543) nil (25713 46 891687 95000) 0 nil])
([nil nil ((4793 . 4806) (4786 . 4793) (t 25713 46 902021 809000) 4783) nil (25713 84 56679 419000) 0 nil])
([nil nil ((#("      if (this.join
" 0 6 (fontified t) 6 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-5-face)) 10 14 (fontified t face font-lock-keyword-face) 14 19 (fontified t) 19 20 (fontified t)) . 4787) (undo-tree-id2620 . -19) (undo-tree-id2621 . 1) (undo-tree-id2622 . -20) (undo-tree-id2623 . -20) (undo-tree-id2624 . -18) (undo-tree-id2625 . -18) (undo-tree-id2626 . -10) (undo-tree-id2627 . 1) (undo-tree-id2628 . -18) (undo-tree-id2629 . -18) (undo-tree-id2630 . -18) (undo-tree-id2631 . -18) (undo-tree-id2632 . -20) 4805) nil (25713 84 56675 648000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -4825) (undo-tree-id2605 . -2) (undo-tree-id2606 . -2) (undo-tree-id2607 . -2) (undo-tree-id2608 . -2) (undo-tree-id2609 . -2) (undo-tree-id2610 . -2) (undo-tree-id2611 . -2) (4827 . 4828) (4818 . 4827) (4815 . 4818) (#("=" 0 1 (fontified t face font-lock-keyword-face)) . -4815) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) 4816 (4811 . 4816) (#(" " 0 1 (fontified t)) . -4811) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -4812) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) 4813 (4801 . 4813) (4794 . 4801) (4788 . 4794) (#("      " 0 6 (fontified nil)) . 4787) (undo-tree-id2618 . -6) (undo-tree-id2619 . -6) (4793 . 4794) (4786 . 4793) 4779) nil (25713 84 56658 117000) 0 nil])
([nil nil ((#("      this.join.foreach { j =>
      }
" 0 6 (fontified t) 6 10 (fontified t face font-lock-keyword-face) 10 16 (fontified t) 16 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-5-face)) 25 28 (fontified t) 28 30 (fontified t syntax-table (3) face font-lock-keyword-face) 30 31 (fontified t) 31 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-5-face)) 38 39 (fontified t)) . 4788) (undo-tree-id2644 . -38) (undo-tree-id2645 . -37) (undo-tree-id2646 . -6) (undo-tree-id2647 . -37) (undo-tree-id2648 . 1) (undo-tree-id2649 . -39) (undo-tree-id2650 . -39) (undo-tree-id2651 . -31) (undo-tree-id2652 . -31) (undo-tree-id2653 . -39) (undo-tree-id2654 . 1) (undo-tree-id2655 . -6) (undo-tree-id2656 . -37) (undo-tree-id2657 . -6) (undo-tree-id2658 . -37) (undo-tree-id2659 . 2) (undo-tree-id2660 . -38) (undo-tree-id2661 . 15) (undo-tree-id2662 . -25) 4825 (t 25713 84 65470 138000)) nil (25713 91 460888 606000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4786) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) 4787) nil (25713 91 460869 889000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4591 . 4592) (#("
" 0 1 (fontified nil)) . -4624) (4585 . 4625) 4583) nil (25713 91 460864 301000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -4586) (undo-tree-id2637 . -6) (undo-tree-id2638 . -6) (undo-tree-id2639 . -6) (undo-tree-id2640 . -6) 4592 (4586 . 4592) (4586 . 4587) 4592) nil (25713 91 460859 482000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -4626) (undo-tree-id2633 . -6) (undo-tree-id2634 . -6) (undo-tree-id2635 . -6) (undo-tree-id2636 . -6) 4632 (4625 . 4632) 4618) nil (25713 91 460848 517000) 0 nil])
([nil nil ((4659 . 4671) (apply yas--snippet-revive 4648 4659 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (4648 . 4659) (#("JoinCluster" 0 11 (fontified nil)) . 4648) (4648 . 4659) (#("JoinCluster artes.SystemCommand" 0 31 (fontified nil)) . -4648) (4648 . 4679) (#("Join" 0 4 (fontified t face font-lock-constant-face)) . -4648) (undo-tree-id2663 . -4) 4652 (4648 . 4652) (#("j" 0 1 (fontified t)) . -4648) (undo-tree-id2664 . -1) 4649 (4647 . 4649) (4641 . 4647) (#("O" 0 1 (fontified t face font-lock-constant-face)) . -4641) (undo-tree-id2665 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -4642) (undo-tree-id2666 . -1) 4643 (4634 . 4643) (#("J" 0 1 (fontified t face font-lock-constant-face)) . -4634) (undo-tree-id2667 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -4635) (undo-tree-id2668 . -1) 4636 (4626 . 4636) (4618 . 4626) (nil face font-lock-keyword-face 4617 . 4618) (nil fontified t 4617 . 4618) (4617 . 4618) (t 25713 91 468826 346000) 4587) nil (25713 120 258674 455000) 0 nil])
([nil nil ((1203 . 1204) (t 25713 120 265581 888000)) nil (25713 138 14446 905000) 0 nil])
([nil nil ((1210 . 1216)) nil (25713 138 14439 642000) 0 nil])
([nil nil ((1940 . 1943) (t 25713 138 22303 279000)) nil (25713 159 144145 283000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face font-lock-string-face)) . 1943) (undo-tree-id2669 . 1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1)) nil (25713 159 144138 648000) 0 nil])
([nil nil ((1554 . 1564) (#("server" 0 6 (fontified t face font-lock-type-face)) . 1554) (undo-tree-id2690 . -5) (undo-tree-id2691 . 3) (undo-tree-id2692 . -2) (undo-tree-id2693 . -3) (undo-tree-id2694 . -3) (undo-tree-id2695 . -3) (undo-tree-id2696 . -3) (undo-tree-id2697 . -3) (undo-tree-id2698 . -3) (undo-tree-id2699 . -2) (undo-tree-id2700 . -2) (undo-tree-id2701 . -2) (undo-tree-id2702 . -2) (undo-tree-id2703 . -2) (undo-tree-id2704 . -2) (undo-tree-id2705 . -2) (undo-tree-id2706 . -6) (undo-tree-id2707 . -6) 1556 (t 25713 159 152368 327000)) nil (25713 180 180048 868000) 0 nil])
([nil nil ((1594 . 1615) (#("i" 0 1 (fontified t)) . -1594) (undo-tree-id2672 . -1) (#("p" 0 1 (fontified t)) . -1595) (undo-tree-id2673 . -1) (#(" " 0 1 (fontified t)) . -1596) (undo-tree-id2674 . -1) (#("-" 0 1 (fontified t)) . -1597) (undo-tree-id2675 . -1) 1598 (1597 . 1598) (#("_" 0 1 (fontified t syntax-table (3) face font-lock-keyword-face)) . -1597) (undo-tree-id2676 . -1) 1598 (1594 . 1598) (#("server.some" 0 11 (fontified t)) . 1594) (undo-tree-id2677 . -10) (undo-tree-id2678 . -11) (undo-tree-id2679 . -10) (undo-tree-id2680 . -10) (undo-tree-id2681 . -10) (undo-tree-id2682 . -9) (undo-tree-id2683 . -9) (undo-tree-id2684 . -9) (undo-tree-id2685 . -9) (undo-tree-id2686 . -9) (undo-tree-id2687 . -9) (undo-tree-id2688 . -11) (undo-tree-id2689 . -11)) nil (25713 231 251384 252000) 0 nil])
([nil nil ((#("toInt" 0 5 (fontified t)) . 3863) (undo-tree-id2722 . -4) (undo-tree-id2723 . -5) (t 25713 232 542593 677000)) nil (25713 241 793621 667000) 0 nil] [nil nil ((4689 . 4693) (t 25713 180 189099 678000)) ((#("s\"${" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t syntax-table (1)) 3 4 (fontified t face (rainbow-delimiters-depth-7-face))) . 4689) (undo-tree-id2718 . 1) (undo-tree-id2719 . -4)) (25713 230 829726 595000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3863) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1)) nil (25713 241 793613 76000) 0 nil])
([nil nil ((4697 . 4699)) ((#("}\"" 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t syntax-table (7) face font-lock-string-face)) . 4697) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (t 25713 222 512562 929000)) (25713 222 504125 191000) 0 nil])
([nil nil ((740 . 743) (#("String" 0 6 (fontified t face font-lock-type-face)) . 740) (undo-tree-id2724 . -5) (undo-tree-id2725 . -6) (undo-tree-id2726 . -6) (t 25713 241 802622 51000)) nil (25713 343 503922 856000) 0 nil])
nil
([nil nil ((465 . 471) (t 25713 345 489187 668000)) nil (25713 402 912843 439000) 0 nil] [nil nil ((743 . 744) (t 25713 249 589312 567000)) ((#("z" 0 1 (fontified t face font-lock-type-face)) . 743) (undo-tree-id2727 . -1) (t 25713 340 262531 166000)) (25713 340 252278 708000) 0 nil])
([nil nil ((490 . 496)) nil (25713 402 912835 826000) 0 nil])
nil
([nil nil ((2550 . 2552) (t 25713 402 922423 886000)) nil (25713 415 272086 455000) 0 nil])
([nil nil ((2168 . 2175) (#("Actor" 0 5 (fontified t face font-lock-string-face)) . 2168) (undo-tree-id2728 . -4) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -5) (undo-tree-id2740 . -5) (t 25713 415 282406 316000)) nil (25713 508 428552 990000) 0 nil])
([nil nil ((2079 . 2085) (2076 . 2079) (t 25713 508 435641 355000) 2075) nil (25713 529 221377 271000) 0 nil])
([nil nil ((2084 . 2088) (t 25713 529 228960 325000)) nil (25713 532 417970 369000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2090) (undo-tree-id2741 . -2) (undo-tree-id2742 . -2) (undo-tree-id2743 . -2) (undo-tree-id2744 . -2) 2092 (2089 . 2092) (t 25713 532 428958 342000) 2087) nil (25713 533 796034 500000) 0 nil])
([nil nil ((2104 . 2112) (#("c" 0 1 (fontified t)) . -2104) (undo-tree-id2745 . -1) 2105 (2104 . 2105) (2097 . 2104) (#("c" 0 1 (fontified t)) . -2097) (undo-tree-id2746 . -1) (#("r" 0 1 (fontified t)) . -2098) (undo-tree-id2747 . -1) (#("e" 0 1 (fontified t)) . -2099) (undo-tree-id2748 . -1) 2100 (2092 . 2100) (2089 . 2092) (t 25713 533 805624 174000) 2077) nil (25713 551 295187 224000) 0 nil])
([nil nil ((2106 . 2107) (#("D" 0 1 (fontified t)) . 2106) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (t 25713 551 305614 510000)) nil (25713 553 496606 641000) 0 nil])
([nil nil ((2088 . 2095) (t 25713 553 505613 418000)) nil (25713 559 96964 993000) 0 nil])
([nil nil ((2737 . 2744) (t 25713 559 105610 759000)) nil (25713 628 467843 301000) 0 nil])
([nil nil ((2738 . 2739) (#("L" 0 1 (fontified t face font-lock-string-face)) . 2738) (undo-tree-id2751 . -1)) nil (25713 628 467836 177000) 0 nil])
([nil nil ((3420 . 3432) (3413 . 3420) (t 25713 628 475591 605000) 3413) nil (25713 732 95870 739000) 0 nil])
([nil nil ((3423 . 3424)) nil (25713 732 95867 875000) 0 nil])
([nil nil ((3437 . 3442) (3433 . 3437)) nil (25713 732 95861 310000) 0 nil])
([nil nil ((3442 . 3444) (t 25713 732 105605 344000)) nil (25713 748 554734 713000) 0 nil])
([nil nil ((#("      " 0 6 (fontified nil)) . -4753) (undo-tree-id2756 . -6) (undo-tree-id2757 . -6) (undo-tree-id2758 . -6) (undo-tree-id2759 . -6) (4745 . 4753) (#("        " 0 8 (fontified nil)) . -4743) (4733 . 4743) (#("          " 0 10 (fontified nil)) . -4731) (4719 . 4731) (#("              " 0 14 (fontified nil)) . -4703) (4687 . 4703) (#("              " 0 14 (fontified nil)) . -4685) (4669 . 4685) (#("                " 0 16 (fontified nil)) . -4653) (4635 . 4653) (#("                " 0 16 (fontified nil)) . -4618) (4600 . 4618) (#("              " 0 14 (fontified nil)) . -4574) (4558 . 4574) (#("              " 0 14 (fontified nil)) . -4517) (4501 . 4517) (#("            " 0 12 (fontified nil)) . -4486) (4472 . 4486) (#("              " 0 14 (fontified nil)) . -4457) (4441 . 4457) (#("              " 0 14 (fontified nil)) . -4439) (4423 . 4439) (#("                " 0 16 (fontified nil)) . -4413) (4395 . 4413) (#("                " 0 1 (fontified nil) 1 16 (fontified nil)) . -4346) (4328 . 4346) (#("              " 0 14 (fontified nil)) . -4243) (4227 . 4243) (#("            " 0 12 (fontified nil)) . -4180) (4166 . 4180) (#("              " 0 14 (fontified nil)) . -4107) (4091 . 4107) (#("              " 0 14 (fontified nil)) . -4078) (4062 . 4078) (#("            " 0 12 (fontified nil)) . -4028) (4014 . 4028) (#("              " 0 13 (fontified nil) 13 14 (rear-nonsticky t fontified nil)) . -3999) (3983 . 3999) (#("              " 0 14 (fontified nil)) . -3900) (3884 . 3900) (#("            " 0 12 (fontified nil)) . -3838) (3824 . 3838) (#("              " 0 14 (fontified nil)) . -3809) (3793 . 3809) (#("              " 0 14 (fontified nil)) . -3744) (3728 . 3744) (#("              " 0 6 (fontified nil) 6 7 (fontified nil) 7 14 (fontified nil)) . -3676) (3660 . 3676) (#("            " 0 12 (fontified nil)) . -3620) (3606 . 3620) (#("          " 0 3 (fontified nil) 3 10 (fontified nil)) . -3579) (3567 . 3579) (#("        " 0 1 (fontified nil) 1 2 (fontified nil) 2 8 (fontified nil)) . -3534) (3524 . 3534) (#("      " 0 4 (fontified nil) 4 6 (fontified nil)) . -3453) (3445 . 3453) 4695) nil (25713 748 554727 450000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -4762) (undo-tree-id2752 . -2) (undo-tree-id2753 . -2) (undo-tree-id2754 . -2) (undo-tree-id2755 . -2) (4764 . 4765) (4755 . 4764) 4751) nil (25713 748 554710 408000) 0 nil])
([nil nil ((#("      }
" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-5-face)) 7 8 (fontified t)) . 4756) (undo-tree-id2771 . -7) (undo-tree-id2772 . 1) (undo-tree-id2773 . -6) (undo-tree-id2774 . -6) (undo-tree-id2775 . 2) (undo-tree-id2776 . -7) 4762 (t 25713 748 562278 315000)) nil (25713 756 303485 570000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5057 . 5058) (#("
" 0 1 (fontified nil)) . -5059) (5051 . 5060) 5044) nil (25713 756 303478 376000) 0 nil])
([nil nil ((#("      " 0 6 (fontified nil)) . -5072) (undo-tree-id2760 . -6) (undo-tree-id2761 . -6) (undo-tree-id2762 . -6) (5064 . 5072) (#("        " 0 8 (fontified nil)) . -5062) (5052 . 5062) (#("          " 0 10 (fontified nil)) . -5042) (5030 . 5042) (#("          " 0 10 (fontified nil)) . -4981) (4969 . 4981) (#("        " 0 8 (fontified nil)) . -4959) (4949 . 4959) (#("          " 0 7 (fontified nil) 7 10 (fontified nil)) . -4923) (4911 . 4923) (#("        " 0 8 (fontified nil)) . -4905) (4895 . 4905) (#("      " 0 6 (fontified nil)) . -4865) (4857 . 4865) (#("      " 0 6 (fontified nil)) . -4854) (undo-tree-id2763 . -6) (4846 . 4854) (#("        " 0 8 (fontified nil)) . -4800) (undo-tree-id2764 . -8) (undo-tree-id2765 . -6) (4790 . 4800) (#("      " 0 5 (fontified nil) 5 6 (rear-nonsticky t fontified nil)) . -4765) (undo-tree-id2766 . -6) (undo-tree-id2767 . -6) (undo-tree-id2768 . -6) (undo-tree-id2769 . -6) (undo-tree-id2770 . -6) (4757 . 4765) 4763) nil (25713 756 303470 275000) 0 nil])
([nil nil ((5087 . 5097) (#("r" 0 1 (fontified t face font-lock-constant-face)) . -5087) (undo-tree-id2783 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -5088) (undo-tree-id2784 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -5089) (undo-tree-id2785 . -1) 5090 (5082 . 5090) (5073 . 5082) (t 25713 756 312281 643000) 5070) nil (25713 851 692700 796000) 0 nil])
([nil nil ((5105 . 5111)) nil (25713 851 692695 977000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 5110) (#("
" 0 1 (fontified t)) . -5111) (undo-tree-id2782 . 1) 5110) nil (25713 851 692693 113000) 0 nil])
([nil nil ((5110 . 5111) (#("      " 0 6 (fontified nil)) . 5110) (undo-tree-id2780 . 6) (#("
" 0 1 (fontified t)) . -5110) (undo-tree-id2781 . 1) 5109) nil (25713 851 692689 831000) 0 nil])
([nil current ((5121 . 5128) (#("empty" 0 5 (fontified t)) . 5121) (undo-tree-id2777 . -4) (undo-tree-id2778 . -5) (undo-tree-id2779 . -5)) nil (25713 851 692679 843000) 0 nil])
nil
